{
  "active": false,
  "connections": {
    "Get Cloud Files": {
      "main": [
        [
          {
            "node": "Combine Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get Cloud Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nextcloud": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Items": {
      "main": [
        [
          {
            "node": "Nextcloud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Function to get issuance data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get issuance data": {
      "main": [
        [
          {
            "node": "Get bpo Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get bpo Data": {
      "main": [
        [
          {
            "node": "Function to Create po obj",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to Create po obj": {
      "main": [
        [
          {
            "node": "Create POs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-05-05T10:43:53.405Z",
  "id": "302",
  "name": "Vedanta : Store Auto PO for VMI",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -40,
        340
      ]
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "path": "Auto-Generated-PO-qa/"
      },
      "name": "Get Cloud Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        380,
        340
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        160,
        340
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Auto-Generated-PO-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        820,
        340
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// return items;\nlet poFiles=[];\nlet excelFiles=[];\nitems.forEach((item) => {\n    const fullPath = item.json[\"path\"].split(\"/\");\n    const fileName = fullPath[fullPath.length - 1]\n    if(decodeURI(fileName).includes(\".csv\") || decodeURI(fileName).includes(\".xlsx\")){\n        excelFiles.push({\"file_name\":decodeURI(fileName)});\n    }\n});\n\nreturn [{\n     json: {\n         excelData:excelFiles\n    }\n}];"
      },
      "name": "Combine Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        600,
        340
      ]
    },
    {
      "parameters": {
        "functionCode": "let binaries = {};\nconst { read: xlsxRead } = require('xlsx'); \nconst data = items[0].binary.data; \nworkbook = xlsxRead(data.data); \nbinaries[\"data\"] = workbook;\n\nitems[0].json.binaries= binaries\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1000,
        340
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=data",
        "options": {
          "sheetName": "={{$node[\"Function\"].json[\"binaries\"][\"data\"][\"SheetNames\"][0]}}"
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        1260,
        340
      ]
    },
    {
      "parameters": {
        "functionCode": "let issuanceData = [];\nlet vedantaBpos = [];\nitems.forEach((item, index) => {\n  vedantaBpos.push(item.json[\"Outline agreement\"])\n  const poDate = getFormattedDate(item.json[\"Document Date\"]);\n  const itemDeliveryDate = getFormattedDate(item.json[\"PO Item Delivery Date\"]);\n  issuanceData.push({\n    po_number : item.json[\"Purchasing Document\"],\n    product : item.json[\"Material\"],\n    plant : item.json[\"Plant\"],\n    qty : item.json[\"Order Quantity\"],\n    rate : item.json[\"Net Price\"],\n    vedanta_bpo : item.json[\"Outline agreement\"],\n    po_date : poDate,\n    item_delivery_date : itemDeliveryDate\n  })\n})\nfunction getFormattedDate(secs){\n  const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day\n\n  const date = new Date((secs-1) * millisecondsPerDay + Date.parse(\"1900-01-01\"));\n\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Months are zero-based, so we add 1\n  const year = date.getFullYear();\n  const formattedDate = `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day-1}`;\n  return formattedDate\n}\nlet uniqueVedantaBpoArr = vedantaBpos.filter((value, index) => {\n    return vedantaBpos.indexOf(value) === index;\n  });\nreturn [{\n    json: {\n        issuanceData: issuanceData,\n        vedantaBpos : uniqueVedantaBpoArr\n    },\n}];\n"
      },
      "name": "Function to get issuance data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1480,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_bpos?filter={\"vedanta_bpo_ref\":{\"_in\":\"{{$node[\"Function to get issuance data\"].json[\"vedantaBpos\"]}}\"}}&fields=*.*",
        "options": {}
      },
      "name": "Get bpo Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1720,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let issuanceData = $node[\"Function to get issuance data\"].json[\"issuanceData\"];\nlet bpoData = $node[\"Get bpo Data\"].json[\"data\"];\nuniqueArr = Object.create(null),\n    uniquePOArr = issuanceData.filter(o => {\n        var key = ['po_number'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\nlet vedantaPO = [];\nuniquePOArr.forEach(function(po,index){\n    let matchedAllPos = issuanceData.filter(issuance =>issuance.po_number == po.po_number);\n    let matchedBpo = bpoData.filter(bpo =>bpo.vedanta_bpo_ref == po.vedanta_bpo);\n    let poItems = [];\n    matchedAllPos.forEach(function(item,index){\n        let netPrice = parseFloat(item.qty)*parseFloat(item.rate);\n        let matchedBpoItem = matchedBpo[0].bpo_items.filter(bpoItem =>bpoItem.product == item.product);\n        poItems[index]={};\n        poItems[index].id = `${po.po_number}-${index+1}`;\n        poItems[index].product = po.product;\n        poItems[index].vendor = matchedBpo[0].vendor.id;\n        poItems[index].net_price = netPrice;\n        poItems[index].gross_price = netPrice + (netPrice*parseFloat(matchedBpoItem[0].tax))/100;\n        poItems[index].requested_qty = item.qty;\n        poItems[index].unit_price = item.rate;\n        poItems[index].tax_percentage = matchedBpoItem[0].tax;\n        poItems[index].uom = matchedBpoItem[0].uom;\n        poItems[index].plant = item.plant;\n        poItems[index].hsn = matchedBpoItem[0].hsn;\n        poItems[index].delivery_date = new Date(item.item_delivery_date).toISOString();\n    });\n    let maxDate = new Date(\n    Math.max(\n        ...matchedAllPos.map(element => {\n        return new Date(element.item_delivery_date);\n        }),\n        ),\n    );\n    vedantaPO[index]={};\n    vedantaPO[index].id = po.po_number;\n    vedantaPO[index].po_date = new Date(po.po_date).toISOString();\n    vedantaPO[index].po_value = poItems.reduce((total,obj)=>obj.net_price+ total, 0);\n    vedantaPO[index].net_po_value = poItems.reduce((total,obj)=>obj.gross_price+ total, 0);\n    vedantaPO[index].po_type = \"use_and_pay\";\n    vedantaPO[index].po_deliver_date = new Date(maxDate).toISOString();\n    vedantaPO[index].po_items = poItems;\n    vedantaPO[index].vendor_bpo = matchedBpo[0].sd_bpo_vedanta_ref;\n})\n\n\nitems[0].json.issuanceData = issuanceData;\nitems[0].json.uniquePOArr = uniquePOArr;\nitems[0].json.vedantaPO = vedantaPO;\nreturn items;"
      },
      "name": "Function to Create po obj",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1940,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_pos",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to Create po obj\"].json[\"vedantaPO\"]}}"
      },
      "name": "Create POs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2160,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-05-08T12:03:47.501Z"
}