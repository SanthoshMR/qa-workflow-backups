{
  "active": false,
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Extracting Vedanta PO details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting Vedanta PO details": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-06-30T12:33:20.349Z",
  "id": "147",
  "name": "Vedanta PO Extract",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/assets/55943835-4239-4929-b460-65318dee1cbc",
        "allowUnauthorizedCerts": true,
        "responseFormat": "file",
        "options": {}
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        440,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const pdf = require('pdf-parse');\nlet product_name = [];\nlet product_code=[];\nlet product_quantity=[];\nlet material_description=[];\nlet vendor_name=[];\nlet vendor_phone=[];\nlet vendor_companyName=[];\nlet vendor_email=[];\nlet vendor_adress=[];\nlet vendor_gstin = [];\nlet vendor_payment_terms = [];\nlet product_deliverDate=[];\nlet productvalueWithTax=[];\nlet hsn_code = [];\nlet uom = [];\nlet plant = [];\nlet taxes = [];\nlet taxValues = [];\nlet rates = [];\nlet productSubTotal = [];\nlet productDetails=[];\nlet po_number = \"\";\nlet po_date = \"\";\nlet po_value = 0;\nlet findParameters = [\"PO Number\",\"PO Date\"];\nlet aribaVendorId = [];\nlet taxPercentages = [];\nlet po_type =  \"\";\nlet excelHeaders = {\n  \"delivery_date\":\"Delivery Date\",\n  \"order_type\":\"Order type\",\n  \"po_number\":\"PO Number\",\n  \"po_date\":\"PO Date\",\n  \"sr_no\":\"Sr no.\",\n  \"material_code\":\"Material Code\",\n  \"vendor_name\":\"Vendor Name\",\n  \"vendor_code\":\"Vendor code\",\n  \"vendor_email\":\"Vendor email \",\n  \"vendor_contact\":\"Vendor contact\",\n  \"hsn\":\"HSN/SAC\",\n  \"uom\":\"UOM\",\n  \"plant\":\"Plant\",\n  \"gstin\":\"GST Identification Number (GSTIN)\",\n  \"rate\":\"Item Price\",\n  \"product_name\":\"Item Desc\",\n  \"qty\":\"Qty ordered\",\n  \"value\":\"Value (Excluding GST)\",\n  \"tax_percentage\":\"Item Tax %\",\n  \"tax_amount\":\"Item Tax Amount\",\n  \"total_value\":\"Total value \",\n  \"payment_terms\":\"Payment Terms Label\",\n  \"deliver_to_customer\":\"Deliver To Customer\"\n}\n\nfunction render_page(pageData) {\n  //check documents https://mozilla.github.io/pdf.js/\n  let render_options = {\n    //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.\n    normalizeWhitespace: false,\n    //do not attempt to combine same line TextItem's. The default value is `false`.\n    disableCombineTextItems: false,\n  };\n\n  return pageData.getTextContent(render_options).then(function (textContent) {\n    let lastY,\n      text = \"\";\n    for (let item of textContent.items) {\n      text += `\\n${item.str}`;\n    }\n    return text;\n  });\n}\n\nlet options = {\n  pagerender: render_page,\n  max: 200,\n};\n\nconst binaryData = Buffer.from(items[0].binary[\"data\"].data, \"base64\");\nlet content = await pdf(binaryData, options);\nconst contentSubString =  content.text.substring(0,content.text.indexOf(\"APPENDIX I :\"));\nlet contentSubStringArray = contentSubString.split(\"\\n\");\nlet paginationFound = false;\nlet productNameFound = false;\nlet productFound = false;\nlet productName = \"\";\nlet vendorName = \"\";\nlet vendorEmail = \"\";\nlet vendorContact = \"\";\nlet vendorPaymentTerms = \"\";\nlet vendorGstin = \"\"\nlet vendorFound = false;\nlet vendorNameFound = false;\nlet vendorEmailFound = false;\nlet vendorContactFound = false\nlet vendorPaymentFound = false\nlet vendorGstinFound = false\nlet productSection = false;\nlet productIndex = 0;\n\n//Get the SUbString from DELIVERY SCHEDULE to Terms of Delivery to extract the product deliver date\nlet contentDeliveryScheduleSubString = content.text.substring(content.text.indexOf(\"DELIVERY SCHEDULE\"),content.text.indexOf(\"Terms of Delivery :\")).trim();\nlet dateSubString = contentDeliveryScheduleSubString.substring(contentDeliveryScheduleSubString.indexOf(\" 1\"));\nlet contentDeliveryScheduleSubStringArray = dateSubString.split(\"\\n\");\nlet deliverySchedulePagination = false\nlet incrementIndex= 5\nfor(i=4;i<contentDeliveryScheduleSubStringArray.length;i+=incrementIndex){\n      product_deliverDate.push(contentDeliveryScheduleSubStringArray[i].trim());\n      if(contentDeliveryScheduleSubStringArray[i+1]){\n        if(contentDeliveryScheduleSubStringArray[i+1].includes(\"Page\")){\n          i=i+21;\n        }\n      }\n      \n        //else if(contentDeliveryScheduleSubStringArray[i].includes(\"Date\")){\n      //   incrementIndex = 5\n      // }\n}\n\n//To check whether PO is routing or use and pay\nif(contentSubString.includes(\"Routing\")){\n  po_type = \"routing\";\n}else {\n  po_type = \"Use and Pay\"\n}\n//To check whether PO is routing or use and pay\n\n//Loop through the ContentSubstring and extract the po details\nfor(i=0;i<contentSubStringArray.length;i++){\n    if((contentSubStringArray[i].includes(\"Page\") || paginationFound || contentSubStringArray[i].includes(\"Specification\")) && productSection){\n      if(contentSubStringArray[i].includes(\"Specification\")){\n        paginationFound = false;\n      }else paginationFound = true;\n    }\n    else if(contentSubStringArray[i].includes(\"PO Number\")){\n      let splitPoString = contentSubStringArray[i+1].split(\":\");\n      po_number = splitPoString[1].trim();\n    }else if(contentSubStringArray[i].includes(\"PO Date\")){\n      let splitPoDateString = contentSubStringArray[i+1].split(\":\");\n      po_date = splitPoDateString[1].trim();\n    }else if(contentSubStringArray[i].includes(\"Total PO Value\")){\n      po_value = contentSubStringArray[i+1].split(\",\").join('').trim();\n      productSection = false\n    }else if( !paginationFound && contentSubStringArray[i].includes(\"Item code\") && !contentSubStringArray[i-3].includes(\"PURCHASE ORDER CONTINUATION\")){\n      productIndex = contentSubStringArray[i+8].trim();\n      product_code.push(contentSubStringArray[i+9]);\n      plant.push(contentSubStringArray[i+10]);\n      uom.push(contentSubStringArray[i+11]);\n      product_quantity.push(contentSubStringArray[i+12].trim());\n      rates.push(contentSubStringArray[i+13].split(\",\").join(''));\n      productSubTotal.push(contentSubStringArray[i+14].split(\",\").join(''));\n      productSection = true;\n      productNameFound = true;\n      i=i+14;  \n    }else if(productSection && contentSubStringArray[i].includes(\"GSTIN\") && !(contentSubStringArray[i-1].includes(\"Payment Terms:\"))  && !contentSubStringArray[i+4].includes(\"CONFIRMATION/ACKNOWLEDGEMENT\") && !contentSubStringArray[i+2].includes(\"Total PO Value\")){\n      productFound = true;\n      i=i+1;\n    }\n    else if(productFound){\n      product_code.push(contentSubStringArray[i+1]);\n      plant.push(contentSubStringArray[i+2]);\n      uom.push(contentSubStringArray[i+3]);\n      product_quantity.push(contentSubStringArray[i+4].trim());\n      rates.push(contentSubStringArray[i+5].split(\",\").join(''));\n      productSubTotal.push(contentSubStringArray[i+6].split(\",\").join(''));\n      productNameFound = true;\n      productFound = false;\n      i=i+6\n    }else if(productNameFound){ \n      if(contentSubStringArray[i].includes(\"Vendor Details:\") || contentSubStringArray[i].includes(\"HSN Code\") || contentSubStringArray[i].includes(\"Vendor Name:\")){\n        if(contentSubStringArray[i].includes(\"Vendor Details:\") || contentSubStringArray[i].includes(\"Vendor Name:\")){\n          vendorFound = true;\n          vendorName = contentSubStringArray[i]\n        }else if(contentSubStringArray[i].includes(\"HSN Code\")){\n          let hsnCodeString = contentSubStringArray[i].split(\":\");\n          hsn_code.push(hsnCodeString[1].trim());\n        }\n        \n        productNameFound = false;\n        if(productName.includes(\"IN :Integrated GST\") || productName.includes(\"IN : State\") || productName.includes(\"IN : Central\") ){\n          let searchIndexParameter = \"\";\n          if(productName.includes(\"IN :Integrated GST\")){\n            searchIndexParameter = \"IN :Integrated GST\"\n          }else if(productName.includes(\"IN : State\")){\n            searchIndexParameter = \"IN : Central\"\n          }else searchIndexParameter = \"IN : Central\";\n          let result = productName.substring(productName.indexOf(searchIndexParameter));\n          taxPercentages.push(result.substring(0,result.indexOf(\")\")));\n          let getTaxValue = result.substring(result.indexOf(\")\")+1).trim().split(\" \")[0];\n          taxValues.push(getTaxValue);\n          productName = productName.replace(result.substring(result.indexOf(\")\")+1,0),'');\n          productName = productName.replace(getTaxValue,\"\")\n        }\n        product_name.push(productName);\n        productName = \"\";\n      }else{\n        productName = productName + contentSubStringArray[i]\n      }\n    }else if(!vendorFound && contentSubStringArray[i].includes(\"Vendor Details:\")){\n      vendorFound = true;\n    }\n    else if(vendorFound){\n      if(contentSubStringArray[i].includes(\"Email \")){\n        vendorNameFound = true;\n        vendorFound = false;\n        vendorEmail = contentSubStringArray[i].includes(\"Email ID:\")?contentSubStringArray[i].split(\":\")[1]:\"\"\n        let vendorNameString = vendorName.includes(\"-\")?vendorName.split(\"-\"): vendorName.split(\":\")\n        if(vendorNameString[1].includes(\"IN :Integrated GST\")){\n          let result = vendorNameString[1].substring(vendorNameString[1].indexOf(\"IN :Integrated GST\"));\n          taxPercentages.push(result.substring(0,result.indexOf(\")\")));\n          let getTaxValue = result.substring(result.indexOf(\")\")+1).trim().split(\" \")[0];\n          taxValues.push(getTaxValue.split(\",\").join('').trim());\n        }\n        let extractVendorName = vendorNameString[1].includes(\"IN :Integrated\")?vendorNameString[1].substring(0,vendorNameString[1].indexOf(\"IN :Integrated\")):vendorNameString[1];\n        vendor_name.push(extractVendorName.trim());\n        vendorName = \"\";\n        \n      }else{\n        vendorName = vendorName + contentSubStringArray[i]\n      }\n    }\n    else if(contentSubStringArray[i].includes(\"IN :Integrated\") || contentSubStringArray[i].includes(\"IN : State\")){\n       let getTaxes = contentSubStringArray[i].includes(\"IN : State\")?parseFloat(contentSubStringArray[i+1].split(\",\").join('').trim())*2:contentSubStringArray[i+1].split(\",\").join('').trim()\n       taxValues.push(getTaxes??getTaxes)\n       taxPercentages.push(contentSubStringArray[i]);\n    }else if(vendorNameFound){\n      if(contentSubStringArray[i].includes(\"Contact Details\") || contentSubStringArray[i].includes(\"Contact Number:\")){\n        vendorNameFound = false;\n        vendorEmailFound = true;\n        vendorContact = contentSubStringArray[i]\n        let vendorEmailString = vendorEmail?vendorEmail:contentSubStringArray[i-1].split(\":\");\n        let email = vendorEmail?vendorEmail.trim():vendorEmailString[1].trim()\n        if(email.includes(\"IN :Integrated GST\")){\n          let result = vendorEmailString[1].substring(vendorEmailString[1].indexOf(\"IN :Integrated GST\"));\n          taxPercentages.push(result.substring(0,result.indexOf(\")\")));\n          let getTaxValue = result.substring(result.indexOf(\")\")+1).trim().split(\" \")[0];\n          taxValues.push(getTaxValue);\n        }\n        let extractVendorEmail = email.includes(\"IN :Integrated\")?email.substring(0,email.indexOf(\"IN :Integrated\")):email;\n        extractVendorEmail.includes(\":\")?vendor_email.push(extractVendorEmail.trim().split(\":\")[1]):vendor_email.push(extractVendorEmail.trim());\n        vendorEmail = \"\";\n      }\n      else{\n        vendorEmail = vendorEmail + contentSubStringArray[i];\n      }\n    }\n    else if(vendorEmailFound){\n      if(contentSubStringArray[i].includes(\"Payment Terms:\")){\n        vendorEmailFound = false;\n        vendorContactFound = true\n        vendorPaymentTerms = contentSubStringArray[i]\n        vendor_phone.push(vendorContact.trim().split(\":\")[1])\n      }else {\n        vendorContact = vendorContact+contentSubStringArray[i]\n      }\n    }else if(vendorContactFound){\n      if(contentSubStringArray[i].includes(\"GSTIN:\")){\n        vendorContactFound = false;\n        vendorPaymentFound = true\n        vendorGstin = contentSubStringArray[i];\n        vendor_payment_terms.push(vendorPaymentTerms.trim().split(\":\")[1])\n      }else {\n        vendorPaymentTerms = vendorPaymentTerms + contentSubStringArray[i]\n      }\n    }\n    else if(vendorPaymentFound){\n      if(contentSubStringArray[i].includes(\"Ariba Vendor ID:\")){\n        vendorPaymentFound = false;\n        vendor_gstin.push(vendorGstin.trim().split(\":\")[1])\n      }else {\n        vendorGstin = vendorGstin + contentSubStringArray[i]\n      }\n    }\n    else if(contentSubStringArray[i].includes(\"HSN Code\")){\n      let hsnCodeString = contentSubStringArray[i].split(\":\");\n      //hsn_code.push(hsnCodeString[1].trim());\n    }else if(contentSubStringArray[i].includes(\"Ariba Vendor ID\")){\n      let aribaVendorIdString = contentSubStringArray[i+1].split(\"-\");\n      //aribaVendorId.push(aribaVendorIdString[1].trim());\n    }\n}\n\nproduct_code.forEach(function(item,index){\n  productDetails[index] = {};\n  productDetails[index].product_index = index;\n  productDetails[index].product_name =product_name[index] ;\n  productDetails[index].product_code=product_code[index];\n  productDetails[index].uom = uom[index];  \n  productDetails[index].hsn = hsn_code[index];\n  productDetails[index].product_quantity=product_quantity[index];\n  let productTotal = parseFloat(productSubTotal[index])+parseFloat(taxValues[index])\n  productvalueWithTax.push(productTotal)\n  productDetails[index].subTotal = productSubTotal[index];\n  productDetails[index].taxValue = taxValues[index];\n  productDetails[index].productvalueWithTax=productTotal;\n  productDetails[index].rate = rates[index];\n  productDetails[index].tax = taxPercentages[index].includes(\"State GST\")|| taxPercentages[index].includes(\"Central GST\")?parseFloat(taxPercentages[index].match(/[\\d\\.]+/))*2:parseFloat(taxPercentages[index].match(/[\\d\\.]+/));\n  //productDetails[index].description=material_description[index];\n  productDetails[index].product_delivery_date = product_deliverDate[index];\n  productDetails[index].plant = plant[index];\n  productDetails[index].isMapped = false;         \n})\n\nlet vendorDetails=[];\nvendor_name.forEach(function(item,index){\n  vendorDetails[index] = {};\n  vendorDetails[index].vendor_name=vendor_name[index];\n  vendorDetails[index].vendor_phone=vendor_phone[index];\n  vendorDetails[index].vendor_company=vendor_companyName[index];\n  vendorDetails[index].vendor_email=vendor_email[index];\n  vendorDetails[index].gstin = vendor_gstin[index];\n  vendorDetails[index].vendor_address=vendor_adress[index];\n  vendorDetails[index].ariba_vendor_id = aribaVendorId[index];\n})\nlet prodven=[];\nif(vendor_name.length){\n      productDetails.forEach(function(product,index){\n        prodven.push({\n          json:{\n            [excelHeaders[\"delivery_date\"]] : product[\"product_delivery_date\"],\n            [excelHeaders[\"order_type\"]] : po_type,\n            [excelHeaders[\"po_number\"]]: po_number,\n            [excelHeaders[\"po_date\"]]:po_date,\n            [excelHeaders[\"sr_no\"]]: product[\"product_index\"]+1,\n            [excelHeaders[\"material_code\"]]: product[\"product_code\"],\n            [excelHeaders[\"vendor_name\"]]: vendor_name.length>1?vendor_name[index]:vendor_name[0],\n            [excelHeaders[\"vendor_email\"]]: vendor_name.length>1?vendor_email[index]:vendor_email[0],\n            [excelHeaders[\"vendor_contact\"]]: vendor_name.length>1?vendor_phone[index]:vendor_phone[0],\n            [excelHeaders[\"hsn\"]] : product[\"hsn\"],\n            [excelHeaders[\"uom\"]] :  product[\"uom\"],\n            [excelHeaders[\"plant\"]]: product[\"plant\"],\n            [excelHeaders[\"gstin\"]] :  vendor_name.length>1?vendor_gstin[index]:vendor_gstin[0],\n            [excelHeaders[\"rate\"]] :  product[\"rate\"],\n            [excelHeaders[\"product_name\"]]:  product[\"product_name\"],\n            [excelHeaders[\"qty\"]]: product[\"product_quantity\"],\n            [excelHeaders[\"value\"]] :  product[\"subTotal\"],\n            [excelHeaders[\"tax_percentage\"]]: product[\"tax\"],\n            [excelHeaders[\"tax_amount\"]]: product[\"taxValue\"],\n            [excelHeaders[\"total_value\"]]: product[\"productvalueWithTax\"],\n            [excelHeaders[\"payment_terms\"]]:vendor_name.length>1?vendor_payment_terms[index]:vendor_payment_terms[0],\n            [excelHeaders[\"deliver_to_customer\"]]:product[\"plant\"]\n          }\n        })\n        //prodven[index]={};\n        \n      })\n}\nif(vendor_name.length>0){\n   items[0].json.order_type = \"routing\";\n\n}else items[0].json.order_type = \"rfq\";\n\nlet max =product_deliverDate[0];\n\nproduct_deliverDate.forEach(function(value,index){\n       max = new Date(value) > new Date(max)? value: max;\n      \n\n\n})\n\nitems[0].json.po_type = po_type;\nitems[0].json.max_date = max.split(\".\").reverse().join(\"-\"); \n\nitems[0].json.product_deliverDate = product_deliverDate;\n//items[0].json.vendor_name = vendor_name;\n\n\n//items[0].json.vendor_email = vendor_email;\n//items[0].json.aribaVendorId = aribaVendorId;\nitems[0].json.products = productDetails;\n//items[0].json.vendors = vendorDetails;\nitems[0].json.prodven = prodven;\nitems[0].json.taxValues = taxValues;\nitems[0].json.productSubTotal = productSubTotal;\n//items[0].json.product_code = product_code;\n//items[0].json.product_name = product_name;\n//items[0].json.plant = plant;\nitems[0].json.uom = uom;\nitems[0].json.product_quantity = product_quantity;\nitems[0].json.rates = rates;\nitems[0].json.po_date = po_date; \nitems[0].json.po_number = po_number;\nitems[0].json.po_value = po_value;\nitems[0].json.productvalueWithTax = productvalueWithTax;\nitems[0].json.contentSubStringArray = contentSubStringArray\n//items[0].json.contentDeliveryScheduleSubStringArray = contentDeliveryScheduleSubStringArray\nitems[0].json.taxPercentages =  taxPercentages\nreturn prodven;"
      },
      "name": "Extracting Vedanta PO details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        180
      ]
    },
    {
      "parameters": {
        "functionCode": "const pdf = require('pdf-parse');\nlet x = [];\nfunction render_page(pageData) {\n  //check documents https://mozilla.github.io/pdf.js/\n  let render_options = {\n    //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.\n    normalizeWhitespace: false,\n    //do not attempt to combine same line TextItem's. The default value is `false`.\n    disableCombineTextItems: false,\n  };\n\n  return pageData.getTextContent(render_options).then(function (textContent) {\n    let lastY,\n      text = \"\";\n    for (let item of textContent.items) {\n      x.push(item)\n      //text += `\\n${item.str}`;\n      \n    }\n    return text;\n  });\n}\n\nlet options = {\n  pagerender: render_page,\n  password : \"502000\",\n  max: 200,\n};\n\nconst binaryData = Buffer.from(items[0].binary.data.data, \"base64\");\nlet content = await pdf(binaryData, options);\n\n\nitems[0].json.x = x\nitems[0].json.text = content.text;\n\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        640,
        300
      ],
      "disabled": true
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "value": "="
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1520,
        220
      ]
    }
  ],
  "settings": {
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-01-24T05:57:32.197Z"
}