{
  "active": false,
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Extracting Vedanta PO details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-06-30T12:33:20.349Z",
  "id": "147",
  "name": "Vedanta PO Extract",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/assets/17a59799-5631-462b-892d-d7a7247a4ec6",
        "allowUnauthorizedCerts": true,
        "responseFormat": "file",
        "options": {}
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        440,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const pdf = require('pdf-parse');\nlet product_name = [];\nlet product_code=[];\nlet product_quantity=[];\nlet material_description=[];\nlet vendor_name=[];\nlet vendor_phone=[];\nlet vendor_companyName=[];\nlet vendor_email=[];\nlet vendor_adress=[];\nlet product_deliverDate=[];\nlet productvalueWithTax=[];\nlet hsn_code = [];\nlet uom = [];\nlet plant = [];\nlet taxes = [];\nlet taxValues = [];\nlet rates = [];\nlet productSubTotal = [];\nlet productDetails=[];\nlet po_number = \"\";\nlet po_date = \"\";\nlet po_value = 0;\nlet findParameters = [\"PO Number\",\"PO Date\"];\n\n\n\nfunction render_page(pageData) {\n  //check documents https://mozilla.github.io/pdf.js/\n  let render_options = {\n    //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.\n    normalizeWhitespace: false,\n    //do not attempt to combine same line TextItem's. The default value is `false`.\n    disableCombineTextItems: false,\n  };\n\n  return pageData.getTextContent(render_options).then(function (textContent) {\n    let lastY,\n      text = \"\";\n    for (let item of textContent.items) {\n      text += `\\n${item.str}`;\n    }\n    return text;\n  });\n}\n\nlet options = {\n  pagerender: render_page,\n  max: 200,\n};\n\nconst binaryData = Buffer.from(items[0].binary.data.data, \"base64\");\nlet content = await pdf(binaryData, options);\nconst contentSubString =  content.text.substring(0,content.text.indexOf(\"APPENDIX I :\"));\nlet contentSubStringArray = contentSubString.split(\"\\n\");\nlet paginationFound = false;\nlet productFound = false;\nlet productName = \"\";\nlet vendorName = \"\";\nlet vendorEmail = \"\";\nlet vendorFound = false;\nlet vendorNameFound = false;\nlet vendorEmailFound = false;\nlet productSection = false;\nlet x=[];\n\n//Get the SUbString from DELIVERY SCHEDULE to Terms of Delivery to extract the product deliver date\nlet contentDeliveryScheduleSubString = content.text.substring(content.text.indexOf(\"DELIVERY SCHEDULE\"),content.text.indexOf(\"Terms of Delivery :\")).trim();\nlet dateSubString = contentDeliveryScheduleSubString.substring(contentDeliveryScheduleSubString.indexOf(\" 1\"));\nlet contentDeliveryScheduleSubStringArray = dateSubString.split(\"\\n\");\n\nfor(i=4;i<contentDeliveryScheduleSubStringArray.length;i+=5){\n      product_deliverDate.push(contentDeliveryScheduleSubStringArray[i].trim());\n}\n\n//Loop through the ContentSubstring and extract the po details\nfor(i=0;i<contentSubStringArray.length;i++){\n    if((contentSubStringArray[i].includes(\"Page\") || paginationFound || contentSubStringArray[i].includes(\"Specification\")) && productSection){\n      if(contentSubStringArray[i].includes(\"Specification\")){\n        paginationFound = false;\n      }else paginationFound = true;\n    }\n    else if(contentSubStringArray[i].includes(\"PO Number\")){\n      let splitPoString = contentSubStringArray[i+1].split(\":\");\n      po_number = splitPoString[1].trim();\n    }else if(contentSubStringArray[i].includes(\"PO Date\")){\n      let splitPoDateString = contentSubStringArray[i+1].split(\":\");\n      po_date = splitPoDateString[1].trim().split(\".\").reverse().join(\"-\");\n    }else if(contentSubStringArray[i].includes(\"Total PO Value\")){\n      po_value = contentSubStringArray[i+1].split(\",\").join('').trim();\n      productSection = false\n    }else if(contentSubStringArray[i].includes(\"Item code\") && !contentSubStringArray[i-3].includes(\"PURCHASE ORDER CONTINUATION\")){\n      product_code.push(contentSubStringArray[i+9]);\n      plant.push(contentSubStringArray[i+10]);\n      uom.push(contentSubStringArray[i+11]);\n      product_quantity.push(contentSubStringArray[i+12].trim());\n      rates.push(contentSubStringArray[i+13].split(\",\").join(''));\n      productSubTotal.push(contentSubStringArray[i+14].split(\",\").join(''));\n      productSection = true;\n      productFound = true;\n      i=i+14;  \n    }else if(contentSubStringArray[i].includes(\"GSTN No\") && !contentSubStringArray[i+4].includes(\"CONFIRMATION/ACKNOWLEDGEMENT\") && !contentSubStringArray[i+2].includes(\"Total PO Value\")){\n      product_code.push(contentSubStringArray[i+3]);\n      plant.push(contentSubStringArray[i+4]);\n      uom.push(contentSubStringArray[i+5]);\n      product_quantity.push(contentSubStringArray[i+6].trim());\n      rates.push(contentSubStringArray[i+7].split(\",\").join(''));\n      productSubTotal.push(contentSubStringArray[i+8].split(\",\").join(''));\n      productFound = true;\n      i=i+8;\n    }else if(productFound){ \n      if(contentSubStringArray[i].includes(\"Vendor Details:\") || contentSubStringArray[i].includes(\"HSN Code\")){\n        if(contentSubStringArray[i].includes(\"Vendor Details:\")){\n          vendorFound = true;\n        }\n        \n        productFound = false;\n        if(productName.includes(\"IN :Integrated GST\")){\n          let result = productName.substring(productName.indexOf(\"IN :Integrated GST\"));\n          let getTaxValue = result.substring(result.indexOf(\")\")+1).trim().split(\" \")[0];\n          taxValues.push(getTaxValue);\n          productName = productName.replace(result.substring(result.indexOf(\")\")+1,0),'');\n          productName = productName.replace(getTaxValue,\"\")\n        }\n        product_name.push(productName);\n        productName = \"\";\n      }else{\n        productName = productName + contentSubStringArray[i]\n      }\n    }else if(!vendorFound && contentSubStringArray[i].includes(\"Vendor Details:\")){\n      vendorFound = true;\n    }\n    else if(vendorFound){\n      if(contentSubStringArray[i].includes(\"Email ID\")){\n        vendorNameFound = true;\n        vendorFound = false;\n        let vendorNameString = vendorName.split(\"-\")\n        let extractVendorName = vendorNameString[1].includes(\"IN :Integrated\")?vendorNameString[1].substring(0,vendorNameString[1].indexOf(\"IN :Integrated\")):vendorNameString[1];\n        vendor_name.push(extractVendorName.trim());\n        vendorName = \"\";\n        \n      }else{\n        vendorName = vendorName + contentSubStringArray[i]\n      }\n    }else if(vendorNameFound){\n      if(contentSubStringArray[i].includes(\"Contact Details\")){\n        vendorNameFound = false;\n        vendorEmailFound = true;\n        let vendorEmailString = vendorEmail?vendorEmail:contentSubStringArray[i-1].split(\"-\");\n        let vendorContactString = contentSubStringArray[i].split(\"-\")\n        vendor_phone.push(vendorContactString[1]);\n        vendor_email.push(vendorEmail?vendorEmail.trim():vendorEmailString[1].trim());\n        vendorEmail = \"\";\n      }\n      else{\n        vendorEmail = vendorEmail + contentSubStringArray[i];\n      }\n    }\n    else if(contentSubStringArray[i].includes(\"IN :Integrated\")){\n       x.push(contentSubStringArray[i+1]);\n       let getTaxes = contentSubStringArray[i+1].split(\",\").join('').trim()\n       taxValues.push(getTaxes??getTaxes)\n      //taxValues.push(contentSubStringArray[i+1].includes(',')?contentSubStringArray[i+1].split(\",\").join('').trim():contentSubStringArray[i+1].trim());\n    }else if(contentSubStringArray[i].includes(\"HSN Code\")){\n      let hsnCodeString = contentSubStringArray[i].split(\":\");\n      hsn_code.push(hsnCodeString[1].trim());\n    }\n}\n\nproduct_code.forEach(function(item,index){\n  productDetails[index] = {};\n  productDetails[index].product_name =product_name[index] ;\n  productDetails[index].product_code=product_code[index];\n  productDetails[index].uom = uom[index];  \n  productDetails[index].hsn_code = hsn_code[index];\n  productDetails[index].product_quantity=product_quantity[index];\n  productDetails[index].productvalueWithTax=parseFloat(productSubTotal[index])+parseFloat(taxValues[index]);\n  //productDetails[index].description=material_description[index];\n  productDetails[index].po_deliver_date = product_deliverDate[index].split(\".\").reverse().join(\"-\");           \n})\n\nlet vendorDetails=[];\nvendor_name.forEach(function(item,index){\n  vendorDetails[index] = {};\n  vendorDetails[index].vendor_name=vendor_name[index];\n  vendorDetails[index].vendor_phone=vendor_phone[index];\n  vendorDetails[index].vendor_company=vendor_companyName[index];\n  vendorDetails[index].vendor_email=vendor_email[index];\n  vendorDetails[index].vendor_address=vendor_adress[index];\n})\nlet prodven=[];\nif(vendor_name.length>1){\n      productDetails.forEach(function(product,index){\n        prodven[index]={};\n        prodven[index].productCode = product[\"product_code\"];\n        prodven[index].email = vendor_email[index];\n        prodven[index].quantity= product[\"product_quantity\"];\n        prodven[index].product_deliverDate = product[\"po_deliver_date\"];\n        prodven[index].product_price = product[\"productvalueWithTax\"];\n      })\n}\nif(vendor_name.length>0){\n   items[0].json.order_type = \"routing\";\n\n}else items[0].json.order_type = \"rfq\";\n\nlet max =product_deliverDate[0];\n\nproduct_deliverDate.forEach(function(value,index){\n       max = new Date(value) > new Date(max)? value: max;\n      \n\n\n})\n\nitems[0].json.max_date = max.split(\".\").reverse().join(\"-\"); \n\nitems[0].json.vendor_name = vendor_name;\nitems[0].json.vendor_email = vendor_email;\nitems[0].json.productDetails = productDetails;\nitems[0].json.vendorDetails = vendorDetails;\nitems[0].json.prodven = prodven;\nitems[0].json.taxValues = taxValues;\nitems[0].json.productSubTotal = productSubTotal;\nitems[0].json.product_code = product_code;\nitems[0].json.product_name = product_name;\nitems[0].json.plant = plant;\nitems[0].json.uom = uom;\nitems[0].json.product_quantity = product_quantity;\nitems[0].json.rates = rates;\nitems[0].json.po_date = po_date; \nitems[0].json.po_number = po_number;\nitems[0].json.po_value = po_value;\nitems[0].json.contentSubStringArray = contentSubStringArray;\nitems[0].json.contentSubString = contentSubString;\n\nreturn items;"
      },
      "name": "Extracting Vedanta PO details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        820,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const pdf = require('pdf-parse');\nlet x = [];\nfunction render_page(pageData) {\n  //check documents https://mozilla.github.io/pdf.js/\n  let render_options = {\n    //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.\n    normalizeWhitespace: false,\n    //do not attempt to combine same line TextItem's. The default value is `false`.\n    disableCombineTextItems: false,\n  };\n\n  return pageData.getTextContent(render_options).then(function (textContent) {\n    let lastY,\n      text = \"\";\n    for (let item of textContent.items) {\n      x.push(item)\n      //text += `\\n${item.str}`;\n      \n    }\n    return text;\n  });\n}\n\nlet options = {\n  pagerender: render_page,\n  password : \"502000\",\n  max: 200,\n};\n\nconst binaryData = Buffer.from(items[0].binary.data.data, \"base64\");\nlet content = await pdf(binaryData, options);\n\n\nitems[0].json.x = x\nitems[0].json.text = content.text;\n\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        640,
        300
      ],
      "disabled": true
    }
  ],
  "settings": {
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [],
  "updatedAt": "2022-07-08T05:27:25.404Z"
}