{
  "active": false,
  "connections": {
    "Nextcloud": {
      "main": [
        [
          {
            "node": "Get All Sheet Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Validate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Data": {
      "main": [
        [
          {
            "node": "Update Error Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cloud Files": {
      "main": [
        [
          {
            "node": "Combine Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Data in PO Files": {
      "main": [
        [
          {
            "node": "Nextcloud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Items": {
      "main": [
        [
          {
            "node": "Create Data in PO Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global": {
      "main": [
        [
          {
            "node": "Get Cloud Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Global",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Sheet Name": {
      "main": [
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-01-02T09:52:03.823Z",
  "id": "252",
  "name": "Vedanta (File) : Excel Validation",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        360,
        340
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Test/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        360,
        540
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "binaryPropertyName": "=data",
        "options": {
          "sheetName": "={{$node[\"Get All Sheet Name\"].json[\"name\"]}}"
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        720,
        540
      ]
    },
    {
      "parameters": {
        "functionCode": "let formatedData=[];\nlet poItems=[];\nlet errorData=[];\n\nconst poColumns = {\n  \"deliveryDate\":[\"Delivery Date\"],\n  \"orderType\":[\"Order type\"],\n  \"poNumber\":[\"PO Number\"],\n  \"poDate\":[\"PO Date\"],\n  \"srNo\":[\"Sr no.\"],\n  \"materialCode\":[\"Material Code\"],\n  \"vendorName\":[\"Vendor Name\"],\n  \"vendorCode\":[\"Vendor code\"],\n  \"vendorEmail\":[\"Vendor email\"],\n  \"vendorContact\":[\"Vendor contact\"],\n  \"hsn\":[\"HSN/SAC\"],\n  \"uom\":[\"UOM\"],\n  \"plant\":[\"Plant\"],\n  \"gst\":[\"GST Identification Number (GSTIN)\"],\n  \"itemPrice\":[\"Item Price\"],\n  \"itemDescription\":[\"Item Desc\"],\n  \"qtyOrdered\":[\"Qty ordered\"],\n  \"excludingGst\":[\"Value (Excluding GST)\"],\n  \"itemTaxPercentage\":[\"Item Tax %\"],\n  \"itemTaxAmount\":[\"Item Tax Amount\"],  \n  \"totalValue\":[\"Total value\"],  \n  \"paymentTerms\":[\"Payment Terms Label\"],\n  \"deliverToCustomer\":[\"Deliver To Customer\"],\n  \"longDescription\":[\"Long Description\"]\n};\n\nitems.forEach((item, index) => { \n  let formatedObject={};\n  let entries = Object.entries(item.json)\n  entries.map( ([key, val] = entry) => {\n    if(key.includes(poColumns.deliveryDate)){\n      formatedObject.deliveryDate=val;\n    }\n    if(key.includes(poColumns.orderType)){\n      formatedObject.orderType=val.toString();\n    }\n    if(key.includes(poColumns.poNumber)){\n      formatedObject.poNumber=val.toString();\n    }\n    if(key.includes(poColumns.poDate)){\n      formatedObject.poDate=val.toString();\n    }\n    if(key.includes(poColumns.srNo)){\n      formatedObject.srNo=val.toString();\n    }\n    if(key.includes(poColumns.materialCode)){\n      formatedObject.materialCode=val.toString();\n    }\n    if(key.includes(poColumns.vendorName)){\n      formatedObject.vendorName=val.toString();\n    }\n    if(key.includes(poColumns.vendorCode)){\n      formatedObject.vendorCode=val.toString();\n    }\n    if(key.includes(poColumns.vendorEmail)){\n      formatedObject.vendorEmail=val.toString();\n    }\n    if(key.includes(poColumns.vendorContact)){\n      formatedObject.vendorContact=val.toString();\n    }\n    if(key.includes(poColumns.hsn)){\n      formatedObject.hsn=val.toString();\n    }\n    if(key.includes(poColumns.uom)){\n      formatedObject.uom=val.toString();\n    }\n    if(key.includes(poColumns.plant)){\n      formatedObject.plant=val.toString();\n    }\n    if(key.includes(poColumns.gst)){\n      formatedObject.gst=val.toString();\n    }\n    if(key.includes(poColumns.itemPrice)){\n      formatedObject.itemPrice=val.toString();\n    }\n    if(key.includes(poColumns.itemDescription)){\n      formatedObject.itemDescription=val.toString();\n    }\n    if(key.includes(poColumns.qtyOrdered)){\n      formatedObject.qtyOrdered=val.toString();\n    }\n    if(key.includes(poColumns.excludingGst)){\n      formatedObject.excludingGst=val.toString();\n    }\n    if(key.includes(poColumns.itemTaxPercentage)){\n      formatedObject.itemTaxPercentage=val.toString();\n    }\n    if(key.includes(poColumns.itemTaxAmount)){\n      formatedObject.itemTaxAmount=val.toString();\n    }\n    if(key.includes(poColumns.totalValue)){\n      formatedObject.totalValue=val.toString();\n    }\n    if(key.includes(poColumns.paymentTerms)){\n      formatedObject.paymentTerms=val.toString();\n    }\n    if(key.includes(poColumns.deliverToCustomer)){\n      formatedObject.deliverToCustomer=val.toString();\n    }\n    if(key.includes(poColumns.longDescription)){\n      formatedObject.longDescription=val.toString();\n    }\n  });  \n  formatedData.push(formatedObject);\n});\n\nformatedData.forEach((item, index) => { \n  let errorMsgPO=\"\";\n  let rowCount=0;\n\n  let entries = Object.entries(item)\n  entries.map( ([key, val] = entry) => {\n    \n    if(key.includes(poColumns.deliveryDate) && !val){\n      errorMsgPO = errorMsgPO + \" Delivery Date required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.orderType) && !val && !(val==\"\" || val==\"\")){\n      errorMsgPO = errorMsgPO + \" Order Type required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.poNumber) && !val){\n      errorMsgPO = errorMsgPO + \" PO Number required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.poDate) && !val){\n      errorMsgPO = errorMsgPO + \" PO Date required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.srNo) && !val){\n      errorMsgPO = errorMsgPO + \" SR NO required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.materialCode) && !val & val.length < 10){\n      errorMsgPO = errorMsgPO + \" Material Code required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.vendorName) && !val){\n      errorMsgPO = errorMsgPO + \" Vendor Name required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.vendorCode) && !val){\n      errorMsgPO = errorMsgPO + \" Vendor Code required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.vendorEmail) && !val){\n      errorMsgPO = errorMsgPO + \" Vendor Email required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.vendorContact) && !val){\n      errorMsgPO = errorMsgPO + \" Vendor Contact required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.hsn) && !val){\n      errorMsgPO = errorMsgPO + \" HSN required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.uom) && !val){\n      errorMsgPO = errorMsgPO + \" UOM required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.plant) && !val){\n      errorMsgPO = errorMsgPO + \" Plant required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.gst) && !val){\n      errorMsgPO = errorMsgPO + \" GST required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.itemPrice) && !val){\n      errorMsgPO = errorMsgPO + \" Item Price required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.itemDescription) && !val){\n      errorMsgPO = errorMsgPO + \" Item Description required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.qtyOrdered) && !val){\n      errorMsgPO = errorMsgPO + \" QTY Ordered required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.excludingGst) && !val){\n      errorMsgPO = errorMsgPO + \" Excluding GST required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.itemTaxPercentage) && !val){\n      errorMsgPO = errorMsgPO + \"Item Tax Percentage required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.itemTaxAmount) && !val){\n      errorMsgPO = errorMsgPO + \" Item Tax Amount required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.totalValue) && !val){\n      errorMsgPO = errorMsgPO + \" Total Value required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.paymentTerms) && !val){\n      errorMsgPO = errorMsgPO + \" Payment Terms required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.deliverToCustomer) && !val){\n      errorMsgPO = errorMsgPO + \" Delivery To Customer required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.longDescription) && !val){\n      errorMsgPO = errorMsgPO + \" Long Description required \" + val + \", \" ;    \n    }     \n\n  });\n    \n\n  let errorindex = errorData.findIndex( element => {\n      if (element[\"po\"] === item.poNumber.toString().trim()) {\n        return true;\n      }\n  });\n  \n  if(errorindex==-1){\n    poItems=[];\n    poItems.push(item);\n    errorData.push({\"po\":item.poNumber.toString().trim(),\"error\":errorMsgPO,\"rowCount\":1,\"poItems\":poItems});\n  }\n  else{\n     errorData[errorindex][\"error\"]=errorData[errorindex][\"error\"]+errorMsgPO;\n     errorData[errorindex][\"rowCount\"]=errorData[errorindex][\"rowCount\"]+1;\n     poItems.push(item);\n     errorData[errorindex][\"poItems\"]=poItems;\n  }\n  \n});\n\nreturn errorData;"
      },
      "name": "Validate Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        540
      ]
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "path": "Test/"
      },
      "name": "Get Cloud Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        720,
        340
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Global\"].json[\"vedanta_mozart_url\"]}}items/cloud_po_files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Combine Items\"].json[\"poData\"]}}"
      },
      "name": "Create Data in PO Files",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1080,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "28",
          "name": "Vedanta DMS PROD Credentials"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "// return items;\nlet poFiles=[];\nlet excelFiles=[];\nitems.forEach((item) => {\n    const fullPath = item.json[\"path\"].split(\"/\");\n    const fileName = fullPath[fullPath.length - 1]\n    poFiles.push({\"file_name\":decodeURI(fileName),\"file_size\":item.json[\"contentLength\"]});\n    if(decodeURI(fileName).includes(\".xlsx\")){\n        excelFiles.push({\"file_name\":decodeURI(fileName)});\n    }\n});\n\nreturn [{\n     json: {\n         poData: poFiles,\n         excelData:excelFiles\n    }\n}];"
      },
      "name": "Combine Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        340
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "vedanta_mozart_url",
              "value": "https://vedanta.mozart.shakedeal.com/"
            }
          ]
        },
        "options": {}
      },
      "name": "Global",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        540,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "=https://vedanta.mozart.shakedeal.com/items/PO_Upload/{{$node[\"Validate Data\"].json[\"po\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "error",
              "value": "={{$node[\"Validate Data\"].json[\"error\"]}}"
            },
            {
              "name": "total_rows",
              "value": "={{$node[\"Validate Data\"].json[\"rowCount\"]}}"
            }
          ]
        }
      },
      "name": "Update Error Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1080,
        540
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "28",
          "name": "Vedanta DMS PROD Credentials"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "let binaries = {};\nconst { read: xlsxRead } = require('xlsx'); \nconst data = items[0].binary.data; \nworkbook = xlsxRead(data.data); \nbinaries[\"data\"] = data;\nreturn workbook.SheetNames.map((s) => { return { json: { name: s, } ,binary : binaries} });"
      },
      "name": "Get All Sheet Name",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        540,
        540
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-01-03T10:22:26.563Z"
}