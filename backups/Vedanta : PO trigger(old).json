{
  "active": false,
  "connections": {
    "Get Buyer Details": {
      "main": [
        [
          {
            "node": "Get shakedeal POC",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get shakedeal POC": {
      "main": [
        [
          {
            "node": "Creating user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get the index of attachment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for PO": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Buyer Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post product details": {
      "main": [
        [
          {
            "node": "Checking the order_type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post vendor details": {
      "main": [
        [
          {
            "node": "Get buyer on category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get vendor Details": {
      "main": [
        [
          {
            "node": "Creating new vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post buyer details": {
      "main": [
        [
          {
            "node": "construct for user_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get product details": {
      "main": [
        [
          {
            "node": "Return categories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post the po_details": {
      "main": [
        [
          {
            "node": "Constructing Vendor PO Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "constructing po_details": {
      "main": [
        [
          {
            "node": "post the po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "construct for user_details": {
      "main": [
        [
          {
            "node": "Post to the user_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to the user_details": {
      "main": [
        [
          {
            "node": "Checking condition  whether user exists ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get user_id": {
      "main": [
        [
          {
            "node": "get product details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conditon for  checking whether user exists or create new user": {
      "main": [
        [
          {
            "node": "post buyer details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Checking condition  whether user exists ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post the products ": {
      "main": [
        [
          {
            "node": "post product details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Checking the order_type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post the vendors ": {
      "main": [
        [
          {
            "node": "post vendor details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get buyer on category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition  whether user exists ": {
      "main": [
        [
          {
            "node": "Get user_id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get product details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Creating user": {
      "main": [
        [
          {
            "node": "Conditon for  checking whether user exists or create new user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new product": {
      "main": [
        [
          {
            "node": "Checking condition whether to post the products ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Creating new vendor": {
      "main": [
        [
          {
            "node": "Checking condition whether to post the vendors ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SA is informed that PO is generated": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking the order_type": {
      "main": [
        [
          {
            "node": "Get vendor Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get product_ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get product_ids": {
      "main": [
        [
          {
            "node": "Get the product_vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the product_vendor": {
      "main": [
        [
          {
            "node": "Create new product_vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new product_vendor": {
      "main": [
        [
          {
            "node": "Checking condition whether to post product_vendor ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post product_vendor ": {
      "main": [
        [
          {
            "node": "Post the product_vendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "constructing for PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post the product_vendor": {
      "main": [
        [
          {
            "node": "constructing for PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "constructing for PO": {
      "main": [
        [
          {
            "node": "Post the PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post the PO": {
      "main": [
        [
          {
            "node": "SA is informed that PO is generated1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting PO details": {
      "main": [
        [
          {
            "node": "Check for PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Constructing Vendor PO Details": {
      "main": [
        [
          {
            "node": "post the vendor po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post the vendor po_details": {
      "main": [
        [
          {
            "node": "Function to create obj for updating the vendor po in po items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get po details": {
      "main": [
        [
          {
            "node": "Get the PO Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting Vedanta PO details": {
      "main": [
        [
          {
            "node": "Extracting PO details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create obj for updating the vendor po in po items": {
      "main": [
        [
          {
            "node": "Update the vendor po in po items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the vendor po in po items": {
      "main": [
        [
          {
            "node": "SA is informed that PO is generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get buyer on category": {
      "main": [
        [
          {
            "node": "constructing po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the PO Data": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return categories": {
      "main": [
        [
          {
            "node": "Get the categories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the categories": {
      "main": [
        [
          {
            "node": "Return new categories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return new categories": {
      "main": [
        [
          {
            "node": "Condition for new categories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for new categories": {
      "main": [
        [
          {
            "node": "Create categories",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Create new product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create categories": {
      "main": [
        [
          {
            "node": "Create new product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for PO Email": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the index of attachment": {
      "main": [
        [
          {
            "node": "Get po details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Extracting Vedanta PO details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-04-05T06:40:33.219Z",
  "id": "281",
  "name": "Vedanta : PO trigger(old)",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -280,
        -80
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/users?filter={ \"email\": { \"_eq\": \"{{$node[\"Extracting PO details\"].json[\"buyer_email\"]}}\" }}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get Buyer Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        20,
        680
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/users?filter={\"email\":{\"_eq\":\"{{$node[\"Globals\"].json[\"po_poc_email\"]}}\"}}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get shakedeal POC",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        220,
        680
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "dms_url",
              "value": "={{$node[\"Wait for PO Email\"].json[\"body\"][\"env\"]==\"prod\"?\"https://vedanta.mozart.shakedeal.com\":\"https://sdqa.mozart.shakedeal.com\"}}"
            },
            {
              "name": "sales_agent_email",
              "value": "=sairam.reddy@shakedeal.com"
            },
            {
              "name": "workflow_from_email",
              "value": "=ShakeDeal Mozart <sdmozart@shakedeal.com>"
            },
            {
              "name": "po_issuer_role",
              "value": "={{$node[\"Wait for PO Email\"].json[\"body\"][\"env\"]==\"prod\"?\"5ccdb06f-07c4-4ab5-b55a-a820d4f9f51f\":\"445e4cf8-1023-4538-a60e-706c2a72fb94\"}}"
            },
            {
              "name": "po_poc_email",
              "value": "=madhu.mr@shakedeal.com"
            },
            {
              "name": "token",
              "value": "={{$node[\"Wait for PO Email\"].json[\"body\"][\"env\"]==\"prod\"?\"FcsMdcm7d6Whb-y8ATeBmN40tyzzBpyv\":\"FcsMdcm7d6Whb-y8ATeBmN40tyzzBpyv\"}}"
            },
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "vendor_po_num_prefix",
              "value": "=SD"
            }
          ],
          "number": [
            {
              "name": "commision_percentage",
              "value": "={{2}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        240,
        -120
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_pos?filter={\"id\":{\"_eq\":\"{{$node[\"Extracting PO details\"].json[\"po_num\"]}}\"}}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Check for PO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1580,
        -120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for PO\"].json[\"data\"].length}}",
              "operation": "notEqual"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1800,
        -140
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{$node[\"Globals\"].json[\"workflow_from_email\"]}}",
        "toEmail": "={{$node[\"Globals\"].json[\"sales_agent_email\"]}}",
        "subject": "=Balco :This PO already exits with PO number: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}",
        "html": "=<!DoCtYPe html><html lang=\"en\"><head><style id=\"stndz-\nstyle\"></style>\n<meta http-equiv=\"Content-Type\" content=\"text\n/html; charset=UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,\ninitial-scale=1, shrink-to-fit=no\">\n<meta name=\"description\" content=\"\">\n<meta name=\"author\" content=\"Mark Otto, Jacob\nThornton, and Bootstrap contributors\">\n<meta name=\"generator\" content=\"\nAcelleSystemLayouts\">\n<!-- Bootstrap core CSS -->\n<link href=\"https://marketing.shakedeal.com/assets\n/templates/60584da7bdf65/css/bootstrap.min.css\" rel=\"\nstylesheet\">\n<script id=\"spHTMLFormElementPrototypeScript\">\n(function()\n{\ntry\n{\nvar sp_old_HTMLFormElementPrototype_submit =\nHTMLFormElement.prototype.submit;\nHTMLFormElement.prototype.submit = function\n(AEvent)\n{\ntry\n{\nvar spEvent = document.createEvent('Event');\nspEvent.initEvent('sp_submit', true, true);\nthis.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from HTMLFormElement.\nprototype.submit: ' + ErrorMessage);\n}\nsp_old_HTMLFormElementPrototype_submit.apply\n(this);\n};\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to HTMLFormElement.prototype.submit: ' +\nErrorMessage);\n}\ntry\n{\nif (typeof __doPostBack == 'function')\n{\nvar sp_old__doPostBack = __doPostBack;\n__doPostBack = function(eventTarget,\neventArgument)\n{\ntry\n{\nvar spEvent = document.createEvent\n('Event');\nspEvent.initEvent('sp_submit', true, true);\nwindow.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from __doPostBack(): '\n+ ErrorMessage);\n}\nsp_old__doPostBack(eventTarget,\neventArgument);\n};\n}\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to __doPostBack(): ' + ErrorMessage);\n}\n})();</script><link href=\"https://fonts.googleapis.\ncom/icon?family=Material+Icons\" rel=\"stylesheet\"><link\nhref=\"https://fonts.googleapis.com/icon?\nfamily=Material+Icons+Outlined\" rel=\"stylesheet\"></head>\n\n<body data-new-gr-c-s-check-loaded=\"14.990.0\" data-\ngr-ext-installed=\"\">\n<main role=\"main\">\n<div class=\"py-5 bg-light\">\n<div class=\"container\">\n<h1 class=\"my-4 display-4 text-center\">This PO already exits with PO number:{{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}</h1>\n<div><img class=\"my-2\" src=\"\" width=\"100%\" /></div>\n</div>\n</div>\n</main><footer class=\"text-muted py-5\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p class=\"mb-1\">Copyright &copy; OpCommerce Online PVT\nLTD, All rights reserved.</p>\n<p class=\"mb-0\">Please email us on <a href=\"\nsupport@shakedeal.com\">support@shakedeal.com</a> in\ncase of any queries.\n</div>\n<div class=\"col-md-4\">\n<p class=\"float-right\"><a href=\"#\">Back to top</a></p>\n</div>\n</div>\n</div>\n</footer>\n</body></html>",
        "options": {}
      },
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2080,
        -320
      ],
      "credentials": {
        "smtp": {
          "id": "7",
          "name": "AWS SES Creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_products",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Create new product\"].json[\"postProducts\"]}}"
      },
      "name": "post product details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        380,
        1040
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_vendors",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Creating new vendor\"].json[\"postVendors\"]}}"
      },
      "name": "post vendor details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1340,
        1040
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_vendors?filter={ \"id\": { \"_in\": \"{{$node[\"Extracting PO details\"].json[\"vendor_email\"]}}\" }}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get vendor Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        740,
        1100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/users",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Creating user\"].json[\"user\"]}}"
      },
      "name": "post buyer details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        840,
        460
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_products?filter={ \"id\": { \"_in\": \"{{$node[\"Extracting PO details\"].json[\"product_code\"]}}\" }}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "get product details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2080,
        680
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_pos",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json[\"po_details\"]}}"
      },
      "name": "post the po_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1960,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let data = items[0].json.data;\nlet po_file = $node[\"Wait for PO Email\"].json[\"body\"][\"file_id\"];\nlet po_num = $node[\"Extracting Vedanta PO details\"].json[\"po_number\"];\nlet po_value= $node[\"Extracting Vedanta PO details\"].json[\"po_value\"];\nlet po_status =$node[\"Extracting Vedanta PO details\"].json[\"po_status\"];\nlet po_date =$node[\"Extracting Vedanta PO details\"].json[\"po_date\"];\nlet po_type = $node[\"Extracting Vedanta PO details\"].json[\"po_type\"].toLowerCase().trim();\nlet issuer_id= $node[\"Creating user\"].json[\"action\"]===\"user exists\"?Array.isArray($node[\"Get user_id\"].json.data)?$node[\"Get user_id\"].json.data[0][\"id\"]:$node[\"Get user_id\"].json.data[\"id\"]:Array.isArray($node[\"Post to the user_details\"].json.data)?$node[\"Post to the user_details\"].json.data[0][\"id\"]:$node[\"Post to the user_details\"].json.data[\"id\"];\nlet po_deliver_date = $node[\"Extracting PO details\"].json[\"max_date\"];\nlet client = $node[\"Globals\"].json[\"client\"];\nlet products = $node[\"Create new product\"].json.action == \"post the products\"?[...$node[\"post product details\"].json.data,...$node[\"get product details\"].json.data]:$node[\"get product details\"].json.data;\nlet vendors = $node[\"Creating new vendor\"].json.action == \"post the vendors\"?[...$node[\"post vendor details\"].json.data,...$node[\"Get vendor Details\"].json.data]:$node[\"Get vendor Details\"].json.data;\nlet prod_ven = $node[\"Extracting PO details\"].json[\"prodven\"]\n\nlet po_products = $node[\"Extracting PO details\"].json[\"products\"];\n\nlet shakedeal_poc_id = $node[\"Get shakedeal POC\"].json.data[0].id;\n\nlet category_buyer_data = $node[\"Get buyer on category\"].json[\"data\"];\nlet negligible_plants = $node[\"Get the index of attachment\"].json[\"negligible_plants\"];\n\nlet product_vendor = [];\n\n\nprod_ven.forEach(function(obj,index){\n   product_vendor[index] ={};\n   product_vendor[index].id=po_num+\"-\"+(index+1);\n   product_vendor[index].product = obj.productCode;\n   product_vendor[index].vendor = obj.email;\n   product_vendor[index].requested_qty =  obj[\"quantity\"];\n   product_vendor[index].delivery_date = new Date(obj[\"product_deliverDate\"]).toISOString();\n   product_vendor[index].gross_price = obj[\"product_price\"];\n   product_vendor[index].net_price = obj[\"rate\"]*obj[\"quantity\"];\n   product_vendor[index].uom = obj[\"uom\"];\n   product_vendor[index].plant = obj[\"plant\"];\n   product_vendor[index].unit_price = parseFloat(obj[\"rate\"]);\n   product_vendor[index].tax_percentage = parseFloat(obj[\"tax\"]);\n   product_vendor[index].hsn = obj[\"hsn\"];\n   let getBuyer = negligible_plants.includes(obj.plant)?category_buyer_data.filter(cbd=>cbd.id == obj.plant):category_buyer_data.filter(cbd=>cbd.id == obj.mc)\n   product_vendor[index].buyer = getBuyer[0].buyer;\n   product_vendor[index].operation_agent = getBuyer[0].operation_agent\n})\n\n\n\nlet net_po_value = product_vendor.reduce((total,obj)=>(parseFloat(obj.unit_price )*parseFloat(obj.requested_qty))+total, 0);\n\nlet po_details=[];\npo_details[0]={};\npo_details[0].po_file=po_file;\npo_details[0].id=po_num;\npo_details[0].po_value=parseFloat(po_value);\npo_details[0].net_po_value= net_po_value\npo_details[0].po_status=po_status;\npo_details[0].po_date=new Date(po_date).toISOString();\npo_details[0].po_type = client == \"vedanta\"?po_type:\"routing\";\npo_details[0].issuer_name=issuer_id;\npo_details[0].shakedeal_poc_details = shakedeal_poc_id; \n//po_details[0].product_ids=product_ids;\npo_details[0].po_deliver_date =new Date(po_deliver_date).toISOString(); \npo_details[0].po_items= product_vendor; \n\n\nitems[0].json.po_date = po_date; \nitems[0].json.po_products = po_products; \nitems[0].json.po_details = po_details;\nreturn items\n\n"
      },
      "name": "constructing po_details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1720,
        1140
      ]
    },
    {
      "parameters": {
        "functionCode": "let id =  Array.isArray($node[\"post buyer details\"].json.data)?$node[\"post buyer details\"].json.data[0][\"id\"]:$node[\"post buyer details\"].json.data[\"id\"]\nlet user_phone = $node[\"Extracting PO details\"].json[\"buyer_contact\"];\nlet user_details = []\nuser_details[0] = {};\nuser_details[0].user = id \nuser_details[0].phone_number = user_phone \nitems[0].json.user_details = user_details\nreturn items;"
      },
      "name": "construct for user_details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1040,
        460
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_user_details",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json[\"user_details\"]}}"
      },
      "name": "Post to the user_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1240,
        460
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_user_details?filter={\"user\":{\"_eq\":\"{{$node[\"Get Buyer Details\"].json.data[0][\"id\"]}}\"}}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get user_id",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1740,
        460
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "create user"
            }
          ]
        }
      },
      "name": "Conditon for  checking whether user exists or create new user",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        620,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "post the products"
            }
          ]
        }
      },
      "name": "Checking condition whether to post the products ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        240,
        1200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "post the vendors"
            }
          ]
        }
      },
      "name": "Checking condition whether to post the vendors ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1100,
        1100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Creating user\"].json[\"action\"]}}",
              "value2": "user exists"
            }
          ]
        }
      },
      "name": "Checking condition  whether user exists ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1460,
        680
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet action=\"\"\nlet email = $node[\"Extracting PO details\"].json[\"buyer_email\"]\n\nlet shakedeal_poc_id = $node[\"Get shakedeal POC\"].json.data[0].id\nlet po_role = $node[\"Globals\"].json[\"po_issuer_role\"]\n\nitems[0].json.buyerEmail=email\n\nlet data = $node[\"Get Buyer Details\"].json.data\n\n\nitems[0].json.length = data.length\nif(data.length>0){\n   action=\"user exists\"\n}else action = \"create user\"\n\nlet user_name = $node[\"Extracting PO details\"].json[\"buyer_name\"]\nlet user_email = $node[\"Extracting PO details\"].json[\"buyer_email\"]\nlet user_phone = $node[\"Extracting PO details\"].json[\"buyer_contact\"]\nlet password= user_name+\"@2021\"\n\nlet user_details = []\nuser_details[0]={}\nlet user = [];\nuser[0]={};\nuser[0].first_name = user_name;\nuser[0].email = user_email;\nuser_details[0].phone = user_phone \nuser[0].password = password\nuser[0].role = po_role \nuser_details[0].user = user \n\nitems[0].json.user = user\nitems[0].json.user_details = user_details \n\nitems[0].json.action =action\nreturn items;"
      },
      "name": "Creating user",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        680
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet action = \"\"\nlet negligible_plants = $node[\"Get the index of attachment\"].json[\"negligible_plants\"]\nlet product_name = $node[\"Extracting PO details\"].json[\"product_name\"]\nlet product_code = $node[\"Extracting PO details\"].json[\"product_code\"]\nlet products = $node[\"Extracting PO details\"].json[\"products\"]\nlet plantcategory_ids= []\n\nlet data = $node[\"get product details\"].json[\"data\"]\n\n\n\n\n\nlet resultFilter = \n   products.filter(product=>\n     !data.some(\n      data=> data.id === product.id \n    )\n  );\n\nlet uniqueResultArray = [\n    ...new Map(resultFilter.map((item) => [item[\"id\"], item])).values(),\n];\n\nitems[0].json.length= uniqueResultArray .length\nif(uniqueResultArray .length>0){\n   action=\"post the products\"\n\n}else action = \"no products to post\"\n\nproducts.forEach(function(product,index){\n  negligible_plants.includes(product.plant)?plantcategory_ids.push(product.plant):plantcategory_ids.push(product.mc)\n})\n\nitems[0].json.plantcategory_ids = plantcategory_ids;\nitems[0].json.postProducts=uniqueResultArray;\nitems[0].json.products=products;\n\n\n\nitems[0].json.action = action;\n\n\n\nreturn items;"
      },
      "name": "Create new product",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        20,
        1180
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet email = $node[\"Extracting PO details\"].json[\"vendor_email\"]\n\nlet vendors = $node[\"Extracting PO details\"].json[\"vendors\"]\n\nitems[0].json.vendorEmail=email\n\nlet data = items[0].json.data\n\nlet resultFilter = \n   vendors.filter(vendors=>\n     !data.some(\n      data=> data.id=== vendors.id\n    )\n  );\n\n\nlet uniqueResultFilterArray = [\n    ...new Map(resultFilter.map((item) => [item[\"id\"], item])).values(),\n];\nitems[0].json.length= uniqueResultFilterArray .length\nif(uniqueResultFilterArray .length>0){\n   action=\"post the vendors\"\n\n}else action = \"no vendors to post\"\n\nitems[0].json.postVendors=uniqueResultFilterArray \nitems[0].json.vendors =vendors \n\n\n\nitems[0].json.action = action\n\n\n\nreturn items;\n"
      },
      "name": "Creating new vendor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        920,
        1100
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{$node[\"Globals\"].json[\"workflow_from_email\"]}}",
        "toEmail": "={{$node[\"Globals\"].json[\"sales_agent_email\"]}}",
        "subject": "=Vedanta: A new PO is received with PO number: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}",
        "html": "=<!DoCtYPe html><html lang=\"en\"><head><style id=\"stndz-\nstyle\"></style>\n<meta http-equiv=\"Content-Type\" content=\"text\n/html; charset=UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,\ninitial-scale=1, shrink-to-fit=no\">\n<meta name=\"description\" content=\"\">\n<meta name=\"author\" content=\"Mark Otto, Jacob\nThornton, and Bootstrap contributors\">\n<meta name=\"generator\" content=\"\nAcelleSystemLayouts\">\n<!-- Bootstrap core CSS -->\n<link href=\"https://marketing.shakedeal.com/assets\n/templates/60584da7bdf65/css/bootstrap.min.css\" rel=\"\nstylesheet\">\n<script id=\"spHTMLFormElementPrototypeScript\">\n(function()\n{\ntry\n{\nvar sp_old_HTMLFormElementPrototype_submit =\nHTMLFormElement.prototype.submit;\nHTMLFormElement.prototype.submit = function\n(AEvent)\n{\ntry\n{\nvar spEvent = document.createEvent('Event');\nspEvent.initEvent('sp_submit', true, true);\nthis.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from HTMLFormElement.\nprototype.submit: ' + ErrorMessage);\n}\nsp_old_HTMLFormElementPrototype_submit.apply\n(this);\n};\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to HTMLFormElement.prototype.submit: ' +\nErrorMessage);\n}\ntry\n{\nif (typeof __doPostBack == 'function')\n{\nvar sp_old__doPostBack = __doPostBack;\n__doPostBack = function(eventTarget,\neventArgument)\n{\ntry\n{\nvar spEvent = document.createEvent\n('Event');\nspEvent.initEvent('sp_submit', true, true);\nwindow.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from __doPostBack(): '\n+ ErrorMessage);\n}\nsp_old__doPostBack(eventTarget,\neventArgument);\n};\n}\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to __doPostBack(): ' + ErrorMessage);\n}\n})();</script><link href=\"https://fonts.googleapis.\ncom/icon?family=Material+Icons\" rel=\"stylesheet\"><link\nhref=\"https://fonts.googleapis.com/icon?\nfamily=Material+Icons+Outlined\" rel=\"stylesheet\"></head>\n\n<body data-new-gr-c-s-check-loaded=\"14.990.0\" data-\ngr-ext-installed=\"\">\n<main role=\"main\">\n<div class=\"py-5 bg-light\">\n<div class=\"container\">\n<h1 class=\"my-4 display-4 text-center\">A new PO is received with PO number:{{$node[\"Extracting balco PO details\"].json[\"po_number\"]}} and po_type : Routing</h1>\n<p class=\"lead text-center\">Please create a SDStore order against this PO: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}.</p>\n<div><img class=\"my-2\" src=\"\" width=\"100%\" /></div>\n</div>\n</div>\n</main><footer class=\"text-muted py-5\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p class=\"mb-1\">Copyright &copy; OpCommerce Online PVT\nLTD, All rights reserved.</p>\n<p class=\"mb-0\">Please email us on <a href=\"\nsupport@shakedeal.com\">support@shakedeal.com</a> in\ncase of any queries.\n</div>\n<div class=\"col-md-4\">\n<p class=\"float-right\"><a href=\"#\">Back to top</a></p>\n</div>\n</div>\n</div>\n</footer>\n</body></html>",
        "options": {}
      },
      "name": "SA is informed that PO is generated",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        3140,
        1140
      ],
      "executeOnce": true,
      "credentials": {
        "smtp": {
          "id": "7",
          "name": "AWS SES Creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Extracting PO details\"].json[\"order_type\"]}}",
              "value2": "routing"
            }
          ]
        }
      },
      "name": "Checking the order_type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        520,
        1180
      ]
    },
    {
      "parameters": {
        "functionCode": "let productAction = $node[\"Create new product\"].json[\"action\"];\nlet existingProductData = $node[\"get product details\"].json.data;\n\n\nif(productAction === \"post the products\"){\n   let postedProductData = $node[\"post product details\"].json.data;\n   items[0].json.postedProductData = postedProductData; \n\n}\n\nif(productAction === \"post the products\"){\n   if(existingProductData.length>0){\n      let concatedProducts = existingProductData.concat(items[0].json.postedProductData);\n      items[0].json.concatedProducts = concatedProducts;\n   }else items[0].json.concatedProducts = items[0].json.postedProductData;\n}else items[0].json.concatedProducts = existingProductData; \n\n\nlet products = items[0].json.concatedProducts;\n\nlet product_ids = [];\nlet vendor_ids = [];\nlet product_code=[];\n\nif(products.length>0){\n     items[0].json.concatedProducts.forEach(function(obj,index){\n         if(!product_code.includes(obj[\"product_code\"])){\n            product_code.push(obj[\"product_code\"]);\n            product_ids.push(obj[\"id\"]);\n            vendor_ids.push(null);\n         }\n    })\n}else product_ids.push(products[\"id\"]);\n\n\nitems[0].json.product_ids = product_ids; \nitems[0].json.vendor_ids = vendor_ids; \nitems[0].json.existingProductData = existingProductData; \n\n\nreturn items\n"
      },
      "name": "Get product_ids",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        480,
        1700
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_mozart_vendor_product_mapping?filter={\"_and\": [{\"product\": {\"_in\":\"{{$node[\"Get product_ids\"].json[\"product_ids\"]}}\"}},{\"vendor\": {\"_null\":null}}]}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get the product_vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        680,
        1700
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let products = $node[\"Get product_ids\"].json[\"concatedProducts\"];\nlet product_ids = $node[\"Get product_ids\"].json[\"product_ids\"]\nlet existing_product_vendor = $node[\"Get the product_vendor\"].json.data\n\nlet resultFilter  = product_ids.filter(products=>!existing_product_vendor.some(existing_product_vendor=>existing_product_vendor.product === products))\n\nitems[0].json.resultFilter  = resultFilter  \npost_product_vendor=[];\nresultFilter.forEach(function(value,index){\n       post_product_vendor[index] = {}\n       post_product_vendor[index].product = value\n\n})\n\n\nitems[0].json.post_product_vendor = post_product_vendor;\nif(resultFilter.length>0){\n   items[0].json.action = \"post the product_vendor\";\n   \n}else items[0].json.action = \"dont post the product_vendor\"\n\nitems[0].json.existing_product_vendor = existing_product_vendor \n\nitems[0].json.products = products \n\n\nreturn items;\n"
      },
      "name": "Create new product_vendor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        1700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Create new product_vendor\"].json[\"action\"]}}",
              "value2": "post the product_vendor"
            }
          ]
        }
      },
      "name": "Checking condition whether to post product_vendor ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1080,
        1700
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_mozart_vendor_product_mapping",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Create new product_vendor\"].json[\"post_product_vendor\"]}}"
      },
      "name": "Post the product_vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1280,
        1600
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let po_file = $node[\"Merging the globals and file Id\"].json[\"data\"][\"id\"];\nlet po_num = $node[\"Merging the globals and file Id\"].json[\"po_num\"];\nlet po_value= $node[\"Merging the globals and file Id\"].json[\"po_value\"];\nlet po_status =$node[\"Merging the globals and file Id\"].json[\"po_status\"];\nlet po_date =$node[\"Merging the globals and file Id\"].json[\"po_date\"];\n//let po_type= $node[\"Merging the globals and file Id\"].json[\"po_type\"];\nlet issuer_id= $node[\"Creating user\"].json[\"action\"]===\"user exists\"?$node[\"Get user_id\"].json.data[0][\"id\"]:$node[\"Post to the user_details\"].json.data[\"id\"];\nlet po_deliver_date = $node[\"Extracting PO details\"].json[\"max_date\"];\nlet req_quantity = $node[\"Extracting PO details\"].json[\"product_quantity\"];\nlet product_deliverDate = $node[\"Extracting PO details\"].json[\"po_deliverDate\"];\nlet product_price = $node[\"Extracting PO details\"].json[\"productvalueWithTax\"];\nlet productAction =  $node[\"Create new product\"].json[\"action\"];\nlet po_products = $node[\"Extracting PO details\"].json[\"products\"];\nlet existingProductData = $node[\"get product details\"].json.data;\nlet shakedeal_poc_id = $node[\"Get shakedeal POC\"].json.data[0].id;\n\nlet existing_product_vendor = $node[\"Get the product_vendor\"].json.data;\nlet product_vendor_action = $node[\"Create new product_vendor\"].json.action;\n\nif(productAction===\"post the products\"){\n   if(existingProductData.length>0){\n      let concatedProducts = existingProductData .concat(items[0].json.postedProductData);\n      items[0].json.concatedProducts=concatedProducts;\n   }else items[0].json.concatedProducts = items[0].json.postedProductData;\n}else items[0].json.concatedProducts = existingProductData;\n\nlet concated_products = items[0].json.concatedProducts\n\nif(product_vendor_action === \"post the product_vendor\"){\n     let posted_product_vendor = $node[\"Post the product_vendor\"].json.data;\n     items[0].json.posted_product_vendor = posted_product_vendor;\n\n}\n\nif(product_vendor_action === \"post the product_vendor\"){\n   if(existing_product_vendor.length>0){\n      let concated_product_vendor = existing_product_vendor.concat(items[0].json.posted_product_vendor);\n      items[0].json.concated_product_vendor = concated_product_vendor;\n   \n   }else items[0].json.concated_product_vendor = items[0].json.posted_product_vendor;\n\n}else items[0].json.concated_product_vendor = existing_product_vendor; \n\nlet concat_product_vendor  = items[0].json.concated_product_vendor;\n\nlet product_vendor = [];\n\nif(concat_product_vendor.length>1){\n      for(i=0;i<concat_product_vendor.length;i++){                 \n        product_vendor[i] ={};\n        product_vendor[i].sd_mozart_vendor_product_mapping_id=concat_product_vendor[i][\"id\"];\n        product_vendor[i].req_qty= req_quantity[i];\n        product_vendor[i].delivery_date = new Date(product_deliverDate[i]).toISOString();\n        product_vendor[i].product_total = product_price[i];\n       \n}\n\n\n}else {\n    product_vendor[0] = {};\n    product_vendor[0].sd_mozart_vendor_product_mapping_id =product_vendor_action === \"post the product_vendor\"?concat_product_vendor[\"id\"]:concat_product_vendor[0][\"id\"];  \n    product_vendor[0].req_qty = req_quantity[0];\n    product_vendor[0].delivery_date = new Date(product_deliverDate[0]).toISOString();\n    product_vendor[0].product_total = product_price[0];\n\n\n}\n\nlet po_details=[];\npo_details[0]={};\npo_details[0].po_file=po_file;\npo_details[0].po_num=po_num;\npo_details[0].po_value=po_value;\npo_details[0].po_status=po_status;\npo_details[0].po_date=new Date(po_date).toISOString();\npo_details[0].po_type=\"rfq\";\npo_details[0].issuer_name=issuer_id;\npo_details[0].shakedeal_poc_details = shakedeal_poc_id;\npo_details[0].po_deliver_date =new Date(po_deliver_date).toISOString();\npo_details[0].products= product_vendor; \nitems[0].json.po_details = po_details;\n\n\nreturn items;\n"
      },
      "name": "constructing for PO",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        1700
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_mozart_po_details",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"constructing for PO\"].json[\"po_details\"]}}"
      },
      "name": "Post the PO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1760,
        1700
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "={{$node[\"Globals\"].json[\"workflow_from_email\"]}}",
        "toEmail": "={{$node[\"Globals\"].json[\"sales_agent_email\"]}}",
        "subject": "=Balco: A new PO is received with PO number: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}",
        "html": "=<!DoCtYPe html><html lang=\"en\"><head><style id=\"stndz-\nstyle\"></style>\n<meta http-equiv=\"Content-Type\" content=\"text\n/html; charset=UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,\ninitial-scale=1, shrink-to-fit=no\">\n<meta name=\"description\" content=\"\">\n<meta name=\"author\" content=\"Mark Otto, Jacob\nThornton, and Bootstrap contributors\">\n<meta name=\"generator\" content=\"\nAcelleSystemLayouts\">\n<!-- Bootstrap core CSS -->\n<link href=\"https://marketing.shakedeal.com/assets\n/templates/60584da7bdf65/css/bootstrap.min.css\" rel=\"\nstylesheet\">\n<script id=\"spHTMLFormElementPrototypeScript\">\n(function()\n{\ntry\n{\nvar sp_old_HTMLFormElementPrototype_submit =\nHTMLFormElement.prototype.submit;\nHTMLFormElement.prototype.submit = function\n(AEvent)\n{\ntry\n{\nvar spEvent = document.createEvent('Event');\nspEvent.initEvent('sp_submit', true, true);\nthis.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from HTMLFormElement.\nprototype.submit: ' + ErrorMessage);\n}\nsp_old_HTMLFormElementPrototype_submit.apply\n(this);\n};\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to HTMLFormElement.prototype.submit: ' +\nErrorMessage);\n}\ntry\n{\nif (typeof __doPostBack == 'function')\n{\nvar sp_old__doPostBack = __doPostBack;\n__doPostBack = function(eventTarget,\neventArgument)\n{\ntry\n{\nvar spEvent = document.createEvent\n('Event');\nspEvent.initEvent('sp_submit', true, true);\nwindow.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from __doPostBack(): '\n+ ErrorMessage);\n}\nsp_old__doPostBack(eventTarget,\neventArgument);\n};\n}\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to __doPostBack(): ' + ErrorMessage);\n}\n})();</script><link href=\"https://fonts.googleapis.\ncom/icon?family=Material+Icons\" rel=\"stylesheet\"><link\nhref=\"https://fonts.googleapis.com/icon?\nfamily=Material+Icons+Outlined\" rel=\"stylesheet\"></head>\n\n<body data-new-gr-c-s-check-loaded=\"14.990.0\" data-\ngr-ext-installed=\"\">\n<main role=\"main\">\n<div class=\"py-5 bg-light\">\n<div class=\"container\">\n<h1 class=\"my-4 display-4 text-center\">A new PO is received with PO number:{{$node[\"Extracting balco PO details\"].json[\"po_number\"]}} and po_type : RFQ</h1>\n<p class=\"lead text-center\">Please create a SDStore order against this PO: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}.</p>\n<div><img class=\"my-2\" src=\"\" width=\"100%\" /></div>\n</div>\n</div>\n</main><footer class=\"text-muted py-5\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p class=\"mb-1\">Copyright &copy; OpCommerce Online PVT\nLTD, All rights reserved.</p>\n<p class=\"mb-0\">Please email us on <a href=\"\nsupport@shakedeal.com\">support@shakedeal.com</a> in\ncase of any queries.\n</div>\n<div class=\"col-md-4\">\n<p class=\"float-right\"><a href=\"#\">Back to top</a></p>\n</div>\n</div>\n</div>\n</footer>\n</body></html>",
        "options": {}
      },
      "name": "SA is informed that PO is generated1",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2060,
        1700
      ],
      "credentials": {
        "smtp": {
          "id": "7",
          "name": "AWS SES Creds"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "buyer_name",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"buyer_name\"]:$node[\"Extracting Vedanta PO details\"].json[\"buyer_name\"]?node[\"Extracting Vedanta PO details\"].json[\"buyer_name\"]:\"VEDANTA LIMITED\"}}"
            },
            {
              "name": "buyer_email",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"buyer_email\"]:$node[\"Extracting Vedanta PO details\"].json[\"buyer_email\"]?$node[\"Extracting Vedanta PO details1\"].json[\"buyer_email\"]:\"Invoice.sesa@vedanta.co.in\"}}"
            },
            {
              "name": "po_num",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_number\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_number\"]}}"
            },
            {
              "name": "from_mail",
              "value": "={{$node[\"Get the index of attachment\"].json[\"from\"][\"value\"][0][\"address\"]}}"
            },
            {
              "name": "to_mail",
              "value": "={{$node[\"Get the index of attachment\"].json[\"to\"][\"value\"][0][\"address\"]}}"
            },
            {
              "name": "items_list",
              "value": "={{$node[\"extracting the Shipping adress\"].json[\"items_list\"]}}"
            },
            {
              "name": "po_date",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_date\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_date\"]}}"
            },
            {
              "name": "po_deliverDate",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_deliverDate\"]:$node[\"Extracting Vedanta PO details\"].json[\"product_deliverDate\"]}}"
            },
            {
              "name": "order_type",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"order_type\"]:$node[\"Extracting Vedanta PO details\"].json[\"order_type\"]}}"
            },
            {
              "name": "po_status",
              "value": "open"
            },
            {
              "name": "shipment_address",
              "value": "=\"\""
            },
            {
              "name": "vendor_email",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"vendor_email\"]:$node[\"Extracting Vedanta PO details\"].json[\"vendor_email\"]}}"
            },
            {
              "name": "vendor_name",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"vendor_name\"]:$node[\"Extracting Vedanta PO details1\"].json[\"vendor_name\"]}}"
            },
            {
              "name": "products",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"products\"]:$node[\"Extracting Vedanta PO details\"].json[\"products\"]}}"
            },
            {
              "name": "vendors",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"vendors\"]:$node[\"Extracting Vedanta PO details\"].json[\"vendors\"]}}"
            },
            {
              "name": "product_quantity",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"product_quantity\"]:$node[\"Extracting Vedanta PO details\"].json[\"product_quantity\"]}}"
            },
            {
              "name": "productvalueWithTax",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"productvalueWithTax\"]:$node[\"Extracting Vedanta PO details\"].json[\"productvalueWithTax\"]}}"
            },
            {
              "name": "max_date",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"max_date\"]:$node[\"Extracting Vedanta PO details\"].json[\"max_date\"]}}"
            },
            {
              "name": "prodven",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"prodven\"]:$node[\"Extracting Vedanta PO details\"].json[\"prodven\"]}}"
            },
            {
              "name": "product_code",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"product_code\"]:$node[\"Extracting Vedanta PO details\"].json[\"product_code\"]}}"
            },
            {
              "name": "po_type",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_type\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_type\"]}}"
            }
          ],
          "number": [
            {
              "name": "buyer_contact",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"buyer_contact\"]:$node[\"Extracting Vedanta PO details\"].json[\"buyer_contact\"]}}"
            },
            {
              "name": "po_value",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_value\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_value\"]}}"
            }
          ],
          "boolean": []
        },
        "options": {}
      },
      "name": "Extracting PO details",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1400,
        -100
      ]
    },
    {
      "parameters": {
        "functionCode": "let prodven = $node[\"Extracting PO details\"].json[\"prodven\"];\nlet poDetails = $node[\"constructing po_details\"].json.po_details;\nlet poProducts = $node[\"constructing po_details\"].json.po_details[0].po_items;\nlet productsDetails = $node[\"constructing po_details\"].json.concated_products;\nlet po_date =$node[\"Extracting Vedanta PO details\"].json[\"po_date\"]; \nlet po_value= $node[\"Extracting Vedanta PO details\"].json[\"po_value\"];\nlet po_deliver_date = $node[\"Extracting PO details\"].json[\"max_date\"];\nlet po_type = $node[\"Extracting PO details\"].json[\"po_type\"].toLowerCase().trim();\nlet commision_percentage = $node[\"Globals\"].json[\"commision_percentage\"]; \nlet client = $node[\"Globals\"].json[\"client\"];\nlet vendorPoDetails = [];\nlet vendor_po_num_prefix = $node[\"Globals\"].json[\"vendor_po_num_prefix\"];\nlet po_number = $node[\"Extracting Vedanta PO details\"].json[\"po_number\"];\npoProducts = poProducts.map((obj, i) => ({ ...obj, req_qty: parseInt(obj.req_qty) }));\n\n//Reduce commision charges and if client is vedanta and po_type is routing\nif(client == \"vedanta\" && po_type == \"routing\" ){\n  poProducts = poProducts.map((obj, i) => ({ ...obj, product_total: obj.gross_price-(obj.gross_price*commision_percentage)/100 }));\n}\n\n\npo_items = [];\nuniqueArr = Object.create(null),\n    uniqueVendorPlantArr = poProducts.filter(o => {\n        var key = ['plant', 'vendor','buyer'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\n\nuniqueVendorPlantArr.forEach(function(obj,index){\n  po_items[index]={};\n  let matchedProdVen = poProducts.filter(pv => pv.vendor== obj.vendor && pv.plant == obj.plant && pv.buyer == obj.buyer);\n  let productVendorDetails = \n   poProducts.filter(product=>\n     matchedProdVen.some(\n      data=> data.product === product.product && data.plant == product.plant\n    )\n  );\n  let maxDate = new Date(\n  Math.max(\n    ...matchedProdVen.map(element => {\n      return new Date(element.delivery_date);\n      }),\n    ),\n  );\n  let vendor_po_number = `${vendor_po_num_prefix+obj.plant+po_number}-${index+1}`\n  po_items[index].po_items = matchedProdVen ;\n   po_items[index].vendor_po_number = vendor_po_number \n  let po_total = matchedProdVen .reduce((total,obj)=>obj.gross_price+ total, 0);\n  let net_po_value = matchedProdVen .reduce((total,obj)=>(obj.unit_price*parseFloat(obj.requested_qty))+total, 0);\n  vendorPoDetails[index]={};\n  vendorPoDetails[index].id = vendor_po_number;\n  vendorPoDetails[index].vendor=obj.vendor\n  vendorPoDetails[index].po_num=$node[\"post the po_details\"].json.data[0].id;\n  vendorPoDetails[index].po_value= po_type == \"routing\"?po_total-(po_total*commision_percentage)/100:po_total;\n  vendorPoDetails[index].net_po_value = net_po_value\n  vendorPoDetails[index].po_status=\"draft\";\n  vendorPoDetails[index].po_date=new Date(po_date).toISOString();\n  vendorPoDetails[index].po_type=client == \"vedanta\"?po_type:\"routing\";\n  vendorPoDetails[index].po_deliver_date =new Date(maxDate).toISOString(); \n  vendorPoDetails[index].buyer = obj.buyer;\n  vendorPoDetails[index].operation_agent = obj.operation_agent\n  //vendorPoDetails[index].delivery_address = 1;\n  \n})\n\n\nitems[0].json.uniqueVendorPlantArr = uniqueVendorPlantArr;\nitems[0].json.prodven= prodven;\nitems[0].json.poDetails =  poDetails;\nitems[0].json.poProducts = poProducts;\nitems[0].json.productsDetails = productsDetails;\nitems[0].json.vendorPoDetails =  vendorPoDetails;\nitems[0].json.po_items = po_items\nreturn items;\n"
      },
      "name": "Constructing Vendor PO Details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2160,
        1140
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_vendor_pos",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json[\"vendorPoDetails\"]}}"
      },
      "name": "post the vendor po_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2420,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "resource": "worksheet",
        "operation": "getContent",
        "workbook": "A6E890F58473778D!6489",
        "worksheet": "={{$node[\"Check from_adress & to_adress\"].json[\"subject\"]}}",
        "range": "=A2:V{{$node[\"Check from_adress & to_adress\"].json[\"subject\"].split(\" \")[1]}}",
        "rawData": true,
        "filters": {}
      },
      "name": "Get po details",
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 1,
      "position": [
        600,
        -120
      ],
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": null,
          "name": "QA CREDS"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "let product_name = [];\nlet product_code=[];\nlet product_quantity=[];\nlet material_description=[];\nlet vendor_name=[];\nlet vendor_phone=[];\nlet vendor_companyName=[];\nlet vendor_email=[];\nlet vendor_adress=[];\nlet product_deliverDate=[];\nlet productvalueWithTax=[];\nlet hsn_code = [];\nlet uom = [];\nlet plant = [];\nlet taxes = [];\nlet taxValues = [];\nlet rates = [];\nlet productSubTotal = [];\nlet productDetails=[];\nlet po_number = \"\";\nlet po_date = \"\";\nlet po_value = 0;\nlet findParameters = [\"PO Number\",\"PO Date\"];\nlet aribaVendorId = [];\nlet taxPercentages = [];\nlet vendor_gstin = [];\nlet searchParameters = {\n  \"po_number\":[\"PO Number\"],\n\n}\nlet po_type =  \"\";\nlet po_details = $node[\"Get the PO Data\"].json[\"data\"][0][\"po_details\"]\npo_number = po_details[0][\"poNumber\"].toString();\npo_date = po_details[0][\"poDate\"].split(\".\").reverse().join(\"-\");\npo_type = po_details[0][\"orderType\"];\npo_details.forEach(function(pod,index){\n  product_code.push(pod[\"materialCode\"].toString().padStart(10, \"0\"));\n  plant.push(pod[\"plant\"]);\n  uom.push(pod[\"uom\"]);\n  product_quantity.push(pod[\"qtyOrdered\"].split(\",\").join(\"\").toString());\n  rates.push(pod[\"itemPrice\"]);\n  productSubTotal.push(parseFloat(pod[\"excludingGst\"]));\n  product_name.push(pod[\"itemDescription\"]);\n  vendor_name.push(pod[\"vendorName\"]);\n  vendor_email.push(pod[\"vendorEmail\"]);\n  vendor_phone.push(pod[\"vendorContact\"]?pod[\"vendorContact\"].toString():\"\");\n  vendor_gstin.push(pod[\"gst\"]);\n  aribaVendorId.push(pod[\"vendorCode\"]);\n  hsn_code.push(pod[\"hsn\"]);\n  product_deliverDate.push(pod[\"deliveryDate\"].trim().split(\".\").reverse().join(\"-\"));\n  pod[\"itemTaxPercentage\"]?taxPercentages.push(parseFloat(pod[\"itemTaxPercentage\"])):taxPercentages.push(0);\n  pod[\"itemTaxAmount\"]?taxValues.push(pod[\"itemTaxAmount\"].split(\",\").join('')):taxValues.push(0);\n\n})\nproduct_code.forEach(function(item,index){\n  productDetails[index] = {};\n  productDetails[index].product_index = index;\n  productDetails[index].product_name =product_name[index].substring(0,198);\n  productDetails[index].description = product_name[index];\n  productDetails[index].id=product_code[index];\n  productDetails[index].uom = uom[index];  \n  productDetails[index].hsn = hsn_code[index];\n  productDetails[index].mc = product_code[index].slice(0,2);\n  productDetails[index].sg = product_code[index].slice(0,4);\n  productDetails[index].ssg = product_code[index].slice(0,6)\n  productDetails[index].product_quantity=product_quantity[index];\n  let productTotal = parseFloat(productSubTotal[index])+parseFloat(taxValues[index])\n  productvalueWithTax.push(productTotal)\n  po_value=po_value + productTotal;\n  productDetails[index].productvalueWithTax=productTotal;\n  productDetails[index].rate = rates[index];\n  productDetails[index].tax = parseFloat(taxPercentages[index]);\n  //productDetails[index].description=material_description[index];\n productDetails[index].po_deliver_date = product_deliverDate[index].split(\".\").reverse().join(\"-\");\n  productDetails[index].plant = plant[index];\n  productDetails[index].isMapped = false;         \n})\n\nlet vendorDetails=[];\nvendor_name.forEach(function(item,index){\n  vendorDetails[index] = {};\n  vendorDetails[index].vendor_name=vendor_name[index];\n  vendorDetails[index].vendor_phone=vendor_phone[index];\n  vendorDetails[index].vendor_company=vendor_companyName[index];\n  vendorDetails[index].id=vendor_email[index];\n  vendorDetails[index].vendor_address=vendor_adress[index];\n  vendorDetails[index].ariba_vendor_id = aribaVendorId[index];\n  vendorDetails[index].gstin = vendor_gstin[index];\n})\nlet prodven=[];\nif(vendor_name.length>0){\n      productDetails.forEach(function(product,index){\n        prodven[index]={};\n        prodven[index].product_index = product[\"product_index\"];\n        prodven[index].productCode = product[\"id\"];\n        prodven[index].email = vendor_email[index];\n        prodven[index].quantity= product[\"product_quantity\"];\n        prodven[index].product_deliverDate = product[\"po_deliver_date\"];\n        prodven[index].product_price = product[\"productvalueWithTax\"];\n        prodven[index].rate = product[\"rate\"]\n        prodven[index].plant = product[\"plant\"];\n        prodven[index].hsn = product[\"hsn\"];\n        prodven[index].uom = product[\"uom\"];\n        prodven[index].tax = product[\"tax\"];\n        prodven[index].mc = product[\"mc\"]\n      })\n}\nif(vendor_name.length>0){\n   items[0].json.order_type = \"routing\";\n\n}else items[0].json.order_type = \"rfq\";\n\nlet max =product_deliverDate[0];\n\nproduct_deliverDate.forEach(function(value,index){\n       max = new Date(value) > new Date(max)? value: max;\n      \n\n\n})\n\nitems[0].json.po_type = po_type;\nitems[0].json.max_date = max; \n\nitems[0].json.product_deliverDate = product_deliverDate;\nitems[0].json.vendor_name = vendor_name;\nitems[0].json.vendor_email = vendor_email;\nitems[0].json.aribaVendorId = aribaVendorId;\nitems[0].json.products = productDetails;\nitems[0].json.vendors = vendorDetails;\nitems[0].json.prodven = prodven;\nitems[0].json.taxValues = taxValues;\nitems[0].json.productSubTotal = productSubTotal;\nitems[0].json.product_code = product_code;\nitems[0].json.product_name = product_name;\nitems[0].json.plant = plant;\nitems[0].json.uom = uom;\nitems[0].json.product_quantity = product_quantity;\nitems[0].json.rates = rates;\nitems[0].json.po_date = po_date; \nitems[0].json.po_number =po_number.includes(\"/\")?po_number.split(\"/\")[1].trim():po_number;\nitems[0].json.po_value = po_value;\nitems[0].json.productvalueWithTax = productvalueWithTax;\nitems[0].json.po_details = po_details;\nitems[0].json.taxPercentages = taxPercentages;\nreturn items;\n"
      },
      "name": "Extracting Vedanta PO details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1240,
        -140
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet po_items=$node[\"Constructing Vendor PO Details\"].json[\"po_items\"];\nlet returnItems =[]\n\npo_items.forEach(function(obj,index){  \n   let ids = [];\n   let data ={};\n   data.vendor_po = obj.vendor_po_number;\n   obj[\"po_items\"].map((item,index)=>ids.push(item.id));\n   let update_items = {};\n   update_items.keys = ids;\n   update_items.data = data\n    returnItems.push({\n    json: [\n      {\n       update_items_obj :update_items,\n        url :  $node[\"Globals\"].json[\"dms_url\"],\n      \n    }\n    ]\n  });\n  \n})\n\nreturn returnItems;"
      },
      "name": "Function to create obj for updating the vendor po in po items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2660,
        1140
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to create obj for updating the vendor po in po items\"].json[\"0\"][\"url\"]}}/items/sdm_po_items",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "batchInterval": 1000
        },
        "bodyParametersJson": "={{$node[\"Function to create obj for updating the vendor po in po items\"].json[\"0\"][\"update_items_obj\"]}}"
      },
      "name": "Update the vendor po in po items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2900,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_product_buyer?filter={ \"id\": { \"_in\": \"{{$node[\"Create new product\"].json[\"plantcategory_ids\"]}}\" }}",
        "options": {}
      },
      "name": "Get buyer on category",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1520,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_excel_pos?filter={\"_and\":[{\"po_num\":{\"_eq\":\"{{$node[\"Wait for PO Email\"].json[\"body\"][\"po_number\"]}}\"}},{\"po_status\":{\"_neq\":\"error\"}}]}&sort=-date_created&limit=1",
        "options": {}
      },
      "name": "Get the PO Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        820,
        -120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let products = $node[\"Extracting PO details\"].json[\"products\"];\nlet categories = [];\nproducts.forEach(function(product,index){\n  categories.push(product.mc,product.sg,product.ssg)\n})\n\nitems[0].json.categories = categories;\nreturn items;"
      },
      "name": "Return categories",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2280,
        680
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_categories?filter={ \"id\": { \"_in\": \"{{$node[\"Return categories\"].json[\"categories\"]}}\" }}",
        "options": {}
      },
      "name": "Get the categories",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2480,
        680
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let data = $node[\"Get the categories\"].json[\"data\"]\nlet categories = $node[\"Return categories\"].json[\"categories\"];\nlet newCategoryObj =[];\nlet resultFilter = \n   categories.filter(category=>\n     !data.some(\n      data=> data.id === category \n    )\n  );\nif(resultFilter.length>0){\n   action=\"post the categories\"\n\n}else action = \"no categories to post\"\nresultFilter.forEach(function(category,index){\n  newCategoryObj[index]={};\n  newCategoryObj[index].id = category;\n  newCategoryObj[index].level = category.length/2\n})\nlet uniqueResultArray = [\n    ...new Map(newCategoryObj.map((item) => [item[\"id\"], item])).values(),\n];\n\nitems[0].json.uniqueResultArray = uniqueResultArray;\nitems[0].json.newCategoryObj = newCategoryObj \nitems[0].json.resultFilter = resultFilter ;\nitems[0].json.action = action;\nitems[0].json.categories = categories ;\nreturn items;"
      },
      "name": "Return new categories",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2680,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "=post the categories"
            }
          ]
        }
      },
      "name": "Condition for new categories",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2880,
        680
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3020,
        780
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_categories",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Return new categories\"].json[\"uniqueResultArray\"]}}"
      },
      "name": "Create categories",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3060,
        580
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "send-po",
        "options": {}
      },
      "name": "Wait for PO Email",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        40,
        -120
      ],
      "webhookId": "c098e94e-491d-4fe3-bc45-ba4ebda3981d",
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "items[0].json.attachmentIndex = items[0].binary ? Object.values(items[0].binary).findIndex(key => key.mimeType === \"application/pdf\") : -1;\nif(items[0].json.attachmentIndex !== -1){\n  items[0].json.data = items[0].binary[items[0].json.attachmentIndex];\n}\n\nlet fromEmails = [\"sairam.reddy@shakedeal.com\",\"ordersender-prod@ansmtp.ariba.com\",\"chidanand@shakedeal.com\",\"surya.kc@shakedeal.com\",\"mozartautomationtest@gmail.com\",\"tendul.kumar@shakedeal.com\"];\nlet toEmails = [\"shakedeal.mozart+balco@shakedeal.com\",\"shakedeal.mozart+vedanta@shakedeal.com\",\"sairam.shakedeal+vedantaqa@gmail.com\",\"sairam.shakedeal+balcoqa@gmail.com\"]\nlet negligible_plants = [\"NIES\",\"BCES\",\"KBES\",\"ARES\",\"VGCB\"];\nitems[0].json.negligible_plants = negligible_plants;\nitems[0].json.fromEmails = fromEmails;\n\nreturn items\n"
      },
      "name": "Get the index of attachment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        -120
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_excel_pos/{{$node[\"Get the PO Data\"].json[\"data\"][0][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "po_status",
              "value": "=uploaded"
            }
          ]
        }
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3340,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Get the PO Data\"].json[\"data\"].length>0?true:false}}"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        980,
        -120
      ]
    },
    {
      "parameters": {},
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1140,
        40
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-04-05T10:00:34.553Z"
}