{
  "active": false,
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-02-23T13:04:10.816Z",
  "id": "269",
  "name": "Denominations",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "function findCoinCombinations(coins, target) {\n  let result = [];\n\n  function permute(coins, currentSum, currentPerm) {\n    if (currentSum === target) {\n      result.push(currentPerm);\n      \n      return;\n    }\n\n    if (currentSum > target) {\n      result.push(currentPerm)\n      return;\n    }\n\n    for (let i = 0; i < coins.length; i++) {\n      permute(coins.slice(i), currentSum + coins[i], [...currentPerm, coins[i]]);\n    }\n  }\n\n  permute(coins, 0, []);\n  return result;\n}\n\nconst denominations = [500,200,100,50];\nconst totalSum = 770;\nconst linkLength = 100\n\nconst permutations = findCoinCombinations(denominations, totalSum);\nconst result = permutations.filter(permutation => permutation.length == linkLength);\nlet r2 = []\nlet r3 = []\nresult.forEach((denomination) => {\n  \t\n    const r1 = denominations.every(item => denomination.includes(item))\n    if(r1){\n      \n      r3.push(denomination)\n    }\n  });\n\n\n\n\n r3.forEach((denomination,index) => {\n    r2[index] = {}\n  \tconst sum = denomination.reduce((partialSum, a) => partialSum + a, 0);\n    r2[index].arrayObj = denomination\n    r2[index].sum = sum\n    //r2.push(sum)\n    \n  });\nconst nearestObj = r2.reduce((prev, curr) => {\n  // Check if current object's age is closer to the target age than the previous object's age\n  if (Math.abs(curr.sum - totalSum) < Math.abs(prev.age - totalSum)) {\n    return curr;\n  } else {\n    return prev;\n  }\n});\n\nitems[0].json.nearestObj= nearestObj;\n//items[0].json.r2= r2;\n//items[0].json.filteredPermutations= result;\nreturn items\n"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        520,
        200
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-02-24T12:29:10.504Z"
}