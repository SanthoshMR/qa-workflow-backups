{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Check for Order ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Order ID": {
      "main": [
        [
          {
            "node": "Check Order ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Order ID": {
      "main": [
        [
          {
            "node": "Prepare Order Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Order": {
      "main": [
        [
          {
            "node": "Prepare Order Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Order Items": {
      "main": [
        [
          {
            "node": "Create Order Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Order": {
      "main": [
        [
          {
            "node": "Get Order Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Items": {
      "main": [
        [
          {
            "node": "Get Order Item IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Item IDs": {
      "main": [
        [
          {
            "node": "Check Order Items Count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Order Items": {
      "main": [
        [
          {
            "node": "Order Existing Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order Existing Status": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Parent Order Product Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Parent Order Items": {
      "main": [
        [
          {
            "node": "Get PO Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Order Data": {
      "main": [
        [
          {
            "node": "Check Order Existing Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Parent Order Product Update": {
      "main": [
        [
          {
            "node": "Create Parent Order Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Parent Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Parent Order Items": {
      "main": [
        [
          {
            "node": "Update Parent Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Parent Order": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Old Order Items2": {
      "main": [
        [
          {
            "node": "Empty ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty ": {
      "main": [
        [
          {
            "node": "Check Order Existing Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Order Existing Status": {
      "main": [
        [
          {
            "node": "Update Order",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-05-19T09:18:02.519Z",
  "id": "314",
  "name": "Siemens  - Orders",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -520,
        280
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "siemens/create-order",
        "responseMode": "lastNode",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -300,
        280
      ],
      "webhookId": "02e0b2f7-a9c5-44cb-8f21-b999c1afcc9e"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "dms_url",
              "value": "=https://noirqa.shakedeal.com"
            },
            {
              "name": "order_table_name",
              "value": "=sds_orders"
            },
            {
              "name": "order_items_table_name",
              "value": "=sds_order_items"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -80,
        280
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_table_name\"]}}?filter={\"order_id\": {\"_eq\":\"OD{{$node[\"Webhook\"].json[\"body\"][\"parent_order_id\"]}}\"}}&fields=*,order_items.*,order_items.sds_po_items_id.*,order_items.sds_po_items_id.product.*",
        "options": {}
      },
      "name": "Check for Order ID",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        140,
        280
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for Order ID\"].json[\"data\"].length}}",
              "operation": "larger",
              "value2": "={{0}}"
            }
          ]
        }
      },
      "name": "Check Order ID",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        360,
        280
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_table_name\"]}}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Prepare Order Data\"].json[\"new_order_data\"]}}"
      },
      "name": "Create Order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        660,
        680
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let order_response = $node[\"Webhook\"].json.body;\nlet parent_order_detail = $node[\"Check for Order ID\"].json.data[0];\n\nlet parent_order_products = parent_order_detail.order_items;\nlet products = order_response.products;\n\nlet new_order_product_data = [];\nlet parent_order_product_data = [];\n\nlet item_ids_for_delete = [];\n\nlet test = [];\n\nlet test1 = [];\n\nlet new_product_count = parent_product_count = 0;\nlet new_order_total_gross_value = new_order_total_tax_value = new_order_total_net_value = parent_order_total_gross_value = parent_order_total_tax_value = parent_order_total_net_value = 0;\n\n//Product Details\nfor (var key in products) {\n    if (products.hasOwnProperty(key)) {\n        var product = products[key];\n\n        parent_order_products.forEach((parent_order_product,parent_order_product_index)=>{\n            let parent_product = parent_order_product.sds_po_items_id.product;\n            \n            if(parent_product.product_code == product.product_code){\n                \n                let product_qty = product.amount;\n                let product_price = product.price;\n                let tax_percentage = product.prod_tax_rate;\n                let net_amount = product_price / ((100+tax_percentage)/100);\n                let product_net_amount = 0;\n                let total_amount = 0;\n                let product_tax_value = 0;\n\n                // let parent_order_ordered_qty = parent_order_product.ordered_qty;\n                let parent_order_ordered_qty = parent_order_product.sds_po_items_id.ordered_qty;\n\n                // if(parseFloat(parent_order_ordered_qty) == parseFloat(product_qty)){\n                    item_ids_for_delete.push(parent_order_product.id);\n                    \n                    product_net_amount = net_amount * product_qty;\n                    total_amount = product_price * product_qty;\n                    product_tax_value = total_amount - product_net_amount;\n                    \n                    new_order_product_data[new_product_count]={};\n                    new_order_product_data[new_product_count].sds_po_items_id = parent_order_product.sds_po_items_id.id;\n                    new_order_product_data[new_product_count].ordered_qty = product_qty;\n                    new_order_product_data[new_product_count].product_code = product.product_code;\n                    // new_order_product_data[new_product_count].product_name = product.product;\n                    // new_order_product_data[new_product_count].price = product_price;\n                    // new_order_product_data[new_product_count].tax_percentage = tax_percentage;\n                    // new_order_product_data[new_product_count].product_net_value = product_net_amount;\n                    // new_order_product_data[new_product_count].product_tax_value = product_tax_value;\n                    // new_order_product_data[new_product_count].product_gross_value = total_amount;\n\n                    new_order_total_gross_value = new_order_total_gross_value + total_amount;\n                    new_order_total_tax_value = new_order_total_tax_value + product_tax_value;\n                    new_order_total_net_value = new_order_total_net_value + product_net_amount;\n\n                    new_product_count++;\n                // }\n            }\n        });\n    }\n}\n\nlet product_avail_status = 0;\nparent_order_products.forEach((parent_order_product,parent_order_product_index)=>{\n    let parent_product = parent_order_product.sds_po_items_id.product;\n    // let parent_order_ordered_qty = parent_order_product.ordered_qty;\n    let parent_order_ordered_qty = parent_order_product.sds_po_items_id.ordered_qty;\n    product_avail_status = 0;\n    new_order_product_data.forEach((product_data,product_index)=>{\n        if(parent_product.product_code == product_data.product_code){\n            product_avail_status = 1;\n            let product_qty = product_data.ordered_qty;\n            if(parseFloat(parent_order_ordered_qty) == parseFloat(product_qty)){\n                // item_ids_for_delete.push(parent_order_product.id);\n            }else{\n                product_qty = parseFloat(parent_order_ordered_qty) - parseFloat(product_qty);\n\n                let product_price = parent_order_product.sds_po_items_id.unit_price;\n                let tax_percentage = parent_order_product.sds_po_items_id.tax_percentage;\n                let product_amount_without_tax = product_price * product_qty;\n                let total_amount = (product_price + ((product_price * tax_percentage ) / 100)) * product_qty;\n                let product_tax_value = total_amount - product_amount_without_tax;\n\n                parent_order_total_gross_value = parent_order_total_gross_value + total_amount;\n                parent_order_total_tax_value = parent_order_total_tax_value + product_tax_value;\n                parent_order_total_net_value = parent_order_total_net_value + product_amount_without_tax;\n                \n                parent_order_product_data[parent_product_count]={};\n                parent_order_product_data[parent_product_count].sds_po_items_id = parent_order_product.sds_po_items_id.id;\n                parent_order_product_data[parent_product_count].ordered_qty = product_qty;\n                parent_order_product_data[parent_product_count].product_code = product.product_code;\n\n                // parent_order_product_data[parent_product_count].product_amount_without_tax = product_amount_without_tax;\n                // parent_order_product_data[parent_product_count].total_amount = total_amount;\n                // parent_order_product_data[parent_product_count].product_tax_value = product_tax_value;\n\n                parent_product_count++;\n            }\n        }\n    });\n    \n    if(product_avail_status == 0){\n        let product_qty = parent_order_ordered_qty;\n        let product_price = parent_order_product.sds_po_items_id.unit_price;\n        let tax_percentage = parent_order_product.sds_po_items_id.tax_percentage;\n        \n        let product_amount_without_tax = product_price * product_qty;\n\n        let total_amount = (product_price + ((product_price * tax_percentage ) / 100)) * product_qty;\n\n        let product_tax_value = total_amount - product_amount_without_tax;\n\n        parent_order_total_gross_value = parent_order_total_gross_value + total_amount;\n        parent_order_total_tax_value = parent_order_total_tax_value + product_tax_value;\n        parent_order_total_net_value = parent_order_total_net_value + product_amount_without_tax;\n\n        // parent_order_product_data[parent_product_count]={};\n        // parent_order_product_data[parent_product_count].product_qty = product_qty;\n        // parent_order_product_data[parent_product_count].product_price = product_price;\n        // parent_order_product_data[parent_product_count].tax_percentage = tax_percentage;\n\n\n        // parent_order_product_data[parent_product_count].product_amount_without_tax = product_amount_without_tax;\n\n        // parent_order_product_data[parent_product_count].total_amount = total_amount;\n\n        // parent_order_product_data[parent_product_count].product_tax_value = product_tax_value;\n\n        // parent_product_count++;\n    }\n});\n\nlet order_id = \"\";\nlet parent_order_id = \"\";\nif(order_response.order_existing_status == 1){\n    parent_order_id = null;\n    order_id = \"OD\"+order_response.parent_order_id;\n}else{\n    parent_order_id = \"OD\"+order_response.parent_order_id;\n    order_id = \"OD\"+order_response.split_order_id;\n}\n\nlet new_order_data = {\n    \"order_id\": order_id,\n    \"parent_order_id\" : parent_order_id,\n    \"po_num\" : parent_order_detail.po_num,\n    \"order_date\" : order_response.order_date,\n    \"order_value\" : new_order_total_gross_value,\n    \"order_status\" : 'Open',\n    \"ordered_qty\" : new_product_count,\n    \"net_value\" : new_order_total_net_value,\n    \"gross_value\" : new_order_total_gross_value,\n    \"tax_value\" : new_order_total_tax_value,\n    \"order_ref_number\" : order_response.reference_number,\n}\n\nlet parent_order_data = {\n    \"order_value\" : parent_order_total_gross_value,\n    \"ordered_qty\" : parent_product_count,\n    \"net_value\" : parent_order_total_net_value,\n    \"gross_value\" : parent_order_total_gross_value,\n    \"tax_value\" : parent_order_total_tax_value,\n}\n\nlet update_order_data = {\n    \"keys\" : [parent_order_detail.id],\n    \"data\" : parent_order_data\n}\n\nitem_ids_for_delete.push(58);\n\nitem_ids_for_delete.push(56);\n\nitem_ids_for_delete.push(57);\n\nitems[0].json.new_order_data = new_order_data;\nitems[0].json.new_order_product_data = new_order_product_data;\n\nitems[0].json.parent_order_data = parent_order_data;\nitems[0].json.parent_order_product_data = parent_order_product_data;\n\n// items[0].json.parent_order_item_ids_for_delete = item_ids_for_delete;\n\nitems[0].json.parent_order_item_ids_for_delete = [56,57];\n\n// items[0].json.test = test;\n// items[0].json.test1 = test1;\n\nreturn items;"
      },
      "name": "Prepare Order Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        620,
        260
      ]
    },
    {
      "parameters": {
        "functionCode": "let order_response = $node[\"Webhook\"].json.body;\nlet product_data = $node[\"Prepare Order Data\"].json.new_order_product_data;\n\nlet sds_orders_id = '';\nif(order_response.order_existing_status == 1){\n  let existing_order_info = $node[\"Update Order\"].json.data;\n  sds_orders_id = existing_order_info.id;\n}else{\n  let order_info = $node[\"Create Order\"].json.data;\n  sds_orders_id = order_info.id;\n}\n\nproduct_data.forEach((product,index)=>{\n  product.sds_orders_id = sds_orders_id;\n});\n\nitems[0].json.product_data = product_data;\nreturn items;\n\n"
      },
      "name": "Prepare Order Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        680
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Prepare Order Items\"].json[\"product_data\"]}}"
      },
      "name": "Create Order Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1140,
        680
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_table_name\"]}}/{{$node[\"Check for Order ID\"].json[\"data\"][0][\"id\"]}}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Prepare Order Data\"].json[\"order_data\"]}}"
      },
      "name": "Update Order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        660,
        480
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "DELETE",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}/{{$node[\"Get Order Item IDs\"].json[\"order_item_ids\"]}}",
        "options": {}
      },
      "name": "Remove Old Order Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1540,
        400
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}?filter={\"sds_orders_id\": {\"_eq\":\"{{$node[\"Update Order\"].json[\"data\"][\"id\"]}}\"}}",
        "options": {}
      },
      "name": "Get Order Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        920,
        420
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let order_items = $node[\"Get Order Items\"].json.data;\n\nlet order_item_ids = [];\n\norder_items.forEach((order_item,index)=>{\n  order_item_ids.push(order_item.id);\n});\n\nitems[0].json.order_item_ids = order_item_ids;\n\nreturn items;\n"
      },
      "name": "Get Order Item IDs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1120,
        420
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Webhook\"].json[\"body\"][\"order_existing_status\"]}}",
              "operation": "equal",
              "value2": "={{1}}"
            }
          ]
        }
      },
      "name": "Check Order Existing Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        380,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Get Order Item IDs\"].json[\"order_item_ids\"].length}}",
              "operation": "larger",
              "value2": "={{0}}"
            }
          ]
        }
      },
      "name": "Check Order Items Count",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1320,
        420
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "DELETE",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}/{{$node[\"Get Order Item IDs\"].json[\"order_item_ids\"][0]}}",
        "options": {}
      },
      "name": "Remove Old Order Items1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1400,
        200
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let responseData = [];\n\nresponseData.push({\n    json: {\n        \"success\": true,\n        \"message\" : \"Order Status updated successfully!\"\n    }\t\t\t\n});\n\nreturn responseData;\n"
      },
      "name": "Success Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        140,
        760
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Webhook\"].json[\"body\"][\"order_existing_status\"]}}",
              "operation": "equal",
              "value2": "={{1}}"
            }
          ]
        }
      },
      "name": "Order Existing Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1400,
        680
      ]
    },
    {
      "parameters": {},
      "name": "Create Order Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2160,
        760
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}?filter={\"sds_orders_id\": {\"_eq\":\"{{$node[\"Check for Order ID\"].json[\"data\"][0][\"id\"]}}\"}}",
        "options": {}
      },
      "name": "Get Order Items1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1780,
        700
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}?filter={\"sds_orders_id\": {\"_eq\":\"{{$node[\"Check for Order ID\"].json[\"data\"][0][\"id\"]}}\"}}",
        "options": {}
      },
      "name": "Get Parent Order Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        880,
        60
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sds_po_items?filter={\"po\": {\"_eq\":\"9707681813\"}}",
        "options": {}
      },
      "name": "Get PO Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1060,
        60
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}?filter={\"sds_orders_id\": {\"_eq\":\"73\"}}&fields=*,sds_po_items_id.*",
        "options": {}
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        300,
        20
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let order_response = $node[\"Webhook\"].json.body;\n\nlet products = order_response.products;\n\nlet product_data = [];\n\nlet count = 0;\nlet total_gross_value = total_tax_value = total_net_value = 0;\n\n//Product Details\nfor (var key in products) {\n    if (products.hasOwnProperty(key)) {\n        var product = products[key];\n\n        product_data[count]={};\n        product_data[count].product_code = product.product_code;\n        product_data[count].product_name = product.product;\n        \n        let product_price = product.price;\n        let product_qty = product.amount;\n        let tax_percentage = product.prod_tax_rate;\n        let net_amount = product_price / ((100+tax_percentage)/100);\n        let product_net_amount = net_amount * product_qty;\n        let total_amount = product_price * product_qty;\n        let product_tax_value = total_amount - product_net_amount;\n\n        product_data[count].price = product_price;\n\n        product_data[count].ordered_qty = product_qty;\n\n        product_data[count].tax_percentage = tax_percentage;\n\n        product_data[count].product_net_value = product_net_amount;\n        product_data[count].product_tax_value = product_tax_value;\n        \n        product_data[count].product_gross_value = total_amount;\n\n\n        total_gross_value = total_gross_value + total_amount;\n        total_tax_value = total_tax_value + product_tax_value;\n        total_net_value = total_net_value + product_net_amount;\n\n        count++;\n    }\n}\n\nlet order_id = \"\";\nlet parent_order_id = \"\";\nif(order_response.order_existing_status == 1){\n    parent_order_id = null;\n    order_id = \"OD\"+order_response.parent_order_id;\n}else{\n    parent_order_id = \"OD\"+order_response.parent_order_id;\n    order_id = \"OD\"+order_response.split_order_id;\n}\n\nlet order_data = {\n    \"order_id\": order_id,\n    \"parent_order_id\" : parent_order_id,\n    \"order_date\" : order_response.order_date,\n    \"order_value\" : total_gross_value,\n    \"order_status\" : 'Open',\n    \"ordered_qty\" : count,\n    \"net_value\" : total_net_value,\n    \"gross_value\" : total_gross_value,\n    \"tax_value\" : total_tax_value,\n    \"order_ref_number\" : order_response.reference_number,\n}\n\nitems[0].json.order_data = order_data;\nitems[0].json.product_data = product_data;\nreturn items;"
      },
      "name": "Prepare Order Data1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        620,
        -20
      ]
    },
    {
      "parameters": {
        "functionCode": "let order_response = $node[\"Webhook\"].json.body;\nlet parent_order_detail = $node[\"Check for Order ID\"].json.data[0];\n\nlet parent_order_products = parent_order_detail.order_items;\nlet products = order_response.products;\n\nlet new_order_product_data = [];\nlet parent_order_product_data = [];\n\nlet item_ids_for_delete = [];\n\nlet new_product_count = parent_product_count = 0;\nlet new_order_total_gross_value = new_order_total_tax_value = new_order_total_net_value = parent_order_total_gross_value = parent_order_total_tax_value = parent_order_total_net_value = 0;\n\n//Product Details\nfor (var key in products) {\n    if (products.hasOwnProperty(key)) {\n        var product = products[key];\n\n        parent_order_products.forEach((parent_order_product,parent_order_product_index)=>{\n            let parent_product = parent_order_product.sds_po_items_id.product;\n\n            if(parent_product.product_code == product.product_code){\n\n                let product_qty = product.amount;\n                let product_price = product.price;\n                let tax_percentage = product.prod_tax_rate;\n                let net_amount = product_price / ((100+tax_percentage)/100);\n                let product_net_amount = 0;\n                let total_amount = 0;\n                let product_tax_value = 0;\n\n                // let parent_order_ordered_qty = parent_order_product.ordered_qty;\n                let parent_order_ordered_qty = parent_order_product.sds_po_items_id.ordered_qty;\n                if(parseFloat(parent_order_ordered_qty) == parseFloat(product_qty)){\n                    product_net_amount = net_amount * product_qty;\n                    total_amount = product_price * product_qty;\n                    product_tax_value = total_amount - product_net_amount;\n                    \n                    new_order_product_data[new_product_count]={};\n                    new_order_product_data[new_product_count].sds_po_items_id = parent_order_product.sds_po_items_id.id;\n                    new_order_product_data[new_product_count].ordered_qty = product_qty;\n                    // new_order_product_data[new_product_count].product_code = product.product_code;\n                    // new_order_product_data[new_product_count].product_name = product.product;\n                    // new_order_product_data[new_product_count].price = product_price;\n                    // new_order_product_data[new_product_count].tax_percentage = tax_percentage;\n                    // new_order_product_data[new_product_count].product_net_value = product_net_amount;\n                    // new_order_product_data[new_product_count].product_tax_value = product_tax_value;\n                    // new_order_product_data[new_product_count].product_gross_value = total_amount;\n\n                    new_order_total_gross_value = new_order_total_gross_value + total_amount;\n                    new_order_total_tax_value = new_order_total_tax_value + product_tax_value;\n                    new_order_total_net_value = new_order_total_net_value + product_net_amount;\n\n                    new_product_count++;\n                }\n            }\n        });\n    }\n}\n\nlet product_avail_status = 0;\nparent_order_products.forEach((parent_order_product,parent_order_product_index)=>{\n    let parent_product = parent_order_product.sds_po_items_id.product;\n    // let parent_order_ordered_qty = parent_order_product.ordered_qty;\n    let parent_order_ordered_qty = parent_order_product.sds_po_items_id.ordered_qty;\n\n    product_avail_status = 0;\n    new_order_product_data.forEach((product_data,product_index)=>{\n        if(parent_product.product_code == product.product_code){\n            product_avail_status = 1;\n            if(parseFloat(parent_order_ordered_qty) == parseFloat(product_qty)){\n                item_ids_for_delete.push(parent_order_product.id);\n            }else{\n                let product_qty = parseFloat(parent_order_ordered_qty) - parseFloat(product.amount);\n\n                let product_price = product.price;\n                let tax_percentage = product.prod_tax_rate;\n                let net_amount = product_price / ((100+tax_percentage)/100);\n                \n                let product_net_amount = net_amount * product_qty;\n                let total_amount = product_price * product_qty;\n                let product_tax_value = total_amount - product_net_amount;\n\n                parent_order_total_gross_value = parent_order_total_gross_value + total_amount;\n                parent_order_total_tax_value = parent_order_total_tax_value + product_tax_value;\n                parent_order_total_net_value = parent_order_total_net_value + product_net_amount;\n            }\n        }\n    });\n    \n    if(product_avail_status == 0){\n        let product_qty = parent_order_ordered_qty;\n        let product_price = parent_order_product.sds_po_items_id.unit_price;\n        let tax_percentage = parent_order_product.sds_po_items_id.tax_percentage;\n        \n        let product_amount_without_tax = product_price * product_qty;\n\n        let total_amount = (product_price + ((product_price * tax_percentage ) / 100)) * product_qty;\n\n        let product_tax_value = total_amount - product_amount_without_tax;\n\n        parent_order_total_gross_value = parent_order_total_gross_value + total_amount;\n        parent_order_total_tax_value = parent_order_total_tax_value + product_tax_value;\n        parent_order_total_net_value = parent_order_total_net_value + product_amount_without_tax;\n\n\n        parent_order_product_data[parent_product_count]={};\n        parent_order_product_data[parent_product_count].product_qty = product_qty;\n        parent_order_product_data[parent_product_count].product_price = product_price;\n        parent_order_product_data[parent_product_count].tax_percentage = tax_percentage;\n\n\n        parent_order_product_data[parent_product_count].product_amount_without_tax = product_amount_without_tax;\n\n        parent_order_product_data[parent_product_count].total_amount = total_amount;\n\n        parent_order_product_data[parent_product_count].product_tax_value = product_tax_value;\n\n        parent_product_count++;\n    }\n});\n\nlet order_id = \"\";\nlet parent_order_id = \"\";\nif(order_response.order_existing_status == 1){\n    parent_order_id = null;\n    order_id = \"OD\"+order_response.parent_order_id;\n}else{\n    parent_order_id = \"OD\"+order_response.parent_order_id;\n    order_id = \"OD\"+order_response.split_order_id;\n}\n\nlet new_order_data = {\n    \"order_id\": order_id,\n    \"parent_order_id\" : parent_order_id,\n    \"po_num\" : parent_order_detail.po_num,\n    \"order_date\" : order_response.order_date,\n    \"order_value\" : new_order_total_gross_value,\n    \"order_status\" : 'Open',\n    \"ordered_qty\" : new_product_count,\n    \"net_value\" : new_order_total_net_value,\n    \"gross_value\" : new_order_total_gross_value,\n    \"tax_value\" : new_order_total_tax_value,\n    \"order_ref_number\" : order_response.reference_number,\n}\n\nlet parent_order_data = {\n    \"order_value\" : parent_order_total_gross_value,\n    \"ordered_qty\" : parent_product_count,\n    \"net_value\" : parent_order_total_net_value,\n    \"gross_value\" : parent_order_total_gross_value,\n    \"tax_value\" : parent_order_total_tax_value,\n}\n\nlet update_order_data = {\n    \"keys\" : [parent_order_detail.id],\n    \"data\" : parent_order_data\n}\n\n\nitems[0].json.new_order_data = new_order_data;\nitems[0].json.new_order_product_data = new_order_product_data;\nitems[0].json.parent_order_product_data = parent_order_product_data;\nitems[0].json.parent_order_item_ids_for_delete = item_ids_for_delete;\nitems[0].json.update_order_data = update_order_data;\nreturn items;"
      },
      "name": "Prepare Order Data2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        -180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Prepare Order Data\"].json[\"parent_order_product_data\"].length}}",
              "operation": "larger",
              "value2": "={{0}}"
            }
          ]
        }
      },
      "name": "Check Parent Order Product Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1160,
        900
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_items_table_name\"]}}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Prepare Order Data\"].json[\"parent_order_product_data\"]}}"
      },
      "name": "Create Parent Order Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1460,
        880
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/{{$node[\"Globals\"].json[\"order_table_name\"]}}/{{$node[\"Check for Order ID\"].json[\"data\"][0][\"id\"]}}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Prepare Order Data\"].json[\"parent_order_data\"]}}"
      },
      "name": "Update Parent Order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        920,
        1180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let order_items = $node[\"Get Order Items\"].json.data;\n\nlet order_item_ids = [];\n\norder_items.forEach((order_item,index)=>{\n  order_item_ids.push(order_item.id);\n});\n\nitems[0].json.order_item_ids = order_item_ids;\n\nreturn items;\n"
      },
      "name": "Get Order Item IDs1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -560,
        660
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "DELETE",
        "url": "=https://noirqa.shakedeal.com/items/sds_order_items/[56,57]",
        "options": {}
      },
      "name": "Remove Old Order Items2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -340,
        660
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "90",
          "name": "Simens Order Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let returnItems = [];\n\nlet message = [];\n\nreturnItems.push({\n  json:{\n    message\n  }\n})\n\nreturn returnItems\n"
      },
      "name": "Empty ",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -40,
        580
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-05-26T05:58:26.430Z"
}