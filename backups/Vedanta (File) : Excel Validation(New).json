{
  "active": true,
  "connections": {
    "Nextcloud": {
      "main": [
        [
          {
            "node": "Get All Sheet Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Validate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Data": {
      "main": [
        [
          {
            "node": "Create PO Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cloud Files": {
      "main": [
        [
          {
            "node": "Combine Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Items": {
      "main": [
        [
          {
            "node": "IF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global": {
      "main": [
        [
          {
            "node": "Get Cloud Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Sheet Name": {
      "main": [
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create PO Data": {
      "main": [
        [
          {
            "node": "Combine Data For Mozart Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Increment Record Count",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get PDF File": {
      "main": [
        [
          {
            "node": "Upload PO to mozart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data For Mozart Upload": {
      "main": [
        [
          {
            "node": "Check Record Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Record Exist": {
      "main": [
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment Record Count": {
      "main": [
        [
          {
            "node": "Get PDF File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Loop": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Fomat Data To Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fomat Data To Loop": {
      "main": [
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move All Files": {
      "main": [
        [
          {
            "node": "Wait for checking po status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move File": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Move File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF2": {
      "main": [
        [
          {
            "node": "Nextcloud",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function to get the file name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the PO Pdf": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get the file name": {
      "main": [
        [
          {
            "node": "Get the PO Pdf",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload PO to mozart": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FunctionItem": {
      "main": [
        [
          {
            "node": "IF5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "FunctionItem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to send PO Data": {
      "main": [
        [
          {
            "node": "Validate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF3": {
      "main": [
        [
          {
            "node": "Move All Files",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp1": {
      "main": [
        [
          {
            "node": "Wait for checking po status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for checking po status": {
      "main": [
        [
          {
            "node": "Get the PO numbers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the PO numbers": {
      "main": [
        [
          {
            "node": "Get the po numbers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construct the table": {
      "main": [
        [
          {
            "node": "IF4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF4": {
      "main": [
        [
          {
            "node": "Send Email1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF5": {
      "main": [
        [
          {
            "node": "NoOp3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function to send PO Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Global",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the po errors": {
      "main": [
        [
          {
            "node": "Construct the table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the po numbers": {
      "main": [
        [
          {
            "node": "Get the po errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-04-04T10:13:43.202Z",
  "id": "280",
  "name": "Vedanta (File) : Excel Validation(New)",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        60,
        260
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Vedanta-PO-Upload-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1300,
        280
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "binaryPropertyName": "=data",
        "options": {
          "sheetName": "={{$node[\"Get All Sheet Name\"].json[\"name\"]}}"
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        1740,
        280
      ]
    },
    {
      "parameters": {
        "functionCode": "let formatedData=[];\nlet poItems=[];\nlet errorData=[];\nlet filesData = $node[\"Combine Items\"].json.poData\n\nconst poColumns = {\n  \"deliveryDate\":[\"PO Item Delivery Date\"],\n  \"orderType\":[\"Order type\"],\n  \"poNumber\":[\"Purchasing Document\"],\n  \"poDate\":[\"Document Date\"],\n  \"srNo\":[\"Item\"],\n  \"materialCode\":[\"Material\"],\n  \"vendorEmail\":[\"Vendor email\"],\n  \"uom\":[\"UOM\"],\n  \"plant\":[\"Plant\"],\n  \"itemPrice\":[\"Item Price\"],\n  \"qtyOrdered\":[\"Order Quantity\"],\n  \"itemTaxPercentage\":[\"Tax Code\"],  \n  \"paymentTerms\":[\"Payment Terms\"],\n  \"buyer\":[\"Buyer\"],\n  \"operationAgent\":[\"Operation Agent\"],\n  \"nameOfSupplier\":[\"Supplier/Supplying Plant\"]\n};\n\n//Formatting\nitems.forEach((item, index) => { \n  let formatedObject={};\n  let entries = Object.entries(item.json)\n  entries.map( ([key, val] = entry) => {\n    if(key.includes(poColumns.deliveryDate)){\n      formatedObject.deliveryDate=val;\n    }\n    if(key.includes(poColumns.orderType)){\n      formatedObject.orderType=val.toString();\n    }\n    if(key.includes(poColumns.poNumber)){\n      formatedObject.poNumber=val.toString();\n    }\n    if(key.includes(poColumns.poDate)){\n      formatedObject.poDate=val.toString();\n    }\n    if(key.includes(poColumns.srNo)){\n      formatedObject.srNo=val.toString();\n    }\n    if(key.includes(poColumns.materialCode)){\n      formatedObject.materialCode=val.toString();\n    }\n    if(key.includes(poColumns.vendorEmail)){\n      formatedObject.vendorEmail=val.toString();\n    }\n    if(key.includes(poColumns.uom)){\n      formatedObject.uom=val.toString();\n    }\n    if(key.includes(poColumns.plant)){\n      formatedObject.plant=val.toString();\n    }\n    if(key.includes(poColumns.itemPrice)){\n      formatedObject.itemPrice=val.toString();\n    }\n    if(key.includes(poColumns.qtyOrdered)){\n      formatedObject.qtyOrdered=val.toString();\n    }\n    if(key.includes(poColumns.itemTaxPercentage)){\n      formatedObject.itemTaxPercentage=val.toString();\n    }\n    if(key.includes(poColumns.paymentTerms)){\n      formatedObject.paymentTerms=val.toString();\n    }\n    if(key.includes(poColumns.buyer)){\n      formatedObject.buyer=val.toString();\n    }\n    if(key.includes(poColumns.operationAgent)){\n      formatedObject.operationAgent=val.toString();\n    }\n    if(key.includes(poColumns.nameOfSupplier)){\n      formatedObject.nameOfSupplier=val.toString();\n    }\n  });  \n  formatedData.push(formatedObject);\n});\n\n//validating Data\nformatedData.forEach((item, index) => { \n  let errorMsgPO=\"\";\n  let rowCount=0;\n\n  let entries = Object.entries(item)\n  entries.map( ([key, val] = entry) => {\n    \n    if(key.includes(poColumns.deliveryDate) && !val){\n      errorMsgPO = errorMsgPO + \" Delivery Date required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.orderType) && !val){\n      errorMsgPO = errorMsgPO + \" Order Type required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.poNumber) && !val){\n      errorMsgPO = errorMsgPO + \" PO Number required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.poDate) && !val){\n      errorMsgPO = errorMsgPO + \" PO Date required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.srNo) && !val){\n      errorMsgPO = errorMsgPO + \" SR NO required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.materialCode) && !val & val.length < 10){\n      errorMsgPO = errorMsgPO + \" Material Code required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.vendorEmail) && !val){\n      errorMsgPO = errorMsgPO + \" Vendor Email required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.uom) && !val){\n      errorMsgPO = errorMsgPO + \" UOM required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.plant) && !val){\n      errorMsgPO = errorMsgPO + \" Plant required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.itemPrice) && !val){\n      errorMsgPO = errorMsgPO + \" Item Price required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.qtyOrdered) && !val){\n      errorMsgPO = errorMsgPO + \" QTY Ordered required \" + val + \", \" ;    \n    }\n     if(key.includes(poColumns.itemTaxPercentage) && !val){\n      errorMsgPO = errorMsgPO + \"Item Tax Percentage required \" + val + \", \" ;    \n    }\n    if(key.includes(poColumns.paymentTerms) && !val){\n      errorMsgPO = errorMsgPO + \" Payment Terms required \" + val + \", \" ;    \n    }    \n\n  });\n    \n\n  let errorindex = errorData.findIndex( element => {\n      if (element[\"po\"] === item.poNumber.toString().trim()) {\n        return true;\n      }\n  });\n  \n  if(errorindex==-1){\n    poItems=[];\n    let file = filesData.filter(fd=>fd.file_name.includes(item.poNumber.toString().trim()));\n    poItems.push(item);\n    errorData.push({\n      \"po\":item.poNumber.toString().trim(),\n      \"fileName\":file.length > 0 ? file[0].file_name : \"No-po/nopofile.pdf\",\n      \"error\":errorMsgPO,\n      \"rowCount\":1,\n      \"poItems\":poItems,\n      \"fileSize\":file.length > 0 ? file[0].file_size : 100\n      });\n  }\n  else{\n     errorData[errorindex][\"error\"]=errorData[errorindex][\"error\"]+errorMsgPO;\n     errorData[errorindex][\"rowCount\"]=errorData[errorindex][\"rowCount\"]+1;\n     poItems.push(item);\n     errorData[errorindex][\"poItems\"]=poItems;\n  }\n  \n});\n\nreturn errorData;"
      },
      "name": "Validate Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        440,
        540
      ]
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "path": "Vedanta-PO-Upload-qa/"
      },
      "name": "Get Cloud Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        740,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// return items;\nlet poFiles=[];\nlet excelFiles=[];\nlet poNumbers = [];\nitems.forEach((item) => {\n    const fullPath = item.json[\"path\"].split(\"/\");\n    const fileName = fullPath[fullPath.length - 1]\n    if(decodeURI(fileName) && decodeURI(fileName).includes(\".pdf\")){\n        poNumbers.push(decodeURI(fileName).split(\".\")[0]);\n        poFiles.push({\"file_name\":decodeURI(fileName),\"file_size\":item.json[\"contentLength\"]});\n    }\n    if(decodeURI(fileName).includes(\".xlsx\")){\n        excelFiles.push({\"file_name\":decodeURI(fileName)});\n    }\n});\n\nreturn [{\n     json: {\n         poData: poFiles,\n         excelData:excelFiles,\n         pos : poNumbers\n    }\n}];"
      },
      "name": "Combine Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        920,
        320
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "vedanta_mozart_url",
              "value": "https://vedanta.mozart.shakedeal.com/"
            }
          ],
          "number": [
            {
              "name": "Z0"
            },
            {
              "name": "Z1",
              "value": 5
            },
            {
              "name": "Z2",
              "value": 12
            },
            {
              "name": "Z3",
              "value": 18
            },
            {
              "name": "Z4",
              "value": 28
            },
            {
              "name": "Z5",
              "value": 5
            },
            {
              "name": "Z6",
              "value": 12
            },
            {
              "name": "Z7",
              "value": 18
            },
            {
              "name": "Z8",
              "value": 28
            }
          ]
        },
        "options": {}
      },
      "name": "Global",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        560,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let vedantaUrl = $node[\"Global\"].json[\"vedanta_mozart_url\"];\nlet binaries = {};\nconst { read: xlsxRead } = require('xlsx'); \nconst data = items[0].binary.data; \nworkbook = xlsxRead(data.data); \nbinaries[\"data\"] = data;\nreturn workbook.SheetNames.map((s) => { return { json: { name: s, dmsUrl : vedantaUrl} ,binary : binaries} });"
      },
      "name": "Get All Sheet Name",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        280
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_excel_pos",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "error",
              "value": "={{$node[\"Validate Data\"].json[\"error\"]}}"
            },
            {
              "name": "total_rows",
              "value": "={{$node[\"Validate Data\"].json[\"rowCount\"]}}"
            },
            {
              "name": "po_num",
              "value": "={{$node[\"Validate Data\"].json[\"po\"]}}"
            },
            {
              "name": "po_details",
              "value": "={{$node[\"Validate Data\"].json[\"poItems\"]}}"
            },
            {
              "name": "file_name",
              "value": "={{$node[\"Validate Data\"].json[\"fileName\"]}}"
            },
            {
              "name": "file_size",
              "value": "={{$node[\"Validate Data\"].json[\"fileSize\"]}}"
            },
            {
              "name": "po_status",
              "value": "={{$node[\"Validate Data\"].json[\"error\"]?\"error\":\"not_uploaded\"}}"
            }
          ]
        }
      },
      "name": "Create PO Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        740,
        540
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Start Loop\"].json[\"iteration\"] < $node[\"Start Loop\"].json[\"poCount\"]}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        540,
        1040
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Vedanta-PO-Upload-qa/{{$node[\"Combine Data For Mozart Upload\"].json[\"poData\"][$node[\"Start Loop\"].json[\"iteration\"]][\"file_name\"]}}"
      },
      "name": "Get PDF File",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        940,
        740
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "let poData=[];\nitems.forEach((item) => {  \n    poData.push(\n        {\n            \"po_num\":item.json.data.po_num,\n            \"file_name\":item.json.data.file_name,\n            \"file_size\":item.json.data.file_size,\n            \"error\":item.json.data.error\n        });    \n});\n\nreturn [{\n     json: {\n         poData: poData,\n    }\n}];"
      },
      "name": "Combine Data For Mozart Upload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        920,
        540
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "iteration"
            },
            {
              "name": "poCount",
              "value": "={{$node[\"Combine Data For Mozart Upload\"].json[\"poData\"].length}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Check Record Exist",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1100,
        540
      ]
    },
    {
      "parameters": {
        "values": {
          "number": [
            {
              "name": "iteration",
              "value": "={{$node[\"Start Loop\"].json[\"iteration\"]+1}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Increment Record Count",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        740,
        740
      ]
    },
    {
      "parameters": {},
      "name": "Start Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        360,
        1040
      ]
    },
    {
      "parameters": {
        "amount": 15,
        "unit": "seconds"
      },
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        2040,
        860
      ],
      "webhookId": "d8342177-e337-45de-a634-88d41b09f3e2"
    },
    {
      "parameters": {
        "functionCode": "return [{\n  \"iteration\": $node[\"Increment Record Count\"].json[\"iteration\"],\n  \"poCount\": $node[\"Increment Record Count\"].json[\"poCount\"]\n}];"
      },
      "name": "Fomat Data To Loop",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2320,
        860
      ]
    },
    {
      "parameters": {
        "operation": "move",
        "path": "=Vedanta-PO-Upload-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}",
        "toPath": "=Vedanta-Old-Uploaded-PO-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Move All Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1020,
        1120
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "move",
        "path": "=Vedanta-PO-Upload-qa/{{$node[\"Combine Data For Mozart Upload\"].json[\"poData\"][$node[\"Start Loop\"].json[\"iteration\"]][\"file_name\"]}}",
        "toPath": "=Vedanta-Old-Uploaded-PO-qa/{{$node[\"Combine Data For Mozart Upload\"].json[\"poData\"][$node[\"Start Loop\"].json[\"iteration\"]][\"file_name\"]}}"
      },
      "name": "Move File",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1860,
        880
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$node[\"Combine Data For Mozart Upload\"].json[\"poData\"][$node[\"Start Loop\"].json[\"iteration\"]][\"file_name\"] == \"No-po/nopofile.pdf\"}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1520,
        740
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1840,
        720
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Combine Items\"].json[\"excelData\"].length?true:false}}"
            }
          ]
        }
      },
      "name": "IF2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1100,
        340
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Vedanta-PO-Upload-qa/{{$node[\"Function to get the file name\"].json[\"po_name\"]}}"
      },
      "name": "Get the PO Pdf",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1500,
        500
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let poData=[];\nlet pdfFiles = $node[\"Combine Items\"].json[\"poData\"];\npdfFiles.forEach((item,index) => {  \n    if(item.file_name){\n        poData.push({\n        json:{\n            \"po_name\":item.file_name,\n            \"index\":index\n        }\n    }\n        \n    );\n    }\n        \n});\n\nreturn poData"
      },
      "name": "Function to get the file name",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1300,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://sdqa.mozart.shakedeal.com/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "input_file:data"
      },
      "name": "Upload PO to mozart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1100,
        740
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const pdf = require('pdf-parse');\nlet product_name = [];\nlet product_code=[];\nlet product_quantity=[];\nlet material_description=[];\nlet vendor_name=[];\nlet vendor_phone=[];\nlet vendor_companyName=[];\nlet vendor_email=[];\nlet vendor_adress=[];\nlet vendor_gstin = [];\nlet vendor_payment_terms = [];\nlet product_deliverDate=[];\nlet productvalueWithTax=[];\nlet hsn_code = [];\nlet uom = [];\nlet plant = [];\nlet taxes = [];\nlet taxValues = [];\nlet rates = [];\nlet productSubTotal = [];\nlet productDetails=[];\nlet po_number = \"\";\nlet po_date = \"\";\nlet po_value = 0;\nlet findParameters = [\"PO Number\",\"PO Date\"];\nlet aribaVendorId = [];\nlet taxPercentages = [];\nlet po_type =  \"\";\nlet excelHeaders = {\n  \"delivery_date\":\"Delivery Date\",\n  \"order_type\":\"Order type\",\n  \"po_number\":\"PO Number\",\n  \"po_date\":\"PO Date\",\n  \"sr_no\":\"Sr no.\",\n  \"material_code\":\"Material Code\",\n  \"vendor_name\":\"Vendor Name\",\n  \"vendor_code\":\"Vendor code\",\n  \"vendor_email\":\"Vendor email \",\n  \"vendor_contact\":\"Vendor contact\",\n  \"hsn\":\"HSN/SAC\",\n  \"uom\":\"UOM\",\n  \"plant\":\"Plant\",\n  \"gstin\":\"GST Identification Number (GSTIN)\",\n  \"rate\":\"Item Price\",\n  \"product_name\":\"Item Desc\",\n  \"qty\":\"Qty ordered\",\n  \"value\":\"Value (Excluding GST)\",\n  \"tax_percentage\":\"Item Tax %\",\n  \"tax_amount\":\"Item Tax Amount\",\n  \"total_value\":\"Total value \",\n  \"payment_terms\":\"Payment Terms Label\",\n  \"deliver_to_customer\":\"Deliver To Customer\"\n}\n\nfunction render_page(pageData) {\n  //check documents https://mozilla.github.io/pdf.js/\n  let render_options = {\n    //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.\n    normalizeWhitespace: false,\n    //do not attempt to combine same line TextItem's. The default value is `false`.\n    disableCombineTextItems: false,\n  };\n\n  return pageData.getTextContent(render_options).then(function (textContent) {\n    let lastY,\n      text = \"\";\n    for (let item of textContent.items) {\n      text += `\\n${item.str}`;\n    }\n    return text;\n  });\n}\n\nlet options = {\n  pagerender: render_page,\n  max: 200,\n};\n\nconst binaryData = Buffer.from(item.data, \"base64\");\nlet content = await pdf(binaryData, options);\nconst contentSubString =  content.text.substring(0,content.text.indexOf(\"APPENDIX I :\"));\nlet contentSubStringArray = contentSubString.split(\"\\n\");\nlet paginationFound = false;\nlet productNameFound = false;\nlet productFound = false;\nlet productName = \"\";\nlet vendorName = \"\";\nlet vendorEmail = \"\";\nlet vendorContact = \"\";\nlet vendorPaymentTerms = \"\";\nlet vendorGstin = \"\"\nlet vendorFound = false;\nlet vendorNameFound = false;\nlet vendorEmailFound = false;\nlet vendorContactFound = false\nlet vendorPaymentFound = false\nlet vendorGstinFound = false\nlet productSection = false;\nlet productIndex = 0;\n\n//Get the SUbString from DELIVERY SCHEDULE to Terms of Delivery to extract the product deliver date\nlet contentDeliveryScheduleSubString = content.text.substring(content.text.indexOf(\"DELIVERY SCHEDULE\"),content.text.indexOf(\"Terms of Delivery :\")).trim();\nlet dateSubString = contentDeliveryScheduleSubString.substring(contentDeliveryScheduleSubString.indexOf(\" 1\"));\nlet contentDeliveryScheduleSubStringArray = dateSubString.split(\"\\n\");\nlet deliverySchedulePagination = false\nlet incrementIndex= 5\nfor(i=4;i<contentDeliveryScheduleSubStringArray.length;i+=incrementIndex){\n      product_deliverDate.push(contentDeliveryScheduleSubStringArray[i].trim());\n      if(contentDeliveryScheduleSubStringArray[i+1]){\n        if(contentDeliveryScheduleSubStringArray[i+1].includes(\"Page\")){\n          product_deliverDate.push(contentDeliveryScheduleSubStringArray[i+21].trim())\n          i=i+21;\n        }\n      }\n      \n        //else if(contentDeliveryScheduleSubStringArray[i].includes(\"Date\")){\n      //   incrementIndex = 5\n      // }\n}\n\n//To check whether PO is routing or use and pay\nif(contentSubString.includes(\"Routing\")){\n  po_type = \"routing\";\n}else {\n  po_type = \"Use & Pay\"\n}\n//To check whether PO is routing or use and pay\n\n//Loop through the ContentSubstring and extract the po details\nfor(i=0;i<contentSubStringArray.length;i++){\n    if((contentSubStringArray[i].includes(\"Page\") || paginationFound || contentSubStringArray[i].includes(\"Specification\")) && productSection){\n      if(contentSubStringArray[i].includes(\"Specification\")){\n        paginationFound = false;\n      }else paginationFound = true;\n    }\n    else if(contentSubStringArray[i].includes(\"PO Number\")){\n      let splitPoString = contentSubStringArray[i+1].split(\":\");\n      po_number = splitPoString[1].trim();\n    }else if(contentSubStringArray[i].includes(\"PO Date\")){\n      let splitPoDateString = contentSubStringArray[i+1].split(\":\");\n      po_date = splitPoDateString[1].trim();\n    }else if(contentSubStringArray[i].includes(\"Total PO Value\")){\n      po_value = contentSubStringArray[i+1].split(\",\").join('').trim();\n      productSection = false\n    }\n    else if( !paginationFound && contentSubStringArray[i].includes(\"Item code\") && !contentSubStringArray[i-3].includes(\"PURCHASE ORDER CONTINUATION\")){\n      productIndex = contentSubStringArray[i+8].trim();\n      product_code.push(contentSubStringArray[i+9]);\n      plant.push(contentSubStringArray[i+10]);\n      uom.push(contentSubStringArray[i+11]);\n      product_quantity.push(contentSubStringArray[i+12].trim());\n      rates.push(contentSubStringArray[i+13].split(\",\").join(''));\n      productSubTotal.push(contentSubStringArray[i+14].split(\",\").join(''));\n      productSection = true;\n      productNameFound = true;\n      i=i+14;  \n    }else if(productSection && contentSubStringArray[i].includes(\"GSTIN\") && !(contentSubStringArray[i-1].includes(\"Payment Terms:\"))  && !contentSubStringArray[i+4].includes(\"CONFIRMATION/ACKNOWLEDGEMENT\") && !contentSubStringArray[i+2].includes(\"Total PO Value\")){\n      productFound = true;\n      i=i+1;\n    }\n    else if(productFound){\n      product_code.push(contentSubStringArray[i+1]);\n      plant.push(contentSubStringArray[i+2]);\n      uom.push(contentSubStringArray[i+3]);\n      product_quantity.push(contentSubStringArray[i+4].trim());\n      rates.push(contentSubStringArray[i+5].split(\",\").join(''));\n      productSubTotal.push(contentSubStringArray[i+6].split(\",\").join(''));\n      productNameFound = true;\n      productFound = false;\n      i=i+6\n    }else if(productNameFound){ \n      if(contentSubStringArray[i].includes(\"Vendor Details:\") || contentSubStringArray[i].includes(\"HSN Code\") || contentSubStringArray[i].includes(\"Vendor Name:\")){\n        if(contentSubStringArray[i].includes(\"Vendor Details:\") || contentSubStringArray[i].includes(\"Vendor Name:\")){\n          vendorFound = true;\n          vendorName = contentSubStringArray[i]\n        }else if(contentSubStringArray[i].includes(\"HSN Code\")){\n          let hsnCodeString = contentSubStringArray[i].split(\":\");\n          hsn_code.push(hsnCodeString[1].trim());\n        }\n        \n        productNameFound = false;\n        if(productName.includes(\"IN :Integrated GST\") || productName.includes(\"IN : State\") || productName.includes(\"IN : Central\") ){\n          let searchIndexParameter = \"\";\n          if(productName.includes(\"IN :Integrated GST\")){\n            searchIndexParameter = \"IN :Integrated GST\"\n          }else if(productName.includes(\"IN : State\")){\n            searchIndexParameter = \"IN : Central\"\n          }else searchIndexParameter = \"IN : Central\";\n          let result = productName.substring(productName.indexOf(searchIndexParameter));\n          taxPercentages.push(result.substring(0,result.indexOf(\")\")));\n          let getTaxValue = result.substring(result.indexOf(\")\")+1).trim().split(\" \")[0];\n          taxValues.push(getTaxValue);\n          productName = productName.replace(result.substring(result.indexOf(\")\")+1,0),'');\n          productName = productName.replace(getTaxValue,\"\")\n        }\n        product_name.push(productName);\n        productName = \"\";\n      }else{\n        productName = productName + contentSubStringArray[i]\n      }\n    }else if(!vendorFound && contentSubStringArray[i].includes(\"Vendor Details:\")){\n      vendorFound = true;\n    }\n    else if(vendorFound){\n      if(contentSubStringArray[i].includes(\"Email \")){\n        vendorNameFound = true;\n        vendorFound = false;\n        vendorEmail = contentSubStringArray[i].includes(\"Email ID:\")?contentSubStringArray[i].split(\":\")[1]:\"\"\n        let vendorNameString = vendorName.includes(\"-\")&&!vendorName.includes(\":\")?vendorName.split(\"-\"): vendorName.split(\":\")\n        if(vendorNameString[1].includes(\"IN :Integrated GST\")){\n          let result = vendorNameString[1].substring(vendorNameString[1].indexOf(\"IN :Integrated GST\"));\n          taxPercentages.push(result.substring(0,result.indexOf(\")\")));\n          let getTaxValue = result.substring(result.indexOf(\")\")+1).trim().split(\" \")[0];\n          taxValues.push(getTaxValue.split(\",\").join('').trim());\n        }\n        let extractVendorName = vendorNameString[1].includes(\"IN :Integrated\")?vendorNameString[1].substring(0,vendorNameString[1].indexOf(\"IN :Integrated\")):vendorNameString[1];\n        vendor_name.push(extractVendorName.trim());\n        vendorName = \"\";\n        \n      }else{\n        vendorName = vendorName + contentSubStringArray[i]\n      }\n    }\n    else if(vendorNameFound){\n      if(contentSubStringArray[i].includes(\"Contact Details\") || contentSubStringArray[i].includes(\"Contact Number:\")){\n        vendorNameFound = false;\n        vendorEmailFound = true;\n        vendorContact = contentSubStringArray[i]\n        let vendorEmailString = vendorEmail?vendorEmail.split(\":\"):contentSubStringArray[i-1].split(\":\");\n        let email = vendorEmail?vendorEmail.trim():vendorEmailString[1].trim()\n        if(email.includes(\"IN :Integrated GST\")){\n          let result = vendorEmailString[1].substring(vendorEmailString[1].indexOf(\"IN :Integrated GST\"));\n          taxPercentages.push(result.substring(0,result.indexOf(\")\")));\n          let getTaxValue = result.substring(result.indexOf(\")\")+1).trim().split(\" \")[0];\n          taxValues.push(getTaxValue);\n        }\n        let extractVendorEmail = email.includes(\"IN :Integrated\")?email.substring(0,email.indexOf(\"IN :Integrated\")):email;\n        extractVendorEmail.includes(\":\")?vendor_email.push(extractVendorEmail.trim().split(\":\")[1]):extractVendorEmail.includes(\"-\")?vendor_email.push(extractVendorEmail.trim().split(\"-\")[1]):vendor_email.push(extractVendorEmail.trim());\n        vendorEmail = \"\";\n      }\n      else{\n        vendorEmail = vendorEmail + contentSubStringArray[i];\n      }\n    }else if(contentSubStringArray[i].includes(\"IN :Integrated\") || contentSubStringArray[i].includes(\"IN : State\")){\n       let getTaxes = contentSubStringArray[i].includes(\"IN : State\")?parseFloat(contentSubStringArray[i+1].split(\",\").join('').trim())*2:contentSubStringArray[i+1].split(\",\").join('').trim()\n       taxValues.push(getTaxes??getTaxes)\n       taxPercentages.push(contentSubStringArray[i]);\n    }\n    \n    else if(vendorEmailFound){\n      if(contentSubStringArray[i].includes(\"Payment Terms:\")){\n        vendorEmailFound = false;\n        vendorContactFound = true\n        vendorPaymentTerms = contentSubStringArray[i]\n        vendor_phone.push(vendorContact.trim().split(\":\")[1])\n      }else {\n        vendorContact = vendorContact+contentSubStringArray[i]\n      }\n    }else if(vendorContactFound){\n      if(contentSubStringArray[i].includes(\"GSTIN:\")){\n        vendorContactFound = false;\n        vendorPaymentFound = true\n        vendorGstin = contentSubStringArray[i];\n        vendor_payment_terms.push(vendorPaymentTerms.trim().split(\":\")[1])\n      }else {\n        vendorPaymentTerms = vendorPaymentTerms + contentSubStringArray[i]\n      }\n    }\n    else if(vendorPaymentFound){\n      if(contentSubStringArray[i].includes(\"Ariba Vendor ID:\")){\n        vendorPaymentFound = false;\n        vendor_gstin.push(vendorGstin.trim().split(\":\")[1])\n      }else {\n        vendorGstin = vendorGstin + contentSubStringArray[i]\n      }\n    }\n    else if(contentSubStringArray[i].includes(\"HSN Code\")){\n      let hsnCodeString = contentSubStringArray[i].split(\":\");\n      //hsn_code.push(hsnCodeString[1].trim());\n    }else if(contentSubStringArray[i].includes(\"Ariba Vendor ID\")){\n      let aribaVendorIdString = contentSubStringArray[i+1].split(\"-\");\n      //aribaVendorId.push(aribaVendorIdString[1].trim());\n    }\n}\n\nproduct_code.forEach(function(item,index){\n  productDetails[index] = {};\n  productDetails[index].product_index = index;\n  productDetails[index].product_name =product_name[index] ;\n  productDetails[index].product_code=product_code[index];\n  productDetails[index].uom = uom[index];  \n  productDetails[index].hsn = hsn_code[index];\n  productDetails[index].product_quantity=product_quantity[index];\n  let productTotal = parseFloat(productSubTotal[index])+parseFloat(taxValues[index])\n  productvalueWithTax.push(productTotal)\n  productDetails[index].subTotal = productSubTotal[index];\n  productDetails[index].taxValue = taxValues[index];\n  productDetails[index].productvalueWithTax=productTotal;\n  productDetails[index].rate = rates[index];\n  productDetails[index].tax = taxPercentages[index].includes(\"State GST\")|| taxPercentages[index].includes(\"Central GST\")?parseFloat(taxPercentages[index].match(/[\\d\\.]+/))*2:parseFloat(taxPercentages[index].match(/[\\d\\.]+/));\n  //productDetails[index].description=material_description[index];\n  productDetails[index].product_delivery_date = product_deliverDate[index];\n  productDetails[index].plant = plant[index];\n  productDetails[index].isMapped = false;         \n})\n\nlet vendorDetails=[];\nvendor_name.forEach(function(item,index){\n  vendorDetails[index] = {};\n  vendorDetails[index].vendor_name=vendor_name[index];\n  vendorDetails[index].vendor_phone=vendor_phone[index];\n  vendorDetails[index].vendor_company=vendor_companyName[index];\n  vendorDetails[index].vendor_email=vendor_email[index];\n  vendorDetails[index].gstin = vendor_gstin[index];\n  vendorDetails[index].vendor_address=vendor_adress[index];\n  vendorDetails[index].ariba_vendor_id = aribaVendorId[index];\n})\nlet prodven=[];\nlet productData = {};\nif(vendor_name.length){\n      productDetails.forEach(function(product,index){\n          productData[excelHeaders[\"delivery_date\"]] = product[\"product_delivery_date\"];\n          productData[excelHeaders[\"order_type\"]] = po_type;\n          productData[excelHeaders[\"po_number\"]]= po_number;\n          productData[excelHeaders[\"po_date\"]]=po_date;\n          productData[excelHeaders[\"sr_no\"]]= product[\"product_index\"]+1;\n          productData[excelHeaders[\"material_code\"]]= product[\"product_code\"];\n          productData[excelHeaders[\"vendor_name\"]]= vendor_name.length>1?vendor_name[index]:vendor_name[0];\n          productData[excelHeaders[\"vendor_email\"]]= vendor_name.length>1?vendor_email[index]:vendor_email[0];\n          productData[excelHeaders[\"vendor_contact\"]]= vendor_name.length>1?vendor_phone[index]:vendor_phone[0];\n          productData[excelHeaders[\"hsn\"]] = product[\"hsn\"];\n          productData[excelHeaders[\"uom\"]] =  product[\"uom\"];\n          productData[excelHeaders[\"plant\"]]= product[\"plant\"];\n          productData[excelHeaders[\"gstin\"]] =  vendor_name.length>1?vendor_gstin[index]:vendor_gstin[0];\n          productData[excelHeaders[\"rate\"]] =  product[\"rate\"];\n          productData[excelHeaders[\"product_name\"]]= product[\"product_name\"];\n          productData[excelHeaders[\"qty\"]]= product[\"product_quantity\"];\n          productData[excelHeaders[\"value\"]] =  product[\"subTotal\"];\n          productData[excelHeaders[\"tax_percentage\"]]= product[\"tax\"];\n          productData[excelHeaders[\"tax_amount\"]]= product[\"taxValue\"];\n          productData[excelHeaders[\"total_value\"]]= product[\"productvalueWithTax\"];\n          productData[excelHeaders[\"payment_terms\"]]=vendor_name.length>1?vendor_payment_terms[index]:vendor_payment_terms[0];\n          productData[excelHeaders[\"deliver_to_customer\"]]=product[\"plant\"]\n        //prodven[index]={};\n        prodven.push(productData)\n        productData = {}\n        \n      })\n      item.productData = prodven\n}\n// if(vendor_name.length>0){\n//    items[0].json.order_type = \"routing\";\n\n// }else items[0].json.order_type = \"rfq\";\n\n// let max =product_deliverDate[0];\n\n// product_deliverDate.forEach(function(value,index){\n//        max = new Date(value) > new Date(max)? value: max;\n      \n\n\n// })\n\n// items[0].json.po_type = po_type;\n// items[0].json.max_date = max.split(\".\").reverse().join(\"-\"); \n\n// items[0].json.product_deliverDate = product_deliverDate;\n// //items[0].json.vendor_name = vendor_name;\n\n\n// //items[0].json.vendor_email = vendor_email;\n// //items[0].json.aribaVendorId = aribaVendorId;\n// items[0].json.products = productDetails;\n// //items[0].json.vendors = vendorDetails;\n// items[0].json.prodven = prodven;\n// items[0].json.taxValues = taxValues;\n// items[0].json.productSubTotal = productSubTotal;\n// //items[0].json.product_code = product_code;\n// //items[0].json.product_name = product_name;\n// //items[0].json.plant = plant;\n// items[0].json.uom = uom;\n// items[0].json.product_quantity = product_quantity;\n// items[0].json.rates = rates;\n// items[0].json.po_date = po_date; \n// items[0].json.po_number = po_number;\n// items[0].json.po_value = po_value;\n// items[0].json.productvalueWithTax = productvalueWithTax;\n// items[0].json.contentSubStringArray = contentSubStringArray\n// //items[0].json.contentDeliveryScheduleSubStringArray = contentDeliveryScheduleSubStringArray\n// items[0].json.taxPercentages =  taxPercentages\nreturn item[\"productData\"];"
      },
      "name": "FunctionItem",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1960,
        500
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "let results = [];\n\nfor (item of items) {\n    for (key of Object.keys(item.binary)) {\n        results.push({\n            json: {\n                fileName: item.binary[key].fileName,\n                data : item.binary[key].data\n            },\n            binary: {\n                data: item.binary[key],\n            }\n        });\n    }\n}\n\nreturn results;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1720,
        500
      ]
    },
    {
      "parameters": {
        "functionCode": "let returnItems = [];\nfor (item of items) {\n  let poData = item.json\n  poData.forEach(function(data,index){\n    returnItems.push({\n      json:data\n    })\n  })\n}\n\n//items[0].json.returnItems = returnItems\nreturn returnItems;"
      },
      "name": "Function to send PO Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2320,
        520
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/send-po",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "file_id",
              "value": "={{$node[\"Upload PO to mozart\"].json[\"data\"][\"id\"]}}"
            },
            {
              "name": "po_number",
              "value": "={{$node[\"Combine Data For Mozart Upload\"].json[\"poData\"][$node[\"Start Loop\"].json[\"iteration\"]][\"po_num\"]}}"
            },
            {
              "name": "env",
              "value": "qa"
            }
          ]
        }
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1280,
        740
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Combine Items\"].json[\"excelData\"].length?true:false}}"
            }
          ]
        }
      },
      "name": "IF3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        780,
        1180
      ]
    },
    {
      "parameters": {},
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1020,
        1340
      ]
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "seconds"
      },
      "name": "Wait for checking po status",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1440,
        1220
      ],
      "webhookId": "95ab3351-9546-4cd3-9c7c-d345ef72ea21",
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "let poNumbers=[];\nlet pdfFiles = $node[\"Combine Items\"].json[\"poData\"];\npdfFiles.forEach(function(file,index){\n  if(file.file_name && file.file_name != \"Readme.md\"){\n    let fileName = file.file_name.includes(\"PO_Printout_\")?file.file_name.replace(\"PO_Printout_\",''):file.file_name;\n    let replacePdf = fileName.replace(\".pdf\",'')\n    poNumbers.push(replacePdf)\n  }\n  \n})\nitems[0].json.pos= poNumbers\nreturn items;"
      },
      "name": "Get the PO numbers",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1720,
        1220
      ],
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "let uploadedPos = $node[\"Get the po numbers\"].json.data;\nlet poNumbers = $node[\"Combine Items\"].json[\"pos\"];\nlet poErrors = $node[\"Get the po errors\"].json.data;\nlet updateKeys = poErrors.map(poError=>poError.id);\nlet updatePoErrors = {\n  keys:updateKeys,\n  data:{\n    mail_sent:true\n  }\n};\n\nlet resultFilter = \n   poNumbers.filter(poNum=>\n     !uploadedPos.some(\n      data=> data.id=== poNum\n    )\n  );\nlet tableData = '';\nlet borderStyle = \"border: 1px solid black;border-collapse: collapse\"\nresultFilter.forEach(function(po,index){\n  let matchedPo = poErrors.filter(error=>error.po_number == po);\n  let products =matchedPo.length>0?matchedPo[0].product_onboarding.map(product=>product.id):\" \";\n  let vendors = matchedPo.length>0?matchedPo[0].vendor_onboarding_mails.map(vendor=>vendor.id):\" \"\n  tableData=tableData+\n      `<tr style='${borderStyle}'>`+\n      `<td style='${borderStyle}'>${index+1}</td>`+\n      `<td style='${borderStyle}'>${po}</td>`+\n      `<td style='${borderStyle}'>${products}</td>`+\n      `<td style='${borderStyle}'>${vendors}</td>`+\n      `</tr>`;\n})\nlet tableHtml = `<table  style=\"color:#000000;width: auto;border: 1px solid black;border-collapse: collapse;\">`+\n    `<tr style='background-color:#9BC2E6;border: 1px solid black;border-collapse: collapse'>`+\n    `<th style='${borderStyle}'>SL.No</th>`+\n    `<th style='${borderStyle}'>PO Number</th>`+\n    `<th style='${borderStyle}'>Missing Products</th>`+\n    `<th style='${borderStyle}'>Missing Vendors</th>`+\n    `</tr>${tableData}`+\n    `</table>`;\n\nitems[0].json.resultFilter = resultFilter\nitems[0].json.tableHtml= tableHtml;\nitems[0].json.tableData = tableData;\nitems[0].json.updatePoErrors=updatePoErrors;\nreturn items;"
      },
      "name": "Construct the table",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2180,
        1220
      ]
    },
    {
      "parameters": {
        "fromEmail": "=chidanand@shakedeal.com",
        "toEmail": "=sairam.reddy@shakedeal.com",
        "ccEmail": "=",
        "subject": "PO format not matched or product/vendor not exist",
        "html": "={{$node[\"Construct the table\"].json[\"tableHtml\"]}}",
        "options": {}
      },
      "name": "Send Email1",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2700,
        1080
      ],
      "credentials": {
        "smtp": {
          "id": "7",
          "name": "AWS SES Creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Construct the table\"].json[\"resultFilter\"].length>0?true:false}}"
            }
          ]
        }
      },
      "name": "IF4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2380,
        1220
      ]
    },
    {
      "parameters": {},
      "name": "NoOp2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2700,
        1360
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"FunctionItem\"].json[\"error\"]?true:false}}"
            }
          ]
        }
      },
      "name": "IF5",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2120,
        480
      ]
    },
    {
      "parameters": {},
      "name": "NoOp3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2320,
        360
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "extract-po",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        340,
        300
      ],
      "webhookId": "32d872d9-4b5e-42a6-84c6-7909de808800",
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_po_errors?filter={\"mail_sent\":{\"_eq\":false}}",
        "options": {}
      },
      "name": "Get the po errors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2040,
        1080
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_pos?filter={\"id\":{\"_in\":\"{{$node[\"Combine Items\"].json[\"pos\"]}}\"}}",
        "options": {}
      },
      "name": "Get the po numbers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1960,
        1220
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_po_errors",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Construct the table\"].json[\"updatePoErrors\"]}}"
      },
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2920,
        1080
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-09-15T12:00:58.038Z"
}