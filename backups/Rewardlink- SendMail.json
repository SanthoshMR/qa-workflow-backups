{
  "active": true,
  "connections": {
    "Function": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS SES": {
      "main": [
        [
          {
            "node": "Insert SES Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Mail Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zepto Item Lists": {
      "main": [
        [
          {
            "node": "Zepto Mail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Mail Content": {
      "main": [
        [
          {
            "node": "Zepto Item Lists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-12-14T12:49:39.208Z",
  "id": "391",
  "name": "Rewardlink- SendMail",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -360,
        360
      ]
    },
    {
      "parameters": {
        "functionCode": "/*let dataArray = $node[\"Webhook\"].json[\"body\"];\nlet resultArray = [];\nlet content_array = dataArray[\"modifiedContentArray\"];\nlet content_field = dataArray[\"content_data\"];\nlet attachmentPresent = dataArray[\"attachment\"] ? true : false;\n\nconsole.log(\"Content Array Length: \", content_array.length);\n\n// {{$node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"is_attachment_required\"]}}\nif ($node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"is_attachment_required\"] == true) {\n    let binaries = {};\n\n    for (const [index, item] of items.entries()) {\n        const filename = $node[\"HTTP Request\"].binary.data.fileName;\n\n        item.binary.data.fileName = `${filename}_${index}.pdf`;\n\n        for (let i = 0; i < content_array.length; i++) {\n            let currentItem = content_array[i];\n            let formattedDate1 = currentItem.enddate;\n            let amount = parseInt(currentItem.amount);\n            const date = new Date(formattedDate1);\n            const options = { day: '2-digit', month: 'short', year: 'numeric' };\n            const formattedDate = date.toLocaleDateString('en-US', options);\n\n            let content = content_field.replace(/{link}/g, currentItem.linkId)\n                .replace(/{img}/g, currentItem.imageSrc)\n                .replace(/{shakepelink}/g, currentItem.shakepelink)\n                .replace(/{enddate}/g, formattedDate)\n                .replace(/{amount}/g, amount)\n                .replace(/{name}/g, currentItem.name);\n\n            let binaryKey = `data_${index}_${i}.pdf`;\n\n            binaries[binaryKey] = item.binary.data;\n\n            let linkObj = {\n                content: content,\n                shakepelink: currentItem.shakepelink,\n                name: currentItem.name,\n                imageSrc: currentItem.imageSrc,\n                enddate: formattedDate,\n                email: currentItem.email,\n                subject: currentItem.subject,\n                campaign_name: currentItem.campaign_name,\n                from: currentItem.from,\n                linkId: currentItem.linkId,\n                is_attachment_required: currentItem.is_attachment_required,\n                attachment: currentItem.attachment,\n                binary_keys: binaryKey\n            };\n\n            resultArray.push({ json: linkObj, binary: { [binaryKey]: item.binary.data } });\n        }\n    }\n\n    console.log(\"Result Array Length: \", resultArray.length);\n\n    return resultArray;\n} else {\n    console.log(\"======\");\n    let modifiedContentArray1 = [];\n\n    for (let i = 0; i < content_array.length; i++) {\n        let currentItem = content_array[i];\n        let formattedDate1 = currentItem.enddate;\n        let amount = parseInt(currentItem.amount);\n        const date = new Date(formattedDate1);\n        const options = { day: '2-digit', month: 'short', year: 'numeric' };\n        const formattedDate = date.toLocaleDateString('en-US', options);\n\n        let content = content_field.replace(/{link}/g, currentItem.linkId)\n            .replace(/{img}/g, currentItem.imageSrc)\n            .replace(/{shakepelink}/g, currentItem.shakepelink)\n            .replace(/{enddate}/g, formattedDate)\n            .replace(/{amount}/g, amount)\n            .replace(/{name}/g, currentItem.name);\n\n        let linkObj = {\n            content: content,\n            shakepelink: currentItem.shakepelink,\n            name: currentItem.name,\n            imageSrc: currentItem.imageSrc,\n            enddate: formattedDate,\n            email: currentItem.email,\n            subject: currentItem.subject,\n            campaign_name: currentItem.campaign_name,\n            from: currentItem.from,\n            linkId: currentItem.linkId,\n            is_attachment_required: currentItem.is_attachment_required,\n            attachment: currentItem.attachment\n        };\n\n        modifiedContentArray1.push(linkObj);\n    }\n\n    console.log(\"Modified Content Array1 Length: \", modifiedContentArray1.length);\n\n    return { modifiedContentArray1 };\n}\n\n\n\n\n*/\n/*\nlet dataArray = $node[\"Webhook\"].json[\"body\"];\nlet resultArray = [];\nlet content_array = dataArray[\"modifiedContentArray\"];\nlet content_field = dataArray[\"content_data\"];\nlet attachmentPresent = dataArray[\"attachment\"] ? true : false;\n\nconsole.log(\"Content Array Length: \", content_array.length);\n\n// {{$node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"is_attachment_required\"]}}\nif ($node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"is_attachment_required\"] == true) {\n    let binaries = {};\n\n    for (const [index, item] of items.entries()) {\n        const filename = $node[\"HTTP Request\"].binary.data.fileName;\n\n        item.binary.data.fileName = `${filename}_${index}.pdf`;\n\n        for (let i = 0; i < content_array.length; i++) {\n            let currentItem = content_array[i];\n            let formattedDate1 = currentItem.enddate;\n            let amount = parseInt(currentItem.amount);\n            const date = new Date(formattedDate1);\n            const options = { day: '2-digit', month: 'short', year: 'numeric' };\n            const formattedDate = date.toLocaleDateString('en-US', options);\n\n            let content = content_field.replace(/{link}/g, currentItem.linkId)\n                .replace(/{img}/g, currentItem.imageSrc)\n                .replace(/{shakepelink}/g, currentItem.shakepelink)\n                .replace(/{enddate}/g, formattedDate)\n                .replace(/{amount}/g, amount)\n                .replace(/{name}/g, currentItem.name);\n\n            let binaryKey = `data_${index}_${i}.pdf`;\n\n            binaries[binaryKey] = item.binary.data;\n\n            let from_mail = currentItem.from;\n            from_mail = from_mail.split(\",\");\n\n            let linkObj = {\n                content: content,\n                shakepelink: currentItem.shakepelink,\n                name: currentItem.name,\n                imageSrc: currentItem.imageSrc,\n                enddate: formattedDate,\n                email: currentItem.email,\n                subject: currentItem.subject,\n                campaign_name: currentItem.campaign_name,\n                from: from_mail[0],\n                linkId: currentItem.linkId,\n                is_attachment_required: currentItem.is_attachment_required,\n                attachment: currentItem.attachment,\n                binary_keys: binaryKey\n            };\n\n            resultArray.push({ json: linkObj, binary: { [binaryKey]: item.binary.data } });\n        }\n    }\n\n    console.log(\"Result Array Length: \", resultArray.length);\n\n    return resultArray;\n} else {\n    console.log(\"======\");\nlet modifiedContentArray1 = [];\n\nfor (let i = 0; i < content_array.length; i++) {\n    let currentItem = content_array[i];\n    let formattedDate1 = currentItem.enddate;\n    let amount = parseInt(currentItem.amount);\n    const date = new Date(formattedDate1);\n    const options = { day: '2-digit', month: 'short', year: 'numeric' };\n    const formattedDate = date.toLocaleDateString('en-US', options);\n\n    let content = content_field.replace(/{link}/g, currentItem.linkId)\n        .replace(/{img}/g, currentItem.imageSrc)\n        .replace(/{shakepelink}/g, currentItem.shakepelink)\n        .replace(/{enddate}/g, formattedDate)\n        .replace(/{amount}/g, amount)\n        .replace(/{name}/g, currentItem.name);\n\n    let from_mail = currentItem.from;\n    from_mail = from_mail.split(\",\");\n\n    let linkObj = {\n        content: content,\n        shakepelink: currentItem.shakepelink,\n        name: currentItem.name,\n        imageSrc: currentItem.imageSrc,\n        enddate: formattedDate,\n        email: currentItem.email,\n        subject: currentItem.subject,\n        campaign_name: currentItem.campaign_name,\n        from: from_mail[0],\n        linkId: currentItem.linkId,\n        is_attachment_required: currentItem.is_attachment_required,\n        attachment: currentItem.attachment\n    };\n\n    modifiedContentArray1.push([{linkObj }]);\n}\n\nconsole.log(\"Modified Content Array1 Length: \", modifiedContentArray1.length);\n\nreturn modifiedContentArray1;\n}*/\n\nlet dataArray = $node[\"Webhook\"].json[\"body\"];\nlet resultArray = [];\nlet content_array = dataArray[\"modifiedContentArray\"];\nlet content_field = dataArray[\"content_data\"];\nlet attachmentPresent = dataArray[\"attachment\"] ? true : false;\n\nconsole.log(\"Content Array Length: \", content_array.length);\n\n// {{$node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"is_attachment_required\"]}}\nif ($node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"is_attachment_required\"] == true) {\n    let binaries = {};\n\n    for (const [index, item] of items.entries()) {\n        const filename = $node[\"HTTP Request\"].binary.data.fileName;\n\n        item.binary.data.fileName = `${filename}_${index}.pdf`;\n\n        for (let i = 0; i < content_array.length; i++) {\n            let currentItem = content_array[i];\n            let formattedDate1 = currentItem.enddate;\n            let amount = parseInt(currentItem.amount);\n            const date = new Date(formattedDate1);\n            const options = { day: '2-digit', month: 'short', year: 'numeric' };\n            const formattedDate = date.toLocaleDateString('en-US', options);\n            \n\n            let content = content_field.replace(/{link}/g, currentItem.linkId)\n                .replace(/{img}/g, currentItem.imageSrc)\n                .replace(/{shakepelink}/g, currentItem.shakepelink)\n                .replace(/{enddate}/g, formattedDate)\n                .replace(/{amount}/g, amount)\n                .replace(/{name}/g, currentItem.name);\n\n\n            let binaryKey = `data_${index}_${i}.pdf`;\n\n            binaries[binaryKey] = item.binary.data;\n\n            let from_mail = currentItem.from;\n            from_mail = from_mail.split(\",\");\n\n            let linkObj = {\n                content: content,\n                shakepelink: currentItem.shakepelink,\n                name: currentItem.name || '',\n                imageSrc: currentItem.imageSrc,\n                enddate: formattedDate,\n                email: currentItem.email,\n                subject: currentItem.subject,\n                campaign_name: currentItem.campaign_name,\n                from: from_mail[0],\n                linkId: currentItem.linkId,\n                is_attachment_required: currentItem.is_attachment_required,\n                attachment: currentItem.attachment,\n                binary_keys: binaryKey\n            };\n\n            resultArray.push({ json: linkObj, binary: { [binaryKey]: item.binary.data } });\n        }\n    }\n\n    console.log(\"Result Array Length: \", resultArray.length);\n\n    return resultArray;\n} else {\n    console.log(\"======\");\nlet modifiedContentArray1 = [];\n\nfor (let i = 0; i < content_array.length; i++) {\n    let currentItem = content_array[i];\n    let formattedDate1 = currentItem.enddate;\n    let amount = parseInt(currentItem.amount);\n    const date = new Date(formattedDate1);\n    // const options = { day: '2-digit', month: 'short', year: 'numeric' };\n    // const formattedDate = date.toLocaleDateString('en-US', options);\n\n\n    // Create a Date object from the input string\nconst inputDate = new Date(currentItem.enddate);\n\n// Extract day, month, and year components\nconst day = inputDate.getUTCDate();\nconst month = inputDate.getUTCMonth() + 1; // Months are zero-based, so we add 1\nconst year = inputDate.getUTCFullYear();\n\n// Format the date in the desired format (DD-MM-YYYY)\nconst formattedDate = `${day < 10 ? '0' : ''}${day}-${month < 10 ? '0' : ''}${month}-${year}`;\n\n    let content = content_field.replace(/{link}/g, currentItem.linkId)\n        .replace(/{img}/g, currentItem.imageSrc)\n        .replace(/{shakepelink}/g, currentItem.shakepelink)\n        .replace(/{enddate}/g, formattedDate)\n        .replace(/{amount}/g, amount)\n        .replace(/{name}/g, currentItem.name);\n\n    let subject = currentItem.subject;\n    subject = subject.replace(/{amount}/, amount);\n\n\n    let linkObj = {\n        content: content,\n        shakepelink: currentItem.shakepelink,\n        name: currentItem.name || '',\n        imageSrc: currentItem.imageSrc,\n        enddate: formattedDate,\n        email: currentItem.email,\n        subject: subject,\n        campaign_name: currentItem.campaign_name,\n        from: currentItem.from,\n        linkId: currentItem.linkId,\n        is_attachment_required: currentItem.is_attachment_required,\n        attachment: currentItem.attachment\n    };\n\n    modifiedContentArray1.push({ json: linkObj });\n}\n\n// Flatten the nested arrays\nmodifiedContentArray1 = modifiedContentArray1.flat();\n\nconsole.log(\"Modified Content Array1 Length: \", modifiedContentArray1.length);\n\nreturn modifiedContentArray1;\n}"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        820,
        320
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{$node[\"Function\"].json[\"from\"]}}",
        "toEmail": "= {{$node[\"Function\"].json[\"email\"]}}",
        "subject": "={{$node[\"Function\"].json[\"subject\"]}}",
        "html": "={{$node[\"Function\"].json[\"content\"]}}",
        "attachments": "={{$node[\"Function\"].json[\"binary_keys\"]}}",
        "options": {}
      },
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1040,
        320
      ],
      "credentials": {
        "smtp": {
          "id": "7",
          "name": "AWS SES Creds"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "154d1988-0513-40ed-b4a9-715db353307b",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -120,
        320
      ],
      "webhookId": "154d1988-0513-40ed-b4a9-715db353307b"
    },
    {
      "parameters": {
        "isBodyHtml": true,
        "subject": "={{$node[\"Item Lists\"].json[\"subject\"]}}",
        "body": "={{$node[\"Item Lists\"].json[\"content\"]}}",
        "fromEmail": "={{$node[\"Item Lists\"].json[\"from\"]}}",
        "toAddresses": [
          "={{$node[\"Item Lists\"].json[\"email\"]}}"
        ],
        "additionalFields": {
          "configurationSetName": "ses-qa"
        }
      },
      "name": "AWS SES",
      "type": "n8n-nodes-base.awsSes",
      "typeVersion": 1,
      "position": [
        1380,
        300
      ],
      "credentials": {
        "aws": {
          "id": "106",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://zeusqa.shakedeal.com/items/sd_delivery_logs",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "order_id",
              "value": "={{$node[\"Item Lists\"].json[\"campaign_name\"]}}"
            },
            {
              "name": "message_id",
              "value": "={{$node[\"AWS SES\"].json[\"SendEmailResponse\"][\"SendEmailResult\"][\"MessageId\"]}}"
            },
            {
              "name": "status",
              "value": "Send"
            },
            {
              "name": "recipient",
              "value": "={{$node[\"Item Lists\"].json[\"email\"]}}"
            },
            {
              "name": "source",
              "value": "=Campaigns"
            },
            {
              "name": "template"
            }
          ]
        }
      },
      "name": "Insert SES Log",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1580,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "81",
          "name": "SES Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"attachment\"]}}",
        "responseFormat": "file",
        "options": {}
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        560,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "102",
          "name": "Header Auth account 2(campaign qa)"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Webhook\"].json[\"body\"][\"mail_server\"]}}",
              "value2": "send_grid"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        100,
        320
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "modifiedContentArray1",
        "options": {}
      },
      "name": "Zepto Item Lists",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 1,
      "position": [
        620,
        660
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=https://api.zeptomail.com/v1.1/email",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Zepto Item Lists\"].json}}",
        "headerParametersJson": "={\"Authorization\":\"Zoho-enczapikey wSsVR60k80HyC6l9yDz5Ib1rm1wEBw6jHUsujFWp7CD6H/2Q8cc6lUDMBwOmTfhJE29pEjQWrbwrkBZU1mZaht8tmFwAACiF9mqRe1U4J3x17qnvhDzDXWpcmxeILYkIxwVtmWlhEMsr+g==\"}"
      },
      "name": "Zepto Mail",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        860,
        660
      ]
    },
    {
      "parameters": {
        "functionCode": "let dataArray = $node[\"Webhook\"].json[\"body\"];\nlet modifiedContentArray1 = [];\nlet content_array = $node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"];\nlet content_field = $node[\"Webhook\"].json[\"body\"][\"content_data\"];\n\nfor (let i = 0; i < content_array.length; i++) {\n  let content = content_field; // Copy the original content_data\n  let currentItem = content_array[i];\nlet formattedDate1 = currentItem.enddate;\nlet amount = parseInt(currentItem.amount);\n      const date = new Date(formattedDate1);\n  const options = { day: '2-digit', month: 'short', year: 'numeric' };\n  const formattedDate = date.toLocaleDateString('en-US', options);\n  // Replace placeholders in the content with corresponding values from the current item\n content = content.replace(/{link}/g, currentItem.linkId)\n    .replace(/{img}/g, currentItem.imageSrc)\n    .replace(/{shakepelink}/g, currentItem.shakepelink)\n    .replace(/{enddate}/g, formattedDate)\n    .replace(/{amount}/g, amount)\n    .replace(/{name}/g, currentItem.name);\n\nlet from_mail = currentItem.from;\nfrom_mail = from_mail.split(\",\");\n\nlet from_content = {\n    \"address\" : from_mail[0]\n}\nif(from_mail[1]){\n    from_content.name = from_mail[1]\n}\n\nlet linkObj = {\n        \"bounce_address\" : \"bounces@zep.shakepe.com\",\n        \"from\": from_content,\n        \"to\": [\n            {\n                \"email_address\": {\n                    \"address\": currentItem.email,\n                    \"name\": currentItem.name\n                }\n            }\n        ],\n        \"subject\": currentItem.subject,\n        \"htmlbody\" : content\n  };\n\n  if(currentItem.is_attachment_required == true){\n      linkObj.attachments = [\n          {\n              \"file_cache_key\": currentItem.attachment,\n              \"mime_type\": \"application/pdf\",\n              \"name\": \"Voucher-Redemption.pdf\"\n          }\n      ];\n  }\n \n  modifiedContentArray1.push(linkObj);\n}\n\nreturn { modifiedContentArray1 };\n\n\n\n"
      },
      "name": "Prepare Mail Content",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        380,
        660
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Webhook\"].json[\"body\"][\"modifiedContentArray\"][0][\"is_attachment_required\"]}}",
              "value2": "={{true}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        300,
        300
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2024-03-22T06:27:29.172Z"
}