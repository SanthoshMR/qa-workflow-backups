{
  "active": false,
  "connections": {
    "Cron": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the inventorty items other than sufficient qty": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Check for products in bpo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for products in bpo": {
      "main": [
        [
          {
            "node": "Get the latest vmi record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function1": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get the inventorty items other than sufficient qty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the latest vmi record": {
      "main": [
        [
          {
            "node": "Function1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-04-18T09:02:52.673Z",
  "id": "287",
  "name": "Vedanta : Cron for creating auto PO",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {}
          ]
        }
      },
      "name": "Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        440,
        320
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        620,
        320
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_inventory?filter={\"stock_status\":{\"_neq\":\"sufficient_quantity\"}}",
        "options": {}
      },
      "name": "Get the inventorty items other than sufficient qty",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        860,
        320
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let inventoryData = $node[\"Get the inventorty items other than sufficient qty\"].json[\"data\"];\nlet productIds = inventoryData.map(id=>id.product);\n\nitems[0].json.productIds = productIds;\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1060,
        320
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "value": "={{$node[\"Check for products in bpo\"].json[\"data\"]}} {{$node[\"Globals\"].json[\"po_prefix\"]}} {{$node[\"Get the latest vmi record\"].json[\"data\"]}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1700,
        320
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_bpos?filter={\"product\":{\"_in\":\"{{$node[\"Function\"].json[\"productIds\"]}}\"}}",
        "options": {}
      },
      "name": "Check for products in bpo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1280,
        320
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let bpoProducts = $node[\"Check for products in bpo\"].json[\"data\"];\nlet inventoryData = $node[\"Get the inventorty items other than sufficient qty\"].json[\"data\"];\nlet prodVen = [];\nlet poNumber = $node[\"Get the latest vmi record\"].json[\"data\"].length>0?$node[\"Get the latest vmi record\"].json[\"data\"][0][\"id\"]:$node[\"Globals\"].json[\"po_prefix\"]\ninventoryData.forEach(function(product,index){\n  let matchedBpoProduct = bpoProducts.filter(bpoProd=>bpoProd.product == product.product )\n  if(matchedBpoProduct.length>0){\n    let prodVenObj = {\n      product : product.product,\n      vendorEmail : matchedBpoProduct[0].vendor,\n      plant : product.plant\n    }\n    prodVen.push(prodVenObj)\n  }\n})\nuniqueArr = Object.create(null),\n    uniqueVendorPlantArr = prodVen.filter(o => {\n        var key = ['plant', 'vendorEmail'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\nuniqueVendorPlantArr.forEach(function(obj,index){\n  poNumber = (parseInt(poNumber)+1).toString();\n  \n  \n})\n\n\nitems[0].json.prodVen = prodVen;\nitems[0].json.uniqueArr = uniqueVendorPlantArr;\nitems[0].json.poNumber = poNumber;\nreturn items;"
      },
      "name": "Function1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        320
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "po_prefix",
              "value": "1000000001"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        740,
        140
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_vendor_pos?filter={\"consignment_type\":{\"_eq\":\"vmi\"}}&sort=-date_created&limit=1",
        "options": {}
      },
      "name": "Get the latest vmi record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1400,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-04-18T11:37:23.140Z"
}