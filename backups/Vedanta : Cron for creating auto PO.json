{
  "active": false,
  "connections": {
    "Cron": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the inventorty items other than sufficient qty": {
      "main": [
        [
          {
            "node": "Check for inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Get the buyers and ops",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for products in bpo": {
      "main": [
        [
          {
            "node": "Get BPO Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get the inventorty items other than sufficient qty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the latest vmi record": {
      "main": [
        [
          {
            "node": "Function to create vendor po",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the buyers and ops": {
      "main": [
        [
          {
            "node": "Get the emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the emails": {
      "main": [
        [
          {
            "node": "Check for buyers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for buyers": {
      "main": [
        [
          {
            "node": "Check for ops",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for ops": {
      "main": [
        [
          {
            "node": "Check for products in bpo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create vendor po": {
      "main": [
        [
          {
            "node": "Create auto vendor PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create auto vendor PO": {
      "main": [
        [
          {
            "node": "Update the inventorty item status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Get the latest vmi record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for inventory": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Get buyers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the inventorty item status": {
      "main": [
        [
          {
            "node": "Function for vendor pos html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to check inventory items not in BPO": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BPO Items": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for vendor pos html": {
      "main": [
        [
          {
            "node": "Send Email to OPs team on vendor po creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email to OPs team on vendor po creation": {
      "main": [
        [
          {
            "node": "Get buyers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get buyers": {
      "main": [
        [
          {
            "node": "Function to check inventory items not in BPO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-04-18T09:02:52.673Z",
  "id": "287",
  "name": "Vedanta : Cron for creating auto PO",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        120,
        120
      ]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {}
          ]
        }
      },
      "name": "Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        140,
        320
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        320,
        320
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_inventory?filter={\"_and\": [{\"stock_status\": {\"_neq\":\"sufficient_quantity\"}},{\"item_status\":{\"_neq\":\"po_generated\"}}]}&fields=*,plant.*",
        "options": {}
      },
      "name": "Get the inventorty items other than sufficient qty",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        720,
        320
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let inventoryData = $node[\"Get the inventorty items other than sufficient qty\"].json[\"data\"];\nlet productIds = inventoryData.map(id=>id.product);\nlet negligable_plants = JSON.parse($node[\"Globals\"].json[\"negligable_plants\"]);\nlet categoryIds = inventoryData.map(id=>negligable_plants.includes(id.plant.id)?id.plant.id:id.product.slice(0,2));\n\n\nitems[0].json.categoryIds = categoryIds;\nitems[0].json.negligable_plants = negligable_plants;\nitems[0].json.productIds = productIds;\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        300
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "value": "={{$node[\"Check for ops\"].json[\"data\"]}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1960,
        -40
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_bpos?filter={\"_and\": [{\"product\":{\"_in\":\"{{$node[\"Function\"].json[\"productIds\"]}}\"}},{\"validity_end\":{\"_gte\":\"$NOW()\"}}]}",
        "options": {}
      },
      "name": "Check for products in bpo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2300,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "po_prefix",
              "value": "000"
            },
            {
              "name": "negligable_plants",
              "value": "=[\"NIES\",\"BCES\",\"KBES\",\"ARES\",\"NKES\"]"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        500,
        320
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/items/sdm_vendor_pos?filter={\"consignment_type\":{\"_eq\":\"vmi\"}}&sort=-date_created&limit=1",
        "options": {}
      },
      "name": "Get the latest vmi record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2840,
        120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_product_buyer?filter={\"id\":{\"_in\":\"{{$node[\"Function\"].json[\"categoryIds\"]}}\"}}&fields=*.*",
        "options": {}
      },
      "name": "Get the buyers and ops",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1460,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let prodBuyerData = $node[\"Get the buyers and ops\"].json[\"data\"];\nlet buyerEmails = [];\nlet opsEmails = [];\nprodBuyerData.forEach(function(pbd,index){\n  if(pbd.additional_buyers){\n    pbd.additional_buyers.forEach(function(additionalBuyer,index){\n      buyerEmails.push(additionalBuyer.email);\n    })\n  }\n  buyerEmails.push(pbd.buyer.email);\n  opsEmails.push(pbd.operation_agent.email)\n})\n\nitems[0].json.buyerEmails = buyerEmails;\nitems[0].json.opsEmails = opsEmails;\nreturn items;"
      },
      "name": "Get the emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1660,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_buyers?filter={\"buyer\":{ \"email\": { \"_in\": \"{{$node[\"Get the emails\"].json[\"buyerEmails\"]}}\" }}}&fields=*.*",
        "options": {}
      },
      "name": "Check for buyers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1820,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_operation_agents?filter={\"operation_agent\":{ \"email\": { \"_in\": \"{{$node[\"Get the emails\"].json[\"opsEmails\"]}}\" }}}&fields=*.*",
        "options": {}
      },
      "name": "Check for ops",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2040,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let bpoProducts = $node[\"Get BPO Items\"].json[\"data\"];\nlet inventoryData = $node[\"Get the inventorty items other than sufficient qty\"].json[\"data\"];\nlet prodVen = [];\nlet vendorPoObj = [];\nlet catBuyersOps = $node[\"Get the buyers and ops\"].json[\"data\"];\nlet buyers_data = $node[\"Check for buyers\"].json[\"data\"];\nlet operation_agent_data = $node[\"Check for ops\"].json[\"data\"];\nlet negligable_plants = JSON.parse($node[\"Globals\"].json[\"negligable_plants\"]);\nlet updateInventoryIds = [];\nlet poNumber = $node[\"Get the latest vmi record\"].json[\"data\"].length>0?$node[\"Get the latest vmi record\"].json[\"data\"][0][\"id\"]:$node[\"Globals\"].json[\"po_prefix\"];\ninventoryData.forEach(function(product,index){\n  let matchedBpoProduct = bpoProducts.filter(bpoProd=>bpoProd.product.id == product.product );\n  \n  if(matchedBpoProduct.length>0){\n    updateInventoryIds.push(product.id);\n    let lowestPriceProduct = matchedBpoProduct.reduce((prev, curr) => {\n      return prev.net_price < curr.net_price ? prev : curr;\n    });\n    let prodVenObj = {\n      id:lowestPriceProduct.bpo.sd_bpo_vedanta_ref,\n      product : product.product,\n      vendorEmail : lowestPriceProduct.bpo.vendor,\n      plant : product.plant.id,\n      plantGstin :product.plant.gst.substring(0,2),\n      uom : lowestPriceProduct.uom,\n      leadTime : product.lead_time,\n      reOrderQuantity : product.re_order_quantity,\n      tax:lowestPriceProduct.tax?lowestPriceProduct.tax:18,\n      hsn:lowestPriceProduct.hsn?lowestPriceProduct.hsn:\"12345678\",\n      rate : lowestPriceProduct.net_price,\n      bpo : lowestPriceProduct.bpo.sd_bpo_vedanta_ref\n    }\n    prodVen.push(prodVenObj)\n  }\n})\n\nlet updateInventotyObj = {\n  keys : updateInventoryIds,\n  data: {\n\t\titem_status: \"po_generated\"\n\t}\n}\nuniqueArr = Object.create(null),\n    uniqueVendorPlantArr = prodVen.filter(o => {\n        var key = ['plant', 'vendorEmail'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\nuniqueVendorPlantArr.forEach(function(obj,index){\n  console.log(\"----------po number\",poNumber)\n  let poIntergerPart = $node[\"Get the latest vmi record\"].json[\"data\"].length>0?poNumber.match(/\\d+/g).map(str => parseInt(str, 10)).join(\"\").substring(2):poNumber;\n  console.log(\"----------poIntergerPart\",poIntergerPart,);\n  poNumber = (parseInt(poIntergerPart)+1).toString().padStart(3, '0');\n  let matchedProduct = prodVen.filter(pv=>obj.plant == pv.plant && obj.vendorEmail == pv.vendorEmail);\n  let delivery_dates = [];\n  let poItems = [];\n  let net_po_value = matchedProduct.reduce((total,mp)=>parseFloat(mp.rate)*parseFloat(mp.reOrderQuantity)+ total, 0);\n  let po_value = matchedProduct.reduce((total,mp)=>parseFloat(mp.rate)*parseFloat(mp.reOrderQuantity)+(parseFloat(mp.rate)*parseFloat(mp.reOrderQuantity)*mp.tax)/100+ total, 0);\n  let buyers = [];\n  let ops = [];\n  let buyerEmails = [];\n  let opsEmails = [];\n  if(negligable_plants.includes(obj.plant)){\n    let getCatBuy = catBuyersOps.filter(cbo=>cbo.id == obj.plant);\n    if(getCatBuy[0].additional_buyers){\n      getCatBuy[0].additional_buyers.forEach(function(ab,index){\n        buyerEmails.push(ab.email);\n      })\n    }\n    buyerEmails.push(getCatBuy[0].buyer.email)\n    opsEmails.push(getCatBuy[0].operation_agent.email)\n  }else {\n    let catBuy = catBuyersOps.filter(cbo=>cbo.id == obj.product.slice(0,2));\n    if(catBuy[0].additional_buyers){\n      catBuy[0].additional_buyers.forEach(function(ab,index){\n        catBuy.push(ab.email);\n      })\n    }\n    buyerEmails.push(catBuy[0].buyer.email)\n    opsEmails.push(catBuy[0].operation_agent.email)\n  }\n  let uniqueBuyerArr = buyerEmails.filter((value, index) => {\n    return buyerEmails.indexOf(value) === index;\n  });\n  let uniqueOpsArr = opsEmails.filter((value, index) => {\n    return opsEmails.indexOf(value) === index;\n  });\n\n  uniqueOpsArr.forEach(function(ops_email,index){\n    let get_ops_id =  operation_agent_data.filter(oad=>oad.operation_agent.email == ops_email);\n    ops[index]={};\n    ops[index].sdm_operation_agents_id = get_ops_id[0].id;\n  })\n  uniqueBuyerArr.forEach(function(buyer_email,index){\n    let get_buyer_id =  buyers_data.filter(bd=>bd.buyer.email == buyer_email);\n    buyers[index]={};\n    buyers[index].sdm_buyers_id = get_buyer_id[0].id;\n  })\n  matchedProduct.forEach(function(mp,index){\n    let timeLead = parseFloat(mp.leadTime);\n    let numDaysToAdd = timeLead - (timeLead*0.2);\n    let today = new Date();\n    let resultDate = new Date(today);\n    resultDate.setDate(today.getDate() + parseFloat(numDaysToAdd));\n    delivery_dates.push(resultDate);\n    let net_price = mp.reOrderQuantity * mp.rate;\n    poItems[index] = {};\n    poItems[index].id = `${poNumber}-${index+1}`;\n    poItems[index].product = mp.product;\n    poItems[index].vendor =  mp.vendorEmail;\n    poItems[index].net_price = net_price;\n    poItems[index].gross_price = net_price+(net_price*mp.tax)/100 ;\n    poItems[index].requested_qty = mp.reOrderQuantity;\n    poItems[index].delivery_date = new Date(resultDate).toISOString();\n    poItems[index].unit_price = mp.rate;\n    poItems[index].tax_percentage = mp.tax;\n    poItems[index].uom = mp.uom;\n    poItems[index].plant = mp.plant;\n    poItems[index].hsn = mp.hsn;\n  })\n  let maxDate = new Date(\n  Math.max(\n    ...delivery_dates.map(element => {\n      return new Date(element);\n      }),\n    ),\n  );\n  vendorPoObj[index]={};\n  vendorPoObj[index].vendor = obj.vendorEmail;\n  vendorPoObj[index].id = `SD${obj.plant}${obj.plantGstin}${poNumber}`;\n  vendorPoObj[index].po_date = new Date().toISOString();\n  vendorPoObj[index].po_status = \"draft\";\n  vendorPoObj[index].po_value = po_value;\n  vendorPoObj[index].net_po_value = net_po_value;\n  vendorPoObj[index].po_type = \"use_and_pay\";\n  vendorPoObj[index].po_deliver_date = new Date(maxDate).toISOString();\n  vendorPoObj[index].po_items = poItems;\n  vendorPoObj[index].buyers = buyers;\n  vendorPoObj[index].operation_agents = ops;\n  vendorPoObj[index].vendor_bpo = obj.id;\n  vendorPoObj[index].consignment_type = \"vmi\";\n})\n\nitems[0].json.updateInventotyObj = updateInventotyObj;\nitems[0].json.prodVen = prodVen;\nitems[0].json.uniqueArr = uniqueVendorPlantArr;\nitems[0].json.poNumber = poNumber;\nitems[0].json.vendorPoObj = vendorPoObj;\nreturn items;"
      },
      "name": "Function to create vendor po",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3040,
        120
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_pos?fields=*.*",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create vendor po\"].json[\"vendorPoObj\"]}}"
      },
      "name": "Create auto vendor PO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3220,
        120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_inventory",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create vendor po\"].json[\"updateInventotyObj\"]}}"
      },
      "name": "Update the inventorty item status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3420,
        120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Get BPO Items\"].json[\"data\"].length>0?true:false}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2560,
        300
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3080,
        520
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Get the inventorty items other than sufficient qty\"].json[\"data\"].length>0?true:false}}"
            }
          ]
        }
      },
      "name": "Check for inventory",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        960,
        320
      ]
    },
    {
      "parameters": {},
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1300,
        500
      ]
    },
    {
      "parameters": {
        "functionCode": "let bpoItems = $node[\"Get BPO Items\"].json[\"data\"];\nlet inventoryItems = $node[\"Get the inventorty items other than sufficient qty\"].json[\"data\"];\nlet mozartUrl = $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"];\nlet buyerEmails = [];\nlet buyers = $node[\"Get buyers\"].json[\"data\"];\nbuyers.forEach(function(buyer,index){\n  if(buyer.buyer){\n    buyerEmails.push(buyer.buyer.email)\n  }\n})\nlet tableData = '';\nlet borderStyle = \"border: 1px solid black;border-collapse: collapse\"\nlet resultFilter = \n   inventoryItems.filter(product=>\n     !bpoItems.some(\n      data=> data.product.id === product.product \n    )\n  );\nresultFilter.forEach(function(item,index){\n  let link = `${mozartUrl}/admin/content/sdm_inventory/${item.id}`\n  tableData=tableData+\n      `<tr style='${borderStyle}'>`+\n      `<td style='${borderStyle}'>${item.product}</td>`+\n      `<td style='${borderStyle}'>${item.current_stock}</td>`+\n      `<td style='${borderStyle}'>${item.re_order_level}</td>`+\n      `<td style='${borderStyle}'><a href=${link}>click here</a></td>`+\n      `</tr>`;\n})\nlet tableHtml = `<table  style=\"color:#000000;width: auto;border: 1px solid black;border-collapse: collapse;\">`+\n    `<tr style='background-color:#dedfe0;border: 1px solid black;border-collapse: collapse'>`+\n    `<th style='${borderStyle}'>Material Code</th>`+\n    `<th style='${borderStyle}'>Quantity Available</th>`+\n    `<th style='${borderStyle}'>Reorder Level</th>`+\n    `<th style='${borderStyle}'>Check details</th>`+\n    `</tr>${tableData}`+\n    `</table>`;\n\nitems[0].json.tableHtml = tableHtml\nitems[0].json.resultFilter = resultFilter;\nitems[0].json.buyerEmails= buyerEmails;\nreturn items;"
      },
      "name": "Function to check inventory items not in BPO",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3800,
        380
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function to check inventory items not in BPO\"].json[\"resultFilter\"].length>0?true:false}}"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4080,
        380
      ]
    },
    {
      "parameters": {
        "fromEmail": "handyalasairam9177@gmail.com",
        "toEmail": "sairam.reddy@shakedeal.com,bijan.krishna@shakedeal.com",
        "ccEmail": "anjali.jain@shakedeal.com",
        "subject": "=Alert! VMI Material Inventory Below Reorder Level and Not Present in BPO.",
        "html": "=<p>Dear Team</p>\n<p>This is to alert you that the following materials in our VMI inventory are below the reorder level and are not present in any blanket purchase order: </p>\n{{$node[\"Function to check inventory items not in BPO\"].json[\"tableHtml\"]}}\n<p>Please take necessary action to rectify this issue as soon as possible to avoid any potential delays in generating auto PO. </p>\n<p>Best regards</p>",
        "options": {}
      },
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        4420,
        180
      ],
      "credentials": {
        "smtp": {
          "id": "17",
          "name": "smtp(sai)creds"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4400,
        540
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_bpo_items?filter={\"_and\": [{\"product\":{\"_in\":\"{{$node[\"Function\"].json[\"productIds\"]}}\"}},{\"bpo\":{\"validity_end\":{\"_gte\":\"$NOW()\"}}}]}&fields=*.*",
        "options": {}
      },
      "name": "Get BPO Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2500,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let vendorPoData = $node[\"Create auto vendor PO\"].json[\"data\"];\nlet mozartUrl = $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"];\nlet tableData = '';\nlet borderStyle = \"border: 1px solid black;border-collapse: collapse\"\nvendorPoData.forEach(function(po,index){\n  let link = `${mozartUrl}/admin/content/sdm_vendor_pos/${po.id}`\n  tableData=tableData+\n      `<tr style='${borderStyle}'>`+\n      `<td style='${borderStyle}'>${po.id}</td>`+\n      `<td style='${borderStyle}'>${po.vendor.vendor_name}</td>`+\n      `<td style='${borderStyle}'><a href=${link}>Link to ${po.id}</a></td>`+\n      `</tr>`;\n})\nlet tableHtml = `<table  style=\"color:#000000;width: auto;border: 1px solid black;border-collapse: collapse;\">`+\n    `<tr style='background-color:#dedfe0;border: 1px solid black;border-collapse: collapse'>`+\n    `<th style='${borderStyle}'>PO No.</th>`+\n    `<th style='${borderStyle}'>Vendor Name</th>`+\n    `<th style='${borderStyle}'>Link to Verify</th>`+\n    `</tr>${tableData}`+\n    `</table>`;\n\nitems[0].json.tableHtml = tableHtml\nreturn items;"
      },
      "name": "Function for vendor pos html",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3620,
        120
      ]
    },
    {
      "parameters": {
        "fromEmail": "handyalasairam9177@gmail.com",
        "toEmail": "sairam.reddy@shakedeal.com,bijan.krishna@shakedeal.com",
        "ccEmail": "anjali.jain@shakedeal.com",
        "subject": "=Action Needed || Verify auto-created VMI POs",
        "html": "=<p>Dear Ops Team, </p>\n<p>Please find below the list of VMI POs that have been created for various vendors. We kindly request you to verify the PO details and update their status from \"Draft\" to \"Open\" to send them to the respective vendors.</p>\n{{$node[\"Function for vendor pos html\"].json[\"tableHtml\"]}}\n<p>Please use the links provided in the table to verify the respective POs.</p>\n<p>Thanks</p>",
        "options": {}
      },
      "name": "Send Email to OPs team on vendor po creation",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        3860,
        120
      ],
      "credentials": {
        "smtp": {
          "id": "17",
          "name": "smtp(sai)creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_buyers?fields=*.*",
        "options": {}
      },
      "name": "Get buyers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3600,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    }
  ],
  "settings": {
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-06-27T13:24:42.000Z"
}