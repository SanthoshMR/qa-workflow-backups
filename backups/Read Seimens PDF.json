{
  "active": true,
  "connections": {
    "Read PDF": {
      "main": [
        [
          {
            "node": "Post the file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Po Email": {
      "main": [
        [
          {
            "node": "Read PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting the seimens po details": {
      "main": [
        [
          {
            "node": "Get Details on Pincode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post the file": {
      "main": [
        [
          {
            "node": "Extracting the seimens po details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the products": {
      "main": [
        [
          {
            "node": "Get the po Item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Create products",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create products": {
      "main": [
        [
          {
            "node": "Function to construct PO obj",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the po Item": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Function to construct PO obj",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to construct PO obj": {
      "main": [
        [
          {
            "node": "Post to the Seimens Pos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Details on Pincode": {
      "main": [
        [
          {
            "node": "Get the products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-05-17T09:47:27.940Z",
  "id": "310",
  "name": "Read Seimens PDF",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -440,
        -60
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "attachment_00"
      },
      "name": "Read PDF",
      "type": "n8n-nodes-base.readPDF",
      "typeVersion": 1,
      "position": [
        -220,
        160
      ]
    },
    {
      "parameters": {
        "format": "resolved",
        "dataPropertyAttachmentsPrefixName": "attachment_0",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "Wait for Po Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        -400,
        160
      ],
      "alwaysOutputData": false,
      "credentials": {
        "imap": {
          "id": "88",
          "name": "IMAP account(tendul)"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nlet area = {\n    pos: {\n        id: '',\n        po_value: '',\n        po_net_value: '',\n        po_date: '',\n        po_delivery_date: '',\n        shipment_address: '',\n        street_address: '',\n        gstin: '',\n        city: '',\n        state: '',\n        country: '',\n        pincode: '',\n        ship_street_address: '',\n        ship_pincode: '',\n        ship_city: '',\n        ship_state: '',\n        ship_country: '',\n        poc_name: null,\n        poc_contact_number: null,\n        poc_email: null,\n        po_items: [],\n        products: []\n    },\n}\nlet integrated = [];\nlet poObj = {};\nlet numberFound = false;\n\nconst contentSubStringArray = $node[\"Read PDF\"].json[\"text\"];\nconst lines = contentSubStringArray.split('\\n');\nconsole.log(lines, \"lines\");\nlet gstin = 0\nfor (i = 0; i < lines.length; i++) {\n    if (lines[i].includes(\"PAN:\")) {\n        let splitPanString = lines[i].split(\":\");\n        pan = splitPanString[1];\n        area.pan = pan;\n    }\n    else if (lines[i].includes(\"GSTIN\")) {\n        let splitGstnString = lines[i];\n        const regex = /GSTIN:\\s*([A-Za-z0-9]{15})/;\n        gstin = splitGstnString.match(regex);\n        if (gstin) {\n            area.pos.gstin = gstin[1];\n        } else {\n            area.pos.gstin = null;\n        }\n    }\n    else if (lines[i].includes(\"Date\")) {\n        let splitDateString = lines[i].split(\":\");\n        date = splitDateString[1];\n        splitdate = date.split(\".\");\n        joindate = splitdate.reverse().join(\"-\");\n        area.date = joindate;\n        area.pos.po_date = area.date;\n    }\n    else if (lines[i].includes(\"Delivery date:\")) {\n        let splitDeliveryDateString = lines[i].split(\":\");\n        deliverydate = splitDeliveryDateString[1].trim(\" \");\n        splitdate = deliverydate.split(\".\");\n        joindeliverydate = splitdate.reverse().join(\"-\");\n        area.deliverydate = joindeliverydate;\n        area.pos.po_delivery_date = area.deliverydate;\n    }\n    else if (lines[i].includes(\"Order no\")) {\n        let splitOrderNoString = lines[i].split(\":\");\n        const regex = /-?\\d+(\\.\\d+)?/g;\n        order_no = splitOrderNoString[0].match(regex);\n        area.order_no = order_no[0];\n        if (area.order_no) {\n            area.pos.id = area.order_no;\n        }\n        else {\n            area.pos.id = '';\n            area.pos.po_items[0].id = '';\n        }\n    }\n    else if (lines[i].includes(\"ORG-ID\")) {\n        let splitOrgIdString = lines[i].split(\":\");\n        org_id = splitOrgIdString[0].slice(9, 16);\n        area.org_id = org_id;\n    }\n\n    // Shipping Addresss\n    else if (lines[i].includes(\"Shipping address\")) {\n        const startString = \"Shipping address\";\n        const endString = \"Please supply in accordance with the stipulated terms and conditions attached. Kindly send us your\";\n        const startIndex = lines.indexOf(startString);\n        const endIndex = lines.indexOf(endString);\n        const addr = /^(.*?)(?=\\b\\d{6}\\b)/;\n        shipping_address = lines.slice(startIndex + 1, endIndex).join();\n        area.shipping_address = shipping_address;\n        area.pos.shipment_address = area.shipping_address;\n        street_address = area.pos.shipment_address.match(addr);\n        area.pos.street_address = street_address[0].replace(/,/g, \" \").trim();\n        area.pos.ship_street_address = street_address[0].replace(/,/g, \" \").trim();\n        if (area.pos.shipment_address) {\n            const regex = /-?\\d+(\\.\\d+)?/g;\n            const pin = /\\b\\d{6}\\b/;\n            billing_address = area.pos.shipment_address.split(\" \").reverse(\"\");\n            splitBillingaddress = billing_address;\n            city = splitBillingaddress[0].split(\",\");\n            area.pos.city = city[0] || \"\";\n            area.pos.ship_city = city[0] || \"\";\n            state = splitBillingaddress[0].split(\",\");\n            country = splitBillingaddress[0].split(\",\");\n            area.pos.country = country[1] || \"\";\n            area.pos.ship_country = country[1] || \"\";\n            pincode = area.pos.shipment_address.match(pin);\n            area.pos.pincode = parseInt(pincode[0]) || 0;\n            area.pos.ship_pincode = parseInt(pincode[0]) || 0;\n\n\n        }\n    }\n\n    // POC NAME,EMAIL,PHONE NUMBER\n    else if (lines[i].includes(\"|||\") && lines[i].includes(\"Note regarding Invoice\") == false && lines[i].includes(\"to process your invoice for payment\") == false && lines[i].includes(\"copy of Excise invoice\") == false && lines[i].includes(\"Purchase order\") == false && lines[i].includes(\"ItemMaterial/Description\") == false && lines[i].includes(\"Supplier Product Number\") == false && lines[i].includes(\"Contact / Email:\") == false) {\n        if(!numberFound){\n\n            // POC_NUMBER\n            let splitphonestring = lines[i];\n            let phone_match = /(\\+\\d{2}\\s*\\(\\d+\\)\\s*\\d+|\\d{10})/;\n            let phone = splitphonestring.match(phone_match);\n            let poc_number = phone[0].replace(/\\D/g, \"\");\n            area.pos.poc_contact_number = parseInt(poc_number) ? parseInt(poc_number) : null;\n            \n            //POC_EMAIL \n            let regex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/;\n            let poc_email = lines[i].match(regex) ? lines[i].match(regex) : lines[i + 1].match(regex) ? lines[i + 1].match(regex) : lines[i + 2].match(regex) ? lines[i + 2].match(regex) : lines[i + 3].match(regex) ? lines[i + 3].match(regex) : lines[i + 4].match(regex) ? lines[i + 4].match(regex) : lines[i + 5].match(regex) ? lines[i + 5].match(regex) : lines[i + 6].match(regex) ? lines[i + 6].match(regex) : lines[i + 7].match(regex) ? lines[i + 7].match(regex) : lines[i + 8].match(regex) ? lines[i + 8].match(regex) : lines[i + 9].match(regex) ? lines[i + 9].match(regex) : lines[i + 10].match(regex) ? lines[i + 10].match(regex) : lines[i + 11].match(regex) ? lines[i + 11].match(regex) : lines[i + 12].match(regex) ? lines[i + 12].match(regex) : lines[i + 13].match(regex) ? lines[i + 13].match(regex) : lines[i + 14].match(regex) ? lines[i + 14].match(regex) : null;\n            area.pos.poc_email = (poc_email && poc_email.length > 0) ? poc_email[0] : null;\n\n            // POC_NAME\n            area.pos.poc_name = poc_email.length > 0 ? poc_email[0].split(\"@\")[0].replaceAll('.',\" \") : null;\n        }\n        numberFound = true;\n    }\n    // COMPANY NAME\n    else if (lines[i].includes(\"Company\")) {\n        const startString = \"Company\";\n        const endString = \"PAN:    \";\n        const startIndex = lines.indexOf(startString);\n        const endIndex = lines.indexOf(endString);\n        company = lines.slice(startIndex + 1, endIndex).join();\n        area.company = company;\n    }\n    //SUPPLIER NUMBER \n    else if (lines[i].includes(\"Your supplier no.\")) {\n        let splitSupplierNoString = lines[i].split(\":\");\n        const regex = /-?\\d+(\\.\\d+)?/g;\n        supplier_no = splitSupplierNoString[0].match(regex);\n        area.supplier_no = supplier_no;\n    }\n    // TERMS OF PAYMENT\n    else if (lines[i].includes(\"Terms of payment\")) {\n        let splitTermsofPaymentString = lines[i + 1].split(\":\");\n        terms_of_payment = splitTermsofPaymentString[0];\n        area.terms_of_payment = terms_of_payment;\n    }\n\n    // AMOUNT IN WORDS\n    else if (lines[i].includes(\"Amount in words:\")) {\n        let splitAmountInWordsString = lines[i + 1].split(\":\");\n        amount_in_words = splitAmountInWordsString[0];\n        area.amount_in_words = amount_in_words;\n    }\n    // TOTAL NET VALUE\n    else if (lines[i].includes(\"Total net value\")) {\n        if (lines[i].includes(\"Total net value incl. Tax INR \")) {\n            let splitTotalPONetValueString = lines[i].split(\" \");\n            const regex = /[\\d,]+(?:\\.\\d+)?/;\n            for (let element of splitTotalPONetValueString) {\n                const matches = element.match(regex);\n                if (matches) {\n                    const gross_price = matches[0].replace(\",\", '');\n                    if (gross_price) {\n                        area.pos.po_value = parseFloat(gross_price);\n                    } else {\n                        area.pos.gross_price = null;\n                    }\n                    break;\n                }\n            }\n        } else {\n            let splitTotalPOGrossValueString = lines[i].split(\" \");\n            const regex = /-?\\d+(\\.\\d+)?/g;\n            net_price = splitTotalPOGrossValueString[2].replace(\",\", '');\n            net_price = net_price.match(regex);\n            if (net_price) {\n                area.pos.po_net_value = parseFloat(net_price);\n            } else {\n                area.pos.po_net_value = '';\n            }\n        }\n    }\n\n    // MULTIPLE PO_ITEMS\n    else if (lines[i].includes(\"HSN/SAC\")) {\n        let length = integrated.length + 1\n        // PO_ITEMS\n        let obj = {\n            id: '',\n            products: [],\n            hsn: '',\n            uom: '',\n            product: '',\n            ordered_qty: '',\n            unit_price: '',\n            net_price: '',\n            tax_percentage: '',\n            tax_value: '',\n            description: '',\n        }\n        // PRODUCTS\n        let product_details = {\n            id: '',\n            product_name: '',\n            hsn: '',\n            //main_category:'',\n        }\n\n        // PRODUCT CODE - SKU CODE\n        let prod = \"\";\n        let split_product = lines.slice(i, i + 15)\n        split_product.map((e, j) => {\n            if (e.includes(\"Gross Price\") && prod == \"\") {\n                if (split_product[j + 1].includes(\"Integrated\") == false) {\n                    prod = split_product[j + 1];\n                    obj.product = prod;\n                    product_details.id = obj.product;\n                } else {\n                    prod = split_product[j + 2];\n                    obj.product = prod;\n                    product_details.id = obj.product;\n                }\n            } else if (e.includes(\"Integrated GST\") && prod == \"\") {\n                prod = split_product[j + 1];\n                obj.product = prod;\n                product_details.id = obj.product;\n            } else if (e.includes(\"#\") && prod == \"\") {\n                prod = split_product[j - 1];\n                obj.product = prod;\n                product_details.id = obj.product;\n            } else if (e.includes(\"<p>\") && prod == \"\") {\n                prod = split_product[j - 1];\n                obj.product = prod;\n                product_details.id = obj.product;\n            } else if (e.includes(\"<ul>\") && prod == \"\") {\n                prod = split_product[j - 1];\n                obj.product = prod;\n                product_details.id = obj.product;\n            }\n        });\n\n        // ID\n        let order = lines.find((e) => e.includes(\"Order no.\")).match(/\\d+/);\n        const itemno_id = /-?\\d+(\\.\\d+)?/g;\n        let serial = order + \"-\" + length\n        order_no = order[0].match(itemno_id);\n        obj.id = serial;\n        let pattern = /^\\d{4}/;\n        let serialno = pattern.test(lines[i]);\n        // SERIAL NUMBER\n        if (serialno && i != id + 1) {\n            let a = lines[i].split(\"\")\n            let itemno = a[0] + a[1] + a[2] + a[3]\n            let order = lines.find((e) => e.includes(\"Order no.\"))\n            let splitOrderNoString = order.split(\":\");\n            const itemno_id = /-?\\d+(\\.\\d+)?/g;\n            order_no = splitOrderNoString[0].match(itemno_id);\n            obj.id = order_no + '-' + itemno;\n        }\n\n        let productFound = false;\n        let integratedFound = false;\n        let descriptionFirstLineFound = false;\n        let descriptionEnded = false;\n\n        let net_value = lines.map((e, j) => {\n            if (j > i && j < i + 20 && e.includes(\"Gross Price PBXX\")) {\n                if (!productFound) {\n\n                    // NET PRICE \n                    net = lines[j].split(\" \").reverse();\n                    net_price = net[1];\n                    obj.net_price = parseFloat(net_price.replace(\",\", \"\"));\n\n                    // UNIT PRICE\n                    unit = lines[j].split(\" \").reverse();\n                    unit_price = unit.filter(element => element.trim() !== '');\n                    obj.unit_price = parseFloat(unit_price[1].replace(\",\", \"\"));\n                    productFound = true;\n                }\n                if (!integratedFound) {\n                    if (lines[j + 1].includes(\"Integrated\")) {\n                        tax_percent = lines[j + 1].split(\" \").reverse();\n                        const tax_reg = /(\\d+(,\\d+)?(\\.\\d+)?)/;\n                        tax_value = tax_percent[1].trim().match(tax_reg);\n                        obj.tax_value = parseFloat(tax_value[0].replace(\",\", \"\"));\n\n                        // TAX PERCENTAGE\n                        let splitGSTstring = lines[j + 1].split(\":\");\n                        const percent = /-?\\d+(\\.\\d+)?/g;\n                        tax_percentage = splitGSTstring[0].match(percent);\n                        obj.tax_percentage = parseFloat(tax_percentage[0]);\n                    }\n                    else {\n                        obj.tax_percentage = 0;\n                        obj.tax_value = 0;\n                    }\n                    integratedFound = true;\n                }\n            }\n\n            // MATERIAL DESCRIPTION   \n            if (j > i && j < i + 20 && (descriptionFirstLineFound && !descriptionEnded)) {\n                if (e.includes(\"|||\")) {\n                    descriptionEnded = true;\n                    material_description = material_description + lines[j];\n                    obj.description = material_description.slice(0, material_description.indexOf(\"|||\"));\n                }\n                else {\n                    material_description = material_description + lines[j];\n                }\n            }\n\n            if (j > i && j < i + 20 && !descriptionFirstLineFound && (e.includes(\"<p>\") || e.includes(\"<ul>\") || e.includes(\"#\"))) {\n                material_description = lines[j];\n                descriptionFirstLineFound = true;\n                if (e.includes(\"|||\")) {\n                    obj.description = material_description.slice(0, material_description.indexOf(\"|||\")) ? material_description.slice(0, material_description.indexOf(\"|||\")) : '';\n                    descriptionEnded = true;\n                }\n            }\n\n        });\n\n\n        // HSN\n        let splitHsnCodeString = lines[i].split(\":\");\n        hsn = splitHsnCodeString[1];\n        obj.hsn = hsn;\n        product_details.hsn = hsn;\n\n        // ORDERED QTY and UOM\n\n        // ORDERED QTY\n        if (lines[i].includes(\"HSN\")) {\n            const regex = /(\\d+(?:,\\d+)?)/g;\n            let splitOrderQTY = lines[i - 1].split(\" \").reverse();\n            ordered_qty = splitOrderQTY[1].match(regex);\n            obj.ordered_qty = ordered_qty[0] ? parseInt(ordered_qty[0].replace(/,/g, '')) : null;\n\n            // UOM\n            obj.uom = splitOrderQTY[0];\n        }\n\n        // PRODUCT NAME \n        let productFirstLineFound = false;\n        let productNameFound = false;\n        let product_trim = lines.map((e, j) => {\n\n            if (productFirstLineFound && !productNameFound) {\n                if (e.includes(\"HSN\")) {\n                    productNameFound = true;\n                }\n                else {\n                    product_details.product_name = product_details.product_name + e\n                }\n            }\n\n            if (j < i && j > i - 10 && e.match(/\\b\\d{4}(?=[a-z])/gi)) {\n                product_details.product_name = e.replace(/\\b\\d{1,4}(?=[a-zA-Z])/g, \"\").replace(/\\d+\\s*PC$/, \"\").trim() ||\n                    \"\";\n                productFirstLineFound = true;\n            }\n        });\n\n        //replace last qty and uom from name\n        product_details.product_name = product_details.product_name.replace(/\\d+\\s*PC$/, \"\").trim();\n\n        obj.products.push(product_details)\n        integrated.push(obj)\n        area.pos.po_items = integrated;\n    }\n}\narea.pos.po_document = $node[\"Post the file\"].json[\"data\"][\"id\"];\nlet products = area.pos.po_items;\nlet productIds = products.map(product => product.products[0].id);\nitems[0].json.area = area;\nitems[0].json.productIds = productIds;\nitems[0].json.products = products;\nreturn items;"
      },
      "name": "Extracting the seimens po details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        180,
        160
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://noirqa.shakedeal.com/items/sds_pos",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function to construct PO obj\"].json[\"poObj\"]}}"
      },
      "name": "Post to the Seimens Pos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1760,
        120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://noirqa.shakedeal.com/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "input_file:attachment_00"
      },
      "name": "Post the file",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -20,
        160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://noirqa.shakedeal.com/items/sds_products?filter={\"id\":{\"_in\":\"{{$node[\"Extracting the seimens po details\"].json[\"productIds\"]}}\"}}",
        "options": {}
      },
      "name": "Get the products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        620,
        160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let poProducts = $node[\"Extracting the seimens po details\"].json[\"products\"];\nlet existingProductData = $node[\"Get the products\"].json[\"data\"];\nlet poObj = $node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"];\nlet poItems =  $node[\"Get the po Item\"].json[\"data\"];\nlet resultFilter = \n   poProducts.filter(products=>\n     !existingProductData.some(\n      data=> data.id === products.products[0].id \n    )\n  );\nlet productsToCreate = resultFilter.map(product=>product.products[0]);\nuniqueArr = Object.create(null),\n    uniqueProductArr = productsToCreate.filter(o => {\n        var key = ['id'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\n\nitems[0].json.resultFilter = resultFilter;\nitems[0].json.productsToCreate = uniqueProductArr;\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1000,
        160
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://noirqa.shakedeal.com/items/sds_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function\"].json[\"productsToCreate\"]}}"
      },
      "name": "Create products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1340,
        -60
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function\"].json[\"productsToCreate\"].length>0?true:false}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1160,
        160
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://noirqa.shakedeal.com/items/sds_po_items?filter={\"_and\": [{\"product\": {\"_in\":\"{{$node[\"Extracting the seimens po details\"].json[\"productIds\"]}}\"}},{\"vendor\":{\"_neq\":null}}]}&sort=-date_created&limit=1&fields=product,vendor.id,vendor.shipment_type",
        "options": {}
      },
      "name": "Get the po Item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        820,
        160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let poProducts = $node[\"Extracting the seimens po details\"].json[\"products\"];\nlet postOfficeDetails = $node[\"Get Details on Pincode\"].json[\"0\"][\"PostOffice\"][0];\nlet city = postOfficeDetails[\"District\"];\nlet state = postOfficeDetails[\"State\"];\nlet country = postOfficeDetails[\"Country\"]\n$node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"][\"city\"]= city;\n$node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"][\"state\"]= state;\n$node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"][\"country\"]= country;\n$node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"][\"ship_city\"]= city;\n$node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"][\"ship_state\"]= state;\n$node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"][\"ship_country\"]= country;\nlet poObj = $node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"];\nlet poItems =  $node[\"Get the po Item\"].json[\"data\"];\nlet existingProducts = $node[\"Get the products\"].json[\"data\"];\nlet createdProducts =$node[\"Function\"].json[\"productsToCreate\"].length>0?$node[\"Create products\"].json[\"data\"]:[];\nlet allProducts = [...existingProducts,...createdProducts]\npoProducts.forEach(function(poProduct,index){\n  let matchedPoItem = poItems.filter(poItem=>poItem.product == poProduct.product);\n  let matchedProduct = allProducts.filter(product=>product.id == poProduct.product);\n  poObj.po_items[index].category = matchedProduct[0].main_category;\n  if(matchedPoItem.length>0){\n    poObj.po_items[index].vendor = matchedPoItem[0].vendor.id;\n    poObj.po_items[index].shipment_type = matchedPoItem[0].vendor.shipment_type;\n  }\n})\n\n\nitems[0].json.poObj= poObj\nreturn items;"
      },
      "name": "Function to construct PO obj",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1540,
        120
      ]
    },
    {
      "parameters": {
        "url": "=https://api.postalpincode.in/pincode/{{$node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"][\"pincode\"]}}",
        "jsonParameters": true,
        "options": {}
      },
      "name": "Get Details on Pincode",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        400,
        160
      ]
    }
  ],
  "settings": {},
  "staticData": {
    "node:Wait for Po Email": {
      "lastMessageUid": 2448
    }
  },
  "tags": [],
  "updatedAt": "2023-06-09T04:52:53.914Z"
}