{
  "active": true,
  "connections": {
    "Read PDF": {
      "main": [
        [
          {
            "node": "Post the file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Po Email": {
      "main": [
        [
          {
            "node": "Read PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting the seimens po details": {
      "main": [
        [
          {
            "node": "Get the products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post the file": {
      "main": [
        [
          {
            "node": "Extracting the seimens po details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the products": {
      "main": [
        [
          {
            "node": "Get the po Item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Create products",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create products": {
      "main": [
        [
          {
            "node": "Post to the Seimens Pos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Post to the Seimens Pos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the po Item": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-05-17T09:47:27.940Z",
  "id": "310",
  "name": "Read Seimens PDF",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -100,
        380
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "attachment_00"
      },
      "name": "Read PDF",
      "type": "n8n-nodes-base.readPDF",
      "typeVersion": 1,
      "position": [
        380,
        380
      ]
    },
    {
      "parameters": {
        "format": "resolved",
        "dataPropertyAttachmentsPrefixName": "attachment_0",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "Wait for Po Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        180,
        380
      ],
      "alwaysOutputData": false,
      "credentials": {
        "imap": {
          "id": "88",
          "name": "IMAP account(tendul)"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let area = {\n    pos: {\n        id: '',\n        po_value: '',\n        po_net_value: '',\n        po_date: '',\n        po_delivery_date: '',\n        shipment_address: '',\n        street_address: '',\n        gstin: '',\n        city: '',\n        state: '',\n        country: '',\n        pincode: '',\n        ship_street_address: '',\n        ship_pincode: '',\n        ship_city: '',\n        ship_state: '',\n        ship_country: '',\n        poc_name: '',\n        poc_contact_number: '',\n        poc_email: '',\n        po_items: [],\n        products:[]\n    },\n}\nlet integrated = [];\nlet poObj = {};\n\n\n// const product = [];\nconst contentSubStringArray = $node[\"Read PDF\"].json[\"text\"];\nconst lines = contentSubStringArray.split('\\n');\nconsole.log(lines, \"lines\");\nlet gstin = 0\nfor (i = 0; i < lines.length; i++) {\n    if (lines[i].includes(\"PAN:\")) {\n        let splitPanString = lines[i].split(\":\");\n        pan = splitPanString[1];\n        area.pan = pan;\n    }\n    // else if (lines[i].includes(\"GSTN\")) {\n    //     let splitGstnString = lines[i].split(\" \");\n    //     gstin = splitGstnString[1];\n    //     if (gstin) {\n    //         area.pos.gstin = gstin;\n    //     } else {\n    //         area.pos.gstin = null;\n    //     }\n    // } \n    else if (lines[i].includes(\"GSTIN\")) {\n        let splitGstnString = lines[i];\n        const regex = /GSTIN:\\s*([A-Za-z0-9]{15})/;\n        gstin = splitGstnString.match(regex);\n        if (gstin) {\n            area.pos.gstin = gstin[1];\n        } else {\n            area.pos.gstin = null;\n        }\n    } \n    else if (lines[i].includes(\"Date\")) {\n        let splitDateString = lines[i].split(\":\");\n        date = splitDateString[1];\n        splitdate = date.split(\".\");\n        joindate = splitdate.reverse().join(\"-\");\n        area.date = joindate;\n        area.pos.po_date = area.date;\n    } \n    else if (lines[i].includes(\"Delivery date:\")) {\n        let splitDeliveryDateString = lines[i].split(\":\");\n        deliverydate = splitDeliveryDateString[1].trim(\" \");\n        splitdate = deliverydate.split(\".\");\n        joindeliverydate = splitdate.reverse().join(\"-\");\n        area.deliverydate = joindeliverydate;\n        area.pos.po_delivery_date = area.deliverydate;\n    } \n    else if (lines[i].includes(\"Order no\")) {\n        let splitOrderNoString = lines[i].split(\":\");\n        const regex = /-?\\d+(\\.\\d+)?/g;\n        order_no = splitOrderNoString[0].match(regex);\n        area.order_no = order_no[0];\n        if (area.order_no) {\n            area.pos.id = area.order_no;\n        }\n        else {\n            area.pos.id = '';\n            area.pos.po_items[0].id = '';\n        }\n    } \n    else if (lines[i].includes(\"ORG-ID\")) {\n        let splitOrgIdString = lines[i].split(\":\");\n        org_id = splitOrgIdString[0].slice(9, 16);\n        area.org_id = org_id;\n    }\n    // Shipping Addresss\n    // *********************\n    else if (lines[i].includes(\"Shipping address\")) {\n        const startString = \"Shipping address\";\n        const endString = \"Please supply in accordance with the stipulated terms and conditions attached. Kindly send us your\";\n        const startIndex = lines.indexOf(startString);\n        const endIndex = lines.indexOf(endString);\n        const addr = /^(.*?)(?=\\b\\d{6}\\b)/;\n        shipping_address = lines.slice(startIndex + 1, endIndex).join();\n        area.shipping_address = shipping_address;\n        area.pos.shipment_address = area.shipping_address;\n        street_address = area.pos.shipment_address.match(addr);\n        area.pos.street_address = street_address[0];\n        area.pos.ship_street_address = street_address[0]\n        if (area.pos.shipment_address) {\n            const regex = /-?\\d+(\\.\\d+)?/g;\n            const pin = /\\b\\d{6}\\b/;\n            billing_address = area.pos.shipment_address.split(\" \").reverse(\"\");\n            splitBillingaddress = billing_address;\n            city = splitBillingaddress[0].split(\",\");\n            area.pos.city = city[0] || null;\n            area.pos.ship_city = city[0] || null;\n            state = splitBillingaddress[0].split(\",\");\n            console.log(state, \"state state\")\n            // area.pos.state = state[1] || null;\n            // area.pos.ship_state = state[1] || null;\n            country = splitBillingaddress[0].split(\",\");\n            area.pos.country = country[1] || null;\n            area.pos.ship_country = country[1] || null;\n            pincode = area.pos.shipment_address.match(pin);\n            area.pos.pincode = parseInt(pincode[0]) || 0;\n            area.pos.ship_pincode = parseInt(pincode[0]) || 0;\n        }\n    } \n\n     // POC NAME,EMAIL,PHONE NUMBER\n    else if (lines[i].includes(\"|||\")) {\n        let splitNamestring = lines[i];\n        let name_trim = /\\|\\|\\|\\s*(.*?)\\s*(?=\\+91 \\(\\d+\\) \\d+|\\d{10})/;\n        let match = splitNamestring.match(name_trim);\n        area.pos.poc_name = match ? match[1].trim() : '';\n\n        let splitphonestring = lines[i];\n        let phone_match = /(\\+\\d{2}\\s*\\(\\d+\\)\\s*\\d+|\\d{10})/;\n        // const phn = /^(\\+\\d{1,3}\\s?)?(\\(\\d{1,4}\\)\\s?)?\\d{10}$/;\n        let phone = splitphonestring.match(phone_match);\n        let poc_number = phone[0].replace(/\\D/g, \"\");\n        area.pos.poc_contact_number = parseInt(poc_number);\n\n        let regex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/;\n        let poc_email = lines[i].match(regex) ? lines[i].match(regex) : lines[i+1].match(regex) ? lines[i+1].match(regex) : lines[i+2].match(regex) ;\n        area.pos.poc_email = poc_email[0];   \n    }\n      \n    else if (lines[i].includes(\"Company\")) {\n        const startString = \"Company\";\n        const endString = \"PAN:    \";\n        const startIndex = lines.indexOf(startString);\n        const endIndex = lines.indexOf(endString);\n        company = lines.slice(startIndex + 1, endIndex).join();\n        area.company = company;\n    } \n    else if (lines[i].includes(\"Your supplier no.\")) {\n        let splitSupplierNoString = lines[i].split(\":\");\n        const regex = /-?\\d+(\\.\\d+)?/g;\n        supplier_no = splitSupplierNoString[0].match(regex);\n        area.supplier_no = supplier_no;\n    } \n      // \n    else if (lines[i].includes(\"Terms of payment\")) {\n        let splitTermsofPaymentString = lines[i + 1].split(\":\");\n        terms_of_payment = splitTermsofPaymentString[0];\n        area.terms_of_payment = terms_of_payment;\n    } \n      // TERMS OF PAYMENT\n    else if (lines[i].includes(\"Supplier Product Number\")) {\n        const inputString = lines;\n        const startString = \"Your search\";\n        const endString = \"Total net value\";\n        material_description = /<[^>]+>([^<]*)<\\/[^>]+>/g.exec(lines)\n        if (material_description) {\n            area.material_description = material_description[1];\n        } else {\n            area.material_description = null;\n        }\n    } \n      // AMOUNT IN WORDS\n    else if (lines[i].includes(\"Amount in words:\")) {\n        let splitAmountInWordsString = lines[i + 1].split(\":\");\n        amount_in_words = splitAmountInWordsString[0];\n        area.amount_in_words = amount_in_words;\n    }\n      // TOTAL NET VALUE\n    else if (lines[i].includes(\"Total net value\")) {\n        if (lines[i].includes(\"Total net value incl. Tax INR \")) {\n            let splitTotalPONetValueString = lines[i].split(\" \");\n            const regex = /[\\d,]+(?:\\.\\d+)?/;\n            for (let element of splitTotalPONetValueString) {\n                const matches = element.match(regex);\n                if (matches) {\n                    const gross_price = matches[0].replace(\",\", '');\n                    if (gross_price) {\n                        area.pos.po_value = parseFloat(gross_price);\n                    } else {\n                        area.pos.gross_price = null;\n                    }\n                    break;\n                }\n            }\n        } else {\n            let splitTotalPOGrossValueString = lines[i].split(\" \");\n            const regex = /-?\\d+(\\.\\d+)?/g;\n            net_price = splitTotalPOGrossValueString[2].replace(\",\", '');\n            net_price = net_price.match(regex);\n            if (net_price) {\n                area.pos.po_net_value = parseFloat(net_price);\n            } else {\n                area.pos.po_net_value = '';\n            }\n        }\n    }\n  \n      // MULTIPLE PO_ITEMS\n\n    else if (lines[i].includes(\"Integrated\")) {\n        let length = integrated.length + 1\n        console.log(length, \"length\")\n\n      let obj = {\n            id: '',\n            products: [],\n            hsn: '',\n            product: '',\n            ordered_qty: '',\n            unit_price: '',\n            net_price: '',\n            tax_percentage: '',\n            tax_value: '',\n        }\n     let product_details = {\n            id:'',\n            product_name:'',\n            hsn:'',\n            //main_category:'',\n            description:'',        \n      }\n\n      // SKU CODE\n        obj.product = lines[i + 1];\n        product_details.id = obj.product;\n        \n\n      // ID\n        let order = lines.find((e) => e.includes(\"Order no.\")).match(/\\d+/);\n        const itemno_id = /-?\\d+(\\.\\d+)?/g;\n        let serial = order + \"-\" + length\n        order_no = order[0].match(itemno_id);\n        obj.id = serial;\n        let pattern = /^\\d{4}/;\n        let serialno = pattern.test(lines[i]);\n      // SERIAL NUMBER\n        if (serialno && i != id + 1) {\n            let a = lines[i].split(\"\")\n            let itemno = a[0] + a[1] + a[2] + a[3]\n            let order = lines.find((e) => e.includes(\"Order no.\"))\n            let splitOrderNoString = order.split(\":\");\n            const itemno_id = /-?\\d+(\\.\\d+)?/g;\n            order_no = splitOrderNoString[0].match(itemno_id);\n            obj.id = order_no + '-' + itemno;\n        }\n\n      // NET PRICE\n        let splitNetpricestring = lines[i - 1];\n        net = splitNetpricestring.split(\" \").reverse();\n        net_price = net[1];\n        obj.net_price = parseFloat(net_price.replace(\",\", \"\"));\n\n      // UNIT PRICE\n        let splitUnitpricestring = lines[i - 1];\n        unit = splitUnitpricestring.split(\" \").reverse();\n        unit_price = unit.filter(element => element.trim() !== '');\n        obj.unit_price = parseFloat(unit_price[1].replace(\",\", \"\"));\n      \n        // HSN\n        let splitHsnCodeString = lines[i - 2].split(\":\");\n        hsn = splitHsnCodeString[1];\n        obj.hsn = hsn;\n        product_details.hsn = hsn;\n\n      // TAX VALUE\n        let splitTaxValuestring = lines[i];\n        const tax_reg = /(\\d+(,\\d+)?(\\.\\d+)?)/;\n        tax_percent = splitTaxValuestring.split(\" \").reverse();\n        tax_value = tax_percent[1].trim().match(tax_reg);\n        obj.tax_value = parseFloat(tax_value[0].replace(\",\", \"\"));\n        const percent = /-?\\d+(\\.\\d+)?/g;\n      \n      // TAX PERCENTAGE\n        let splitGSTstring = lines[i].split(\":\");\n        tax_percentage = splitGSTstring[0].match(percent);\n        obj.tax_percentage = parseFloat(tax_percentage[0]);\n    \n      // PRODUCT NAME \n      let product_trim = lines.map((e, j) => {\n      if (j < i && j > i-10 && e.match(/\\b\\d{4}(?=[a-z])/gi)  ) {\n        product_details.product_name = e.replace(/\\b\\d{1,4}(?=[a-zA-Z])/g, \"\").replace(/\\d+\\s*PC$/, \"\").trim() || \n        \"\";\n        \n      }\n    }).filter(Boolean);\n         if (lines[i - 3].includes(\"PC\")) {\n                const regex = /(\\d+(?:,\\d+)?)/g;\n                let splitOrderQTY = lines[i - 3].split(\" \").reverse();\n                ordered_qty = splitOrderQTY[1].match(regex);\n                obj.ordered_qty = ordered_qty[0] ? parseInt(ordered_qty[0].replace(/,/g, '')) : 0;\n         }\n            obj.products.push(product_details)\n            integrated.push(obj)\n            area.pos.po_items = integrated;\n        }\n    else if(lines[i].includes(\"HSN/SAC\")){\n      \n    }\n  \n    }\n   \n    \n    area.pos.po_document = $node[\"Post the file\"].json[\"data\"][\"id\"];\n    let products = area.pos.po_items;\n    let productIds = products.map(product=>product.products[0].id);\n    items[0].json.area = area;\n    items[0].json.productIds = productIds;\n    items[0].json.products = products;\n    return items;"
      },
      "name": "Extracting the seimens po details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        780,
        380
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://noirqa.shakedeal.com/items/sds_pos",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function\"].json[\"poObj\"]}}"
      },
      "name": "Post to the Seimens Pos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2040,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=",
        "options": {}
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        760,
        600
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://noirqa.shakedeal.com/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "input_file:attachment_00"
      },
      "name": "Post the file",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        580,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://noirqa.shakedeal.com/items/sds_products?filter={\"id\":{\"_in\":\"{{$node[\"Extracting the seimens po details\"].json[\"productIds\"]}}\"}}",
        "options": {}
      },
      "name": "Get the products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        960,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let poProducts = $node[\"Extracting the seimens po details\"].json[\"products\"];\nlet existingProductData = $node[\"Get the products\"].json[\"data\"];\nlet poObj = $node[\"Extracting the seimens po details\"].json[\"area\"][\"pos\"];\nlet poItems =  $node[\"Get the po Item\"].json[\"data\"];\nlet resultFilter = \n   poProducts.filter(products=>\n     !existingProductData.some(\n      data=> data.id === products.products[0].id \n    )\n  );\nlet productsToCreate = resultFilter.map(product=>product.products[0]);\npoProducts.forEach(function(poProduct,index){\n  let matchedPoItem = poItems.filter(poItem=>poItem.product == poProduct.product);\n  if(matchedPoItem.length>0){\n    poObj.po_items[index].vendor = matchedPoItem[0].vendor.id;\n    poObj.po_items[index].shipment_type = matchedPoItem[0].vendor.shipment_type\n  }\n})\n\nitems[0].json.resultFilter = resultFilter;\nitems[0].json.productsToCreate = productsToCreate;\nitems[0].json.poObj= poObj\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        380
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "value": "={{$node[\"Get the products\"].json[\"data\"]}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        880,
        140
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://noirqa.shakedeal.com/items/sds_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function\"].json[\"productsToCreate\"]}}"
      },
      "name": "Create products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1520,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function\"].json[\"productsToCreate\"].length>0?true:false}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1440,
        380
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1500,
        600
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://noirqa.shakedeal.com/items/sds_po_items?filter={\"_and\": [{\"product\": {\"_in\":\"{{$node[\"Extracting the seimens po details\"].json[\"productIds\"]}}\"}},{\"vendor\":{\"_neq\":null}}]}&sort=-date_created&limit=1&fields=product,vendor.id,vendor.shipment_type",
        "options": {}
      },
      "name": "Get the po Item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1120,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "89",
          "name": "Seimens Noir PDF"
        }
      }
    }
  ],
  "settings": {},
  "staticData": {
    "node:Wait for Po Email": {
      "lastMessageUid": 2286
    }
  },
  "tags": [],
  "updatedAt": "2023-05-31T08:10:58.311Z"
}