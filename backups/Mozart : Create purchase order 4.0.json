{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get po_details": {
      "main": [
        [
          {
            "node": "Get the po items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create po": {
      "main": [
        [
          {
            "node": "Get the PO pdf",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload PO in vpanel": {
      "main": [
        [
          {
            "node": "Update title in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Binary Data": {
      "main": [
        [
          {
            "node": "Upload PO in vpanel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload PO in mozart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for vendor in vpanel": {
      "main": [
        [
          {
            "node": "Condition for checking vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for checking vendor": {
      "main": [
        [
          {
            "node": "Create vendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create vendor": {
      "main": [
        [
          {
            "node": "Check whether user exits or not",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create vendor details": {
      "main": [
        [
          {
            "node": "Function for getting sku",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp2": {
      "main": [
        [
          {
            "node": "Function for getting sku",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for getting sku": {
      "main": [
        [
          {
            "node": "Get the products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the products": {
      "main": [
        [
          {
            "node": "Function to create products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create products": {
      "main": [
        [
          {
            "node": "Checking condition whether to post the products ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post the products ": {
      "main": [
        [
          {
            "node": "post product details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post product details": {
      "main": [
        [
          {
            "node": "Create po in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp3": {
      "main": [
        [
          {
            "node": "Create po in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create po in vpanel": {
      "main": [
        [
          {
            "node": "Update user created in pdf",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map po and products": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to map po and product": {
      "main": [
        [
          {
            "node": "Map po and products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get contact details based on plant": {
      "main": [
        [
          {
            "node": "Function to create po",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload PO in mozart": {
      "main": [
        [
          {
            "node": "Update title in mozart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the vendor po_file in mozart": {
      "main": [
        [
          {
            "node": "Check for vendor in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for file upload": {
      "main": [
        [
          {
            "node": "Update the vendor po_file in mozart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the po_status": {
      "main": [
        [
          {
            "node": "Construct obj for sending mail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send email to vendor": {
      "main": [
        [
          {
            "node": "Send mail to vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construct obj for sending mail": {
      "main": [
        [
          {
            "node": "Send email to vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check whether user exits or not": {
      "main": [
        [
          {
            "node": "Get user id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get user id": {
      "main": [
        [
          {
            "node": "Create vendor details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp4": {
      "main": [
        [
          {
            "node": "Create vendor details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the PO": {
      "main": [
        [
          {
            "node": "Function to create tally PO obj",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create tally PO obj": {
      "main": [
        [
          {
            "node": "Check PO exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check PO exists": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create E-invoice in tally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the po items": {
      "main": [
        [
          {
            "node": "Get contact details based on plant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Move Binary Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the PO pdf": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update title in mozart": {
      "main": [
        [
          {
            "node": "Wait for file upload",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Update title in vpanel": {
      "main": [
        [
          {
            "node": "Wait for file upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update user created in pdf": {
      "main": [
        [
          {
            "node": "Function to map po and product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Update the po_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send mail to vendor": {
      "main": [
        [
          {
            "node": "Get the PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-12-11T10:51:24.581Z",
  "id": "389",
  "name": "Mozart : Create purchase order 4.0",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -5060,
        180
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "create_po",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -5560,
        790
      ],
      "webhookId": "e527030c-1bfc-4f07-8b57-24aa8cae6d0d",
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_pos?filter={\"id\":{\"_eq\":\"{{$node[\"Webhook\"].json[\"body\"][\"keys\"][0]}}\"}}&fields=id,po_date,po_value,advance_description,net_po_value,payment_terms,po_type,po_deliver_date,vendor.*,po_items.*,po_items.product.*,po_num.*,po_num.issuer_name.*,po_num.issuer_name.user.*,operation_agent.*,buyer.*,sd_billing_address.*,buyers.sdm_buyers_id.buyer.*,operation_agents.sdm_operation_agents_id.operation_agent.*,ld_charges_applicable,transportation_charges_applicable,transportation_charges,other_charges_applicable,other_charges&limit=-1",
        "options": {
          "ignoreResponseCode": true
        }
      },
      "name": "Get po_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -4760,
        780
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nlet poDetails = $node[\"Get po_details\"].json.data;\nlet routing_commission = $node[\"Globals\"].json.commission;\nlet poItemsData = $node[\"Get the po items\"].json.data;\nlet plantDetails = $node[\"Get contact details based on plant\"].json.data;\nlet pdfPoItems = [];\nlet taxItems = [];\nlet allPoTaxes = poItemsData.map(pItem =>pItem.tax_percentage);\nlet uniquePoTaxes =[...new Set(allPoTaxes)];\nlet subtotal = poItemsData.reduce((acc, obj) => acc +  parseFloat(obj.net_price), 0);\nlet totalValue = poItemsData.reduce((acc, obj) => acc +  parseFloat(obj.gross_price), 0);\nlet totalPoQty = poItemsData.reduce((acc, obj) => acc +  parseFloat(obj.requested_qty), 0);\nlet transportationChargesHtml = \"\";\nlet otherChargesHtml = \"\";\n\nlet vendorPassword = \"\";\nlet vendorFirstName = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_name\"];\nlet randomNumber = Math.floor(Math.random() * 90000) + 10000;\nvendorPassword =`${vendorFirstName.split(\" \")[0]}@${randomNumber}`\nlet taxType = poDetails[0].vendor.gstin.slice(0,2) == plantDetails[0].gst.slice(0,2)?\"intrastate\":\"interstate\";\n\nlet ldChargeApplicable =  $node[\"Get po_details\"].json[\"data\"][0][\"ld_charges_applicable\"];\nlet transportationChargesApplicable = $node[\"Get po_details\"].json[\"data\"][0][\"transportation_charges_applicable\"];\nlet transportationCharges = $node[\"Get po_details\"].json[\"data\"][0][\"transportation_charges\"];\nlet otherChargesApplicable = $node[\"Get po_details\"].json[\"data\"][0][\"other_charges_applicable\"];\nlet otherCharges = $node[\"Get po_details\"].json[\"data\"][0][\"other_charges\"];\n\nlet payment_terms = $node[\"Get po_details\"].json[\"data\"][0][\"payment_terms\"]?parseInt($node[\"Get po_details\"].json[\"data\"][0][\"payment_terms\"]):30;\npayment_terms = payment_terms == 0 ? \"Advance\" : payment_terms + \" Days Credit\";\nlet advanceDescription = $node[\"Get po_details\"].json[\"data\"][0][\"advance_description\"]\n\nif(transportationChargesApplicable){\n    let splitTransportationCharges = transportationCharges.split(\"\\n\");\n    splitTransportationCharges.forEach(function(charge,index){\n        transportationChargesHtml=transportationChargesHtml+`<p>${charge}</p>`\n    })\n}\nif(otherChargesApplicable){\n    let splitOtherCharges = otherCharges.split(\"\\n\");\n    splitOtherCharges.forEach(function(charge,index){\n        otherChargesHtml=otherChargesHtml+`<p>${charge}</p>`\n    })\n}\n\nlet termsAndConditions = `<p><b>Terms & Conditions<b></p>\n${transportationChargesApplicable?\"\":\"<p>Price basis : FOR - Free on Road</p>\"}\n<p>FOR SITE\nInsurance :\nTaxes : GST Extra @ Actuals\nShipping Instruction : OP COMMERCE INVOICE HAS TO BE ATTACHED TO PRODUCT.\nPayment mode : NEFT/RTGS</p>\n<p>Payment terms : ${payment_terms == \"Advance\" && advanceDescription?advanceDescription:payment_terms}</p><br>\n${transportationChargesApplicable?transportationChargesHtml:\"\"}<br>\n\n${otherChargesApplicable?otherChargesHtml:\"\"}<br>\n\n<p>Warranty : The equipment's/spares supplied to us under this Contract shall be warranted against defects in workmanship and material under normal use, service and duty conditions as specified in the Purchase Order, for a period of 12 months from the date of installation or 18 months from the date of supply, whichever is earlier. If any defects are noticed in the equipment during the warranty period, the same shall be intimated to you in writing and the equipment will be sent to you on a freight-to-pay basis. All rectification/replacement will be undertaken at your own cost.</p>\n\n<p>For deliveries through dedicated vehicle at site/inside site of Vedanta Ltd., the below compliances and safety requirements to be adhered-to by the transporters carrying the material.</p>\n<p>a) All the legal documents pertaining to the vehicle namely Vehicle Insurance, Registration certificate, Pollution certificate etc in which dispatch is being done to be valid.</p><br>\n<p>b) The driver should possess valid driving license w.r.t the type of vehicle he has arrived inside the premises with the material.</p><br>\n<p>c) The vehicle carrying the material to be compulsorily equipped with reverse horn & reverse camera which should be in working condition.</p><br>\n\n${ldChargeApplicable?\"<p>LD clause # Applicable as below</p>\":\"<p>LD clause # not Applicable</p>\"}\n${ldChargeApplicable?\"<p>LD Clause: In the event you fail to supply the material within the time specified in the contract, you shall pay to us penalty @ 0.5% of the value of the contract for each weeks delay and part thereof. However, such payment shall not exceed 5% of the total value of the contract. We may, without prejudice to any other method of recovery, deduct an amount of such damages from any monies due or which may become due to you.<p>\":\"\"}\n\n<p>OP Commerce Online Pvt. Ltd. stands as an aggregator in the Procurement & Stores sector for Vedanta Ltd. For Vendor payments we solely depend on payments received from Vedanta Ltd. post adherence to all procurement and billing procedures. However, payments will be done by us to our Source vendors as per the Payment terms mentioned on the face page of this Contract agreement mentioned above on a case to case basis. But during occurrences of Force Majeure or any other rare/seldom circumstances payment will be made on Paid-when-Paid basis</p>\n\n<p>Do not dispatch consignment through DTDC, Trackon, Maruti or Professional Couriers as the don't supply any consignments to Goa on door delivery basis. Kindly prefer Bluedart, TCI Express, TCI Freight, VRL, ACPL or Deccan Queen Transport to book for door delivery basis.</p>\n`\npoItemsData.forEach(function(pItem,index){\n    let itemUnitPrice = poDetails[0].po_type==\"routing\"?pItem[\"unit_price\"]/routing_commission:parseFloat(pItem.unit_price);\n    let itemNetPrice = pItem.requested_qty*itemUnitPrice;\n    let itemGrossPrice = itemNetPrice+(itemNetPrice*pItem.tax_percentage)/100;\n    pdfPoItems.push({\n        product :`${pItem.product.product_name}<br>${pItem.product.description}`,\n        product_code:pItem.product.id,\n        hsn:pItem.hsn,\n        quantity:`${pItem.requested_qty.toFixed(2)} ${pItem.uom}`,\n        unit_price:itemUnitPrice.toFixed(2),\n        sgst_tax_percentage:taxType==\"intrastate\"?(pItem.tax_percentage)/2:0,\n        cgst_tax_percentage:taxType==\"intrastate\"?(pItem.tax_percentage)/2:0,\n        sgst_tax_value:taxType==\"intrastate\"?((itemGrossPrice - itemNetPrice)/2).toFixed(2):0,\n        cgst_tax_value:taxType==\"intrastate\"?((itemGrossPrice - itemNetPrice)/2).toFixed(2):0,\n        igst_tax_percentage:taxType==\"interstate\"?pItem.tax_percentage:0,\n        igst_tax_value:taxType==\"interstate\"?(itemGrossPrice-itemNetPrice).toFixed(2):0,\n        subtotal:itemNetPrice.toFixed(2)\n    })\n});\n\nuniquePoTaxes.forEach(function(tax,index){\n    let getAllTaxes = poItemsData.filter(pItem=>pItem.tax_percentage == tax);\n    const taxValue = getAllTaxes.reduce((acc, obj) => acc + (parseFloat(obj.gross_price) - parseFloat(obj.net_price)), 0);\n    let poTypeTaxValue = poDetails[0].po_type==\"routing\"?taxValue/routing_commission:taxValue;\n    if(taxType == \"intrastate\"){\n        taxItems.push(\n            {\n                tax :`CGST (${tax/2}%)`,\n                amount:(poTypeTaxValue/2).toFixed(2)\n            },\n            {\n                tax :`SGST (${tax/2}%)`,\n                amount:(poTypeTaxValue/2).toFixed(2)\n            }\n        )\n    }else{\n        taxItems.push(\n            {\n                tax :`IGST (${tax}%)`,\n                amount:(poTypeTaxValue).toFixed(2)\n            }\n        )\n    }\n})\n\nconst options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n\nlet delivery_date = new Intl.DateTimeFormat('en-IN', options).format(new Date(poDetails[0].po_deliver_date)).replace(/\\//g,\"-\");\nlet po_date = new Intl.DateTimeFormat('en-IN', options).format(new Date(poDetails[0].po_date)).replace(/\\//g,\"-\");\n  \nlet invoiceObj={\n    security_key:\"6f34f84465f9a02\",\n    po_data:{\n        po_number:poDetails[0].id,\n        delivery_date:delivery_date,\n        po_date:po_date,\n        reference_number:poDetails[0].po_num.id,\n        place_of_supply:`${plantDetails[0].destination_of_supply} (${plantDetails[0].gst.slice(0,2)})`,\n        company_data:{\n            name:\"Opcommerce Online Private Limited\",\n            gstin:poDetails[0].sd_billing_address.gstin,\n            address:poDetails[0].sd_billing_address.address,\n            email:\"accounts@shakedeal.com\"\n        },\n        vendor:{\n            email:poDetails[0].vendor.id,\n            gstin:poDetails[0].vendor.gstin,\n            company_name:poDetails[0].vendor.vendor_company?poDetails[0].vendor.vendor_company:poDetails[0].vendor.vendor_name,\n            phone:poDetails[0].vendor.vendor_phone,\n            address:poDetails[0].vendor.vendor_address,\n            delivery_company_name:plantDetails[0].company_name,\n            delivery_company_address:plantDetails[0].delivery_address,\n        },\n        tax_type:taxType,\n        po_items:pdfPoItems,\n        tax_items:taxItems,\n        total_items:totalPoQty.toFixed(2),\n        notes:\"<p><b>Notes</b></p><p>We must be notified 4 hours before dispatch in order to generate ASN and Tax invoices, which are required for goods receipt and without which materials will not be allowed inside the Material gate by security. For order dispatch related queries E-mail:vedantaiob.ops@shakedeal.com </p>\",\n        subtotal:poDetails[0].po_type==\"routing\"?(subtotal/routing_commission).toFixed(2):subtotal.toFixed(2),\n        total_value:poDetails[0].po_type==\"routing\"?(totalValue/routing_commission).toFixed(2):totalValue.toFixed(2),\n        terms_conditions:termsAndConditions\n    }\n}\n\n\nitems[0].json.invoiceObj= invoiceObj\nitems[0].json.vendor_password=vendorPassword\nreturn items\n"
      },
      "name": "Function to create po",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -4020,
        800
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "=input_file:data_0.pdf"
      },
      "name": "Upload PO in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2800,
        500
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "setAllData": false,
        "sourceKey": "data_0.pdf",
        "options": {
          "keepSource": true,
          "keepAsBase64": true
        }
      },
      "name": "Move Binary Data",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        -2860,
        800
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendors?filter={\"vendor\":{ \"email\": { \"_eq\": \"{{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"].trim()}}\"}}}",
        "options": {}
      },
      "name": "Check for vendor in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2140,
        800
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for vendor in vpanel\"].json.data.length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Condition for checking vendor",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1980,
        800
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/users",
        "options": {
          "ignoreResponseCode": true
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "first_name",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_name\"]}}"
            },
            {
              "name": "email",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"]}}"
            },
            {
              "name": "password",
              "value": "={{$node[\"Function to create po\"].json[\"vendor_password\"]}}"
            },
            {
              "name": "role",
              "value": "=3528a2f7-42eb-4455-921c-83a763e1351b"
            }
          ]
        }
      },
      "name": "Create vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1920,
        520
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendors",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "vendor",
              "value": "={{$node[\"Create vendor\"].json[\"data\"][\"id\"]}}"
            },
            {
              "name": "vendor_phone",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_phone\"]}}"
            },
            {
              "name": "vendor_company",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_company\"]}}"
            },
            {
              "name": "vendor_address",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_address\"]}}"
            },
            {
              "name": "gstin",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"gstin\"]}}"
            },
            {
              "name": "extra_cc_mail_ids",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"extra_cc_mail_ids\"]}}"
            },
            {
              "name": "pan",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"pan\"]}}"
            }
          ]
        }
      },
      "name": "Create vendor details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1340,
        520
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1720,
        1020
      ]
    },
    {
      "parameters": {
        "functionCode": "let products = $node[\"Get the po items\"].json[\"data\"];\n\nlet product_codes = [];\nproducts.forEach(function(obj,index){\n    product_codes.push(obj[\"product\"][\"id\"])\n})\n\nitems[0].json.product_codes = product_codes;\nreturn items;"
      },
      "name": "Function for getting sku",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1460,
        840
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_products?filter={ \"product_code\": { \"_in\": \"{{$node[\"Function for getting sku\"].json.product_codes}}\"}}&fields = id,product_code,product_name,description&limit=-1",
        "options": {}
      },
      "name": "Get the products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1160,
        840
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nlet action = \"\";\nlet products = $node[\"Get the po items\"].json[\"data\"];\nlet product_codes = $node[\"Function for getting sku\"].json.product_codes;\nlet existing_product_codes = [];\n\nlet existing_products = items[0].json.data\nlet resultFilter = \n   products.filter(products=>\n     !existing_products.some(\n      data=> data.product_code === products[\"product\"][\"id\"] \n    )\n  );\n\nexisting_products.forEach(function(prod,index){\n  existing_product_codes.push(prod.product_code);\n});\n\nvar toFindDuplicates = product_codes.reduce(function(acc, el, i, arr) {\n  if (arr.indexOf(el) !== i && acc.indexOf(el) < 0) acc.push(el); return acc;\n}, []);\n\ntoFindDuplicates.forEach(function(code,index){\n  let filterProducts = products.filter(prod => prod[\"product\"][\"id\"] == code);\n  let filterExistingProducts = existing_products.filter(prod=>prod.product_code == code);\n  if(filterProducts.length>filterExistingProducts.length){\n    for(i=0;i<=filterProducts.length - filterExistingProducts.length;i++){\n      if(filterProducts[i]){\n        resultFilter.push(filterProducts[i]);\n      }\n    }\n  }\n});\n\n\nlet products_to_create = []\nitems[0].json.length= resultFilter .length;\nif(resultFilter.length>0){\n   action=\"post the products\";\n   console.log(\"----------------result\",resultFilter)\n   resultFilter.forEach(function(obj,index){\n     console.log(\"----------obj\",obj)\n     products_to_create[index]={};\n     products_to_create[index].product_name = obj[\"product\"][\"product_name\"]\n     products_to_create[index].product_code = obj[\"product\"][\"id\"]\n     products_to_create[index].hsn = obj[\"hsn\"]\n     products_to_create[index].description = obj[\"product\"][\"description\"]\n   })\n\n}else action = \"no products to post\";\n\nitems[0].json.postProducts=products_to_create ;\nitems[0].json.products=products;\nitems[0].json.existing_product_codes=existing_product_codes;\nitems[0].json.toFindDuplicates=toFindDuplicates;\n\n\n\nitems[0].json.action = action;\n\n\n\nreturn items;"
      },
      "name": "Function to create products",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -900,
        840
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "post the products"
            }
          ]
        }
      },
      "name": "Checking condition whether to post the products ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -660,
        840
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_products",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function to create products\"].json[\"postProducts\"]}}"
      },
      "name": "post product details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -400,
        660
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -400,
        1020
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendor_pos?fields=*,vendor.*",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "po_file",
              "value": "={{$node[\"Upload PO in vpanel\"].json[\"data\"][\"id\"]}}"
            },
            {
              "name": "po_number",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"id\"]}}"
            },
            {
              "name": "po_value",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"po_value\"]}}"
            },
            {
              "name": "po_date",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"po_date\"]}}"
            },
            {
              "name": "vendor",
              "value": "={{$node[\"Check for vendor in vpanel\"].json.data.length>0 &&Array.isArray($node[\"Check for vendor in vpanel\"].json.data)?$node[\"Check for vendor in vpanel\"].json.data[0].id:$node[\"Check for vendor in vpanel\"].json.data.length>0 && !Array.isArray($node[\"Check for vendor in vpanel\"].json.data )?$node[\"Check for vendor in vpanel\"].json.data.id:Array.isArray($node[\"Create vendor details\"].json.data)?$node[\"Create vendor details\"].json.data[0].id:$node[\"Create vendor details\"].json.data.id}}"
            },
            {
              "name": "client",
              "value": "={{$node[\"Webhook\"].json[\"headers\"][\"client\"]}}"
            },
            {
              "name": "po_delivery_date",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"po_deliver_date\"]}}"
            },
            {
              "name": "plant",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"po_items\"][0][\"plant\"]}}"
            },
            {
              "name": "buyer_ids",
              "value": "={{$node[\"Function to create po\"].json[\"buyer_ids\"]}}"
            },
            {
              "name": "poc_id",
              "value": "={{$node[\"Function to create po\"].json[\"poc_ids\"]}}"
            }
          ]
        }
      },
      "name": "Create po in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        40,
        860
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendor_pos_sdv_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to map po and product\"].json.po_to_products}}"
      },
      "name": "Map po and products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        540,
        860
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "let po_to_products = [];\nlet psqlQuery = \"INSERT INTO sdv_vendor_pos_sdv_products (sdv_products_id,sdv_vendor_pos_id,req_qty,rate,sub_total,product_total,po_items_id,tax_percentage,hsn,uom) VALUES \"\nlet concat_products = $node[\"Function to create products\"].json.action == \"post the products\"?[...$node[\"post product details\"].json.data,...$node[\"Get the products\"].json.data]:$node[\"Get the products\"].json.data;\n//concat_products.map((obj, i) => ({ ...obj, isMapped: false }));\nconcat_products.forEach(function(product,index){\n  if (product.hasOwnProperty(\"isMapped\")) {\n    // Property exists, update its value\n    product[\"isMapped\"] = false;\n  }else{\n    product[\"isMapped\"] = false;\n  }\n})\nlet poType = $node[\"Get po_details\"].json.data[0].po_type;\nlet routing_commission = $node[\"Globals\"].json.commission;\nlet product_details = $node[\"Get the po items\"].json[\"data\"];\nproduct_details.forEach(function(obj,index){\n  let product = concat_products.filter(prod=>prod.product_code == obj[\"product\"][\"id\"] && !prod[\"isMapped\"]);\n\n  let findProductIndex = concat_products.findIndex(prod=>prod.product_code == obj[\"product\"][\"id\"]&& !prod[\"isMapped\"]);\n  if(findProductIndex !== -1){\n  \n  concat_products[concat_products.findIndex(prod=>prod.product_code == obj[\"product\"][\"id\"]&& !prod[\"isMapped\"])].isMapped = true;\n\n  let itemUnitPrice = poType==\"routing\"?obj[\"unit_price\"]/routing_commission:obj.unit_price;\n  let itemNetPrice = obj.requested_qty*itemUnitPrice;\n  let itemGrossPrice = itemNetPrice+(itemNetPrice*obj.tax_percentage)/100; \n  \n  po_to_products[index]={};\n  po_to_products[index].sdv_products_id = product[0].id;\n  po_to_products[index].sdv_vendor_pos_id = Array.isArray($node[\"Create po in vpanel\"].json.data)?$node[\"Create po in vpanel\"].json.data[0].id:$node[\"Create po in vpanel\"].json.data.id;\n  po_to_products[index].req_qty = obj.requested_qty\n  po_to_products[index].rate = itemUnitPrice\n  po_to_products[index].sub_total = itemNetPrice\n  po_to_products[index].tax_value = itemGrossPrice - itemNetPrice\n  po_to_products[index].product_total = itemGrossPrice\n  po_to_products[index].po_items_id = obj.id;\n  po_to_products[index].tax_percentage = obj.tax_percentage;\n  po_to_products[index].hsn = obj.hsn;\n  po_to_products[index].uom = obj.uom\n  }\n  \n})\npo_to_products.forEach(function(product,index){\n  let productValues = `(${product.sdv_products_id},${product.sdv_vendor_pos_id},${product.req_qty},${product.rate},${product.sub_total},${product.product_total},'${product.po_items_id}',${product.tax_percentage},${product.hsn?product.hsn:''},'${product.uom}')`;\n  psqlQuery+=productValues+\",\";\n})\nlet poItemsQuery = psqlQuery.slice(0, -1);\n\nitems[0].json.po_to_products= po_to_products;\nitems[0].json.concat_products= concat_products;\nitems[0].json.product_details= product_details;\nitems[0].json.psqlQuery= psqlQuery;\nitems[0].json.poItemsQuery= poItemsQuery;\nreturn items;"
      },
      "name": "Function to map po and product",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        280,
        860
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_plants?filter={\"id\":{\"_eq\":\"{{$node[\"Get po_details\"].json[\"data\"][0][\"po_items\"][0][\"plant\"]}}\"}}",
        "options": {}
      },
      "name": "Get contact details based on plant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -4280,
        800
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "=input_file:data_0.pdf"
      },
      "name": "Upload PO in mozart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2780,
        1020
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_pos/{{$node[\"Get po_details\"].json[\"data\"][0][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "po_file",
              "value": "={{$node[\"Upload PO in mozart\"].json[\"data\"][\"id\"]}}"
            }
          ]
        }
      },
      "name": "Update the vendor po_file in mozart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2320,
        800
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "mode": "wait"
      },
      "name": "Wait for file upload",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -2500,
        800
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "={{$node[\"Webhook\"].json[\"headers\"][\"client\"]}}"
            },
            {
              "name": "env",
              "value": "={{$node[\"Webhook\"].json[\"headers\"][\"x-sd-env\"]}}"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -5200,
        800
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_pos/{{$node[\"Get po_details\"].json[\"data\"][0][\"po_num\"][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "po_status",
              "value": "=vendor_po_sent"
            }
          ]
        }
      },
      "name": "Update the po_status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        820,
        860
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/purchaseorders/{{$node[\"create po\"].json[\"purchaseorder\"][\"purchaseorder_id\"]}}/email?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Construct obj for sending mail\"].json.mail_obj}}"
      },
      "name": "Send email to vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1220,
        880
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "let poNumber = $node[\"Get po_details\"].json[\"data\"][0].id;\nlet poDate = $node[\"Get po_details\"].json[\"data\"][0].po_date;\nlet poTotal =$node[\"Get po_details\"].json[\"data\"][0].po_value;\nlet ccMailIds = $node[\"Get po_details\"].json.data[0].vendor.extra_cc_mail_ids?$node[\"Get po_details\"].json.data[0].vendor.extra_cc_mail_ids.map(cc=>cc.email):[];\nlet toMailIds = $node[\"Get po_details\"].json.data[0].vendor.extra_to_mail_ids?$node[\"Get po_details\"].json.data[0].vendor.extra_to_mail_ids.map(to=>to.email):[];\nlet vendorName = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_name\"];\nlet fileId = $node[\"Upload PO in mozart\"].json[\"data\"][\"id\"];\nlet operationAgentEmails = $node[\"Get po_details\"].json[\"data\"][0].operation_agents.map(agent=>agent.sdm_operation_agents_id.operation_agent.email);\nlet operationAgentNames = $node[\"Get po_details\"].json[\"data\"][0].operation_agents.map(agent=>agent.sdm_operation_agents_id.operation_agent.first_name);\nlet plantWiseCCmails = $node[\"Get contact details based on plant\"].json.data[0].cc_mails;\nlet allCcEmails = [...ccMailIds,...operationAgentEmails];\nallCcEmails.push(plantWiseCCmails)\ntoMailIds.push($node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"].trim());\nallCcEmails.push(\"vedantaiob.ops@shakedeal.com\");\nlet mailObj={\n  po_number : poNumber,\n  po_date : poDate,\n  po_total : poTotal,\n  cc_mail_ids : allCcEmails,\n  to_mail_ids:toMailIds,\n  vendor_name:vendorName,\n  file_id:fileId,\n  operation_agent_emails:operationAgentEmails,\n  operation_agent_names:operationAgentNames\n}\n\nitems[0].json.mail_obj = mailObj;\nreturn items;"
      },
      "name": "Construct obj for sending mail",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1000,
        860
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Create vendor\"].json[\"errors\"][0][\"message\"]}}",
              "value2": "=Field \"email\" has to be unique."
            }
          ]
        }
      },
      "name": "Check whether user exits or not",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1720,
        520
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/users?filter={\"email\":\"{{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"]}}\"}",
        "options": {}
      },
      "name": "Get user id",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1540,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp4",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1540,
        560
      ]
    },
    {
      "parameters": {
        "values": {
          "number": [
            {
              "name": "commission",
              "value": 1.02
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -5380,
        800
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://zeus.shakedeal.com/items/tally_pos?filter={\"id\":{\"_eq\":\"{{$node[\"Webhook\"].json[\"body\"][\"keys\"][0]}}\"}}",
        "options": {}
      },
      "name": "Get the PO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1540,
        880
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let tally_po = {};\nlet po_data = {}\n\n//Create contact obj\nlet contact = {};\ncontact.contact_name = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"];\ncontact.first_name = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"];\ncontact.last_name = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"last_name\"];\ncontact.email = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"email\"];\ncontact.mobile = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"mobile\"];\ncontact.gst_no = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"gst\"];\ncontact.pan_no = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"pan\"];\ncontact.company_name = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"];\n\n//Create vendor obj\nlet vendor = {};\nvendor.contact_name = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_name\"];\nvendor.first_name = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_name\"];\nvendor.last_name = \"\";\nvendor.email = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"].trim();\nvendor.mobile = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_phone\"];\nvendor.gst_no = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"gstin\"];\nvendor.pan_no = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"pan_no\"];\nvendor.company_name = $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_name\"];\n\n//Create line items obj\nlet lineItems = [];\nlet poItems = $node[\"Get the po items\"].json[\"data\"];\npoItems.forEach(function(poItem,index){\n  lineItems[index]={}\n  lineItems[index].item_name = poItem.product.product_name;\n  lineItems[index].description = poItem.product.description;\n  lineItems[index].sku = poItem.product.id;\n  lineItems[index].hsn_or_sac = poItem.hsn;\n  lineItems[index].unit = poItem.uom;\n  lineItems[index].quantity = poItem.requested_qty;\n  lineItems[index].rate = poItem.unit_price;\n  lineItems[index].product_type = \"goods\";\n  lineItems[index].tax_percentage = poItem.tax_percentage;\n})\n\npo_data.id = $node[\"Webhook\"].json[\"body\"][\"keys\"][0];\npo_data.cmp_gst_no = $node[\"Get po_details\"].json[\"data\"][0][\"sd_billing_address\"][\"gstin\"];\npo_data.reference_number = $node[\"Function to create po\"].json[\"reference_number\"];\npo_data.date = $node[\"Function to create po\"].json[\"date\"];\npo_data.expected_delivery_date = $node[\"Function to create po\"].json[\"expected_delivery_date\"];\npo_data.payment_terms = $node[\"Function to create po\"].json[\"payment_terms\"];\npo_data.total_cost = $node[\"Get po_details\"].json[\"data\"][0][\"po_value\"];\npo_data.source_of_supply = $node[\"Function to create po\"].json[\"source_of_supply\"];\npo_data.destination_of_supply = $node[\"Function to create po\"].json[\"destination_of_supply\"];\npo_data.delivery_address = $node[\"Function to create po\"].json[\"delivery_address\"];\npo_data.billing_address = \"\";\npo_data.contact = contact;\npo_data.vendor = vendor;\npo_data.line_items = lineItems;\npo_data.terms_and_conditions = $node[\"Function to create po\"].json[\"t&c\"];\n\n//tally_po.id = $node[\"Webhook\"].json[\"body\"][\"keys\"][0];\ntally_po = po_data;\n\nitems[0].json.tally_po = tally_po\nreturn items;"
      },
      "name": "Function to create tally PO obj",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1720,
        880
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Get the PO\"].json[\"data\"].length?true:false}}"
            }
          ]
        }
      },
      "name": "Check PO exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1960,
        880
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "=https://zeus.shakedeal.com/items/tally_pos/{{$node[\"Webhook\"].json[\"body\"][\"keys\"][0]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "tally_pos",
              "value": "={{$node[\"Function to create tally PO obj\"].json[\"tally_po\"]}}"
            }
          ]
        }
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2200,
        640
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://zeus.shakedeal.com/items/tally_pos",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "id",
              "value": "={{$node[\"Webhook\"].json[\"body\"][\"keys\"][0]}}"
            },
            {
              "name": "po_data",
              "value": "={{$node[\"Function to create tally PO obj\"].json[\"tally_po\"]}}"
            }
          ]
        }
      },
      "name": "Create E-invoice in tally",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2200,
        960
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_po_items?filter={\"vendor_po\":{\"_eq\":\"{{$node[\"Webhook\"].json[\"body\"][\"keys\"][0]}}\"}}&limit=-1&fields=*,product.*",
        "options": {}
      },
      "name": "Get the po items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -4540,
        800
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let binaries = {}\nconst bufferString = $node[\"Get the PO pdf\"].json.pdf_data\nconst bufferData = Buffer.from(bufferString, 'base64') // Replace 'YourBufferStringHere' with your actual buffer data\n\n\n\n\n\nconst binaryObject = {\n  fileName : \"data.pdf\",\n  data: bufferData.toString('base64'), // Convert buffer data to base64 for storage\n  mimeType: 'application/pdf' // Set the MIME type to indicate binary data\n};\nlet extension = \"pdf\"\n binaries[`data_0.${extension}`] = binaryObject\n\nreturn [{\n    binary: binaries\n}];\n\n"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -3320,
        800
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=https://sdpdf.shakedeal.com/po-pdf",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create po\"].json[\"invoiceObj\"]}}"
      },
      "name": "Get the PO pdf",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -3660,
        800
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/files/{{$node[\"Upload PO in vpanel\"].json[\"data\"][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "title",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"id\"]}}"
            },
            {
              "name": "filename_download",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"id\"]+\".pdf\"}}"
            }
          ]
        }
      },
      "name": "Update title in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2600,
        500
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/files/{{$node[\"Upload PO in mozart\"].json[\"data\"][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "title",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"id\"]}}"
            },
            {
              "name": "filename_download",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"id\"]+\".pdf\"}}"
            }
          ]
        }
      },
      "name": "Update title in mozart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2600,
        1020
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/files/{{$node[\"Upload PO in vpanel\"].json[\"data\"][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "uploaded_by",
              "value": "={{Array.isArray($node[\"Create po in vpanel\"].json.data)?$node[\"Create po in vpanel\"].json.data[0].vendor.vendor:$node[\"Create po in vpanel\"].json.data.vendor.vendor}}"
            }
          ]
        }
      },
      "name": "Update user created in pdf",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        180,
        660
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{$node[\"Function to map po and product\"].json.poItemsQuery}}",
        "additionalFields": {}
      },
      "name": "Postgres",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        700,
        660
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "94",
          "name": "Vendor Panel qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/send-vendor-po-mail",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Construct obj for sending mail\"].json.mail_obj}}"
      },
      "name": "Send mail to vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1360,
        840
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2024-03-06T13:03:14.088Z"
}