{
  "active": false,
  "connections": {
    "IMAP Email": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Read PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF": {
      "main": [
        [
          {
            "node": "Function1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function1": {
      "main": [
        [
          {
            "node": "FunctionItem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-09-14T11:50:41.140Z",
  "id": "358",
  "name": "My workflow 22",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "format": "resolved",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "IMAP Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        460,
        300
      ],
      "credentials": {
        "imap": {
          "id": "99",
          "name": "IMAP account 2"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "items[0].json.attachmentIndex = items[0].binary ? Object.values(items[0].binary).findIndex(key => key.mimeType === \"application/pdf\") : -1;\nif(items[0].json.attachmentIndex !== -1){\n  items[0].json.data = items[0].binary[items[0].json.attachmentIndex];\n}\n\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=attachment_{{$node[\"Function\"].json[\"attachmentIndex\"]}}"
      },
      "name": "Read PDF",
      "type": "n8n-nodes-base.readPDF",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "let data = {\n    \"id\": '',\n    \"user_created\": '',\n    \"date_created\": '',\n    \"user_updated\": null,\n    \"date_updated\": null,\n    \"po_value\": '',\n    \"delivery_status\": '',\n    //\"shipment_address\": '',\n    \"street_address\": '',\n    \"state\": '',\n    \"city\": '',\n    \"country\": '',\n    \"gstin\": '',\n    \"ship_street_address\": '',\n    \"ship_pincode\": '',\n    \"ship_city\": '',\n    \"ship_state\": '',\n    \"ship_country\": '',\n    \"po_date\": '',\n    \"po_delivery_date\": '',\n    \"poc_name\": '',\n    \"poc_contact_number\": '',\n    \"poc_email\": '',\n    \"productDetails\": [],\n    \"poItemDetails\": [],\n    \"po_document\": '',\n    \"po_net_value\": '',\n    \"po_status\": '',\n    \"calculated_gross_price\": '',\n    \"po_value_mismatch\": true,\n}\nlet gstin = 0;\nconst contentSubStringArray = $node[\"Read PDF\"].json[\"text\"];\nconst lines = contentSubStringArray.split('\\n');\nconsole.log(\"====================\", lines);\n\nfor (i = 0; i < lines.length; i++) {\n    if (lines[i].includes(\"PO No\") && !data.id) {\n        data.id = lines[i].split(\":\")[1].trim();\n    }\n    else if (lines[i].includes(\"Date :\")) {\n        console.log(\"___________date-----------\", lines[i].includes(\"Date\"))\n        let splitDateString = lines[i].split(\":\");\n        date = splitDateString[1];\n        console.log(\"*************************\", date)\n        data.po_date = date;\n\n    }\n    // PAN number\n    if (lines[i].includes(\"PAN:\")) {\n        console.log(\"__________________pan\", lines[i].includes(\"PAN:\"))\n        let splitPanString = lines[i].split(\":\");\n        pan = splitPanString[1];\n        data.pan = pan;\n    }\n    // GSTIN number\n    else if (lines[i].includes(\"GSTIN:\")) {\n        console.log(\"________________________gstin__,\", lines[i].includes(\"GSTIN\"))\n        let splitGstnString = lines[i];\n        const regex = /GSTIN:\\s*([A-Za-z0-9]{15})/;\n        gstin = splitGstnString.match(regex);\n        if (gstin) {\n            data.gstin = gstin[1];\n        } else {\n            data.gstin = null;\n        }\n    }\n    else if (lines[i].includes(\"Seller's Detail\")) {\n        console.log(\"::::::seller details\", lines[i].includes(\"Seller's Detail\"))\n        const startString = \"Seller's Detail\";\n        const endString = \"Please supply in accordance with the stipulated terms and conditions attached. Kindly send us your\";\n        const startIndex = lines.indexOf(startString);\n        const endIndex = lines.indexOf(endString);\n        const addr = /^(.*?)(?=\\b\\d{6}\\b)/;\n        shipping_address = \"ADANI FORWARDING AGENT PVT LTD SERVEY NO 44/1, 44/1/2 VILLAGE: TUMB,TEHSIL: UMBERGAON VALSAD 396150 GUJARAT\";\n        data.shipping_address = shipping_address;\n        data.shipment_address = data.shipping_address;\n        street_address = data.shipment_address.match(addr);\n\n        if (street_address == null || street_address.length < 0) {\n            street_address2 = data.shipment_address;\n            console.log(\"__-----------street\", street_address2)\n            data.street_address = street_address2.replace(/,/g, \" \").trim();\n            data.ship_street_address = street_address2.replace(/,/g, \" \").trim();\n\n        } else {\n            data.street_address = street_address && street_address[0] ? street_address[0].replace(/,/g, \" \").trim() : null;\n            data.ship_street_address = street_address && street_address[0] ? street_address[0].replace(/,/g, \" \").trim() : null;\n        }\n\n\n\n        if (data.shipment_address) {\n            const regex = /-?\\d+(\\.\\d+)?/g;\n            const pin = /\\b\\d{6}\\b/;\n            billing_address = data.street_address.split(\"  \").reverse(\"\");\n            splitBillingaddress = billing_address;\n            city = splitBillingaddress[0].split(\",\");\n            state = billing_address[0].split(\" \");\n            console.log(\"'''''''''''''''''''''''\", state)\n            data.city = city[0] || \"\";\n            data.ship_city = city[0] || \"\";\n            //  state = splitBillingaddress[0].split(\",\");\n\n            data.state = \"GUJARAT\";\n            data.ship_state = \"GUJARAT\";\n            country = splitBillingaddress[0].split(\",\");\n            data.country = \"INDIA\";\n            data.ship_country = \"INDIA\";\n            pincode = data.shipment_address.match(pin);\n            data.pincode = pincode && pincode[0] ? parseInt(pincode[0]) : null;\n            data.ship_pincode = pincode && pincode[0] ? parseInt(pincode[0]) : null;\n        }\n    }\n\n    // POC NAME,EMAIL,PHONE NUMBER\n    else if (lines[i].includes(\"Our Contact Details\")) {\n\n        console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\", lines[i].includes(\"Our Contact Details\"));\n        let excludeStartStringFound = false;\n        let skipIndex = i;\n        for (t = 0; t < 25; t++) {\n            if (lines[i + t] && lines[i + t].includes(\"Note regarding\") && !excludeStartStringFound) {\n                excludeStartStringFound = true;\n            }\n            if (excludeStartStringFound && lines[i + t].includes(\"ItemMaterial/DescriptionQuantityUnitPrice\")) {\n                skipIndex = i + t;\n                break;\n            }\n        }\n\n        // POC_NUMBER\n        let phone_match = /(\\+\\d{2}\\s*\\(\\d+\\)\\s*\\d+)|(\\+\\d{2}\\s*\\d{10})|\\d{8,}/g;\n        let phone_match2 = /\\(\\d{3}\\)\\s*\\d{7}/;\n        let phone_match3 = /\\b\\d{10}\\b/;\n        let regex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/;\n        console.log(\"-------regex------\", regex)\n        let phone = 0;\n        let poc_email = 0;\n        for (let u = 0; u < 10; u++) {\n            if (lines[skipIndex + u].match(phone_match)) {\n                phone = lines[skipIndex + u].match(phone_match)\n\n                data.poc_contact_number = (phone.length > 0) ? phone[0] : null;\n                console.log(\"_---------phoe--------\", data.poc_contact_number)\n            }\n            if (lines[skipIndex + u].match(regex)) {\n                poc_email = lines[skipIndex + u].match(regex)\n                console.log(\"-----------email---------\", poc_email)\n            }\n            if (lines[i].match(regex)) {\n                poc_email = lines[i].match(regex)\n            }\n            if (lines[i + 1].match(regex)) {\n                poc_email = lines[i + 1].match(regex)\n            }\n\n            //POC_EMAIL \n            data.poc_email = (poc_email && poc_email.length > 0) ? poc_email[0].slice(5) : null;\n            console.log(\":::::::::::::::::::email::::::::::::::::\", data.poc_email);\n            // POC_NAME\n            data.poc_name = poc_email.length > 0 ? poc_email[0].slice(5).split(\"@\")[0].replaceAll('.', \" \") : null;\n            console.log(\":::::::::::::::::::name::::::::::::::::\", data.poc_name);\n        }\n\n\n    }\n    //check order value summary started\n    else if (lines[i].includes(\"Order Value Summary\")) {\n        console.log(\">>>>>>>>>>>>>>>>ordersummary>>>>>>>>>>>\", lines[i].includes(\"Order Value Summary\"));\n\n    }\n    //PO Net Value with out tax\n    else if (lines[i].includes(\"Basic Price\")) {\n        data.po_net_value = parseFloat(lines[i + 1].replace(\"INR\", \"\").replaceAll(',', '').trim());\n        console.log(\"..............datavalue...........\", data.po_net_value);\n    }\n\n    //PO tax\n    else if (lines[i].includes(\"Taxes\") && !data.po_taxes) {\n        data.po_taxes = parseFloat(lines[i + 1].replace(\"INR\", \"\").replaceAll(',', '').trim());\n    }\n\n    //PO other tax\n    else if (lines[i].includes(\"Other Charges\") && !data.po_other_taxes) {\n        data.po_other_taxes = parseFloat(lines[i + 1].replace(\"INR\", \"\").replaceAll(',', '').trim());\n    }\n\n    //PO Value with  tax\n    else if (lines[i].includes(\"PO Price\") && !data.po_value) {\n        data.po_value = parseFloat(lines[i + 1].replace(\"INR\", \"\").replaceAll(',', '').trim());\n    }\n    else if (lines[i].includes(\"PO Price\") && !data.calculated_gross_price) {\n        data.calculated_gross_price += parseFloat(lines[i + 1].replace(\"INR\", \"\").replaceAll(',', '').trim());\n    }\n\n\n}\n\n// All Items\n\n\nfor (i = 0; i < lines.length; i++) {\n\n    if (lines[i].includes(\"ANNEXURE-I\") && lines[i + 1].includes(\"PRICE SCHEDULE\")) {\n        poItemsFound = true;\n    }\n\n\n    if (lines[i].includes(\"Sr. No.Material Code/DescriptionUOM\") && lines[i + 1].includes(\"Quantity\")) {\n        i = i + 2; //Added i+2 to skip 2 lines so that can get serial number and matcode\n\n        //All PRoduct Items Iteration\n        while (i <= lines.length && !lines[i] == \"\") {\n            // PO_ITEMS\n            let poItemDetails = {\n                id: '',\n                products: [],\n                hsn: '',\n                uom: '',\n                product: '',\n                qty: '',\n                unit_price: '',\n                net_price: '',\n                gross_price: '',\n                tax_percentage: '',\n                tax_value: '',\n                description: '',\n            }\n            // PRODUCTS\n            let productDetails = {\n                id: '',\n                product_name: '',\n                hsn: '',\n                product_type: 2\n                //main_category:'',\n            }\n\n            // PRODUCT CODE - SKU CODE\n            let prod = \"\";\n            let split_product = lines.slice(i, i + 30)\n            console.log(\"--------split_product----------\", split_product);\n\n            // SERIAL NUMBER\n\n            let serialNumber = lines[i].trim().substring(0, lines[i].trim().length - 10).trim();\n            console.log(\"-----serialNumber-----\", serialNumber);\n            poItemDetails.id = data.id + \"-\" + serialNumber;\n            console.log(\"_______poItemDetails.id______________\", poItemDetails.id, serialNumber);\n\n            // HSN Code\n\n            hsn = lines[i + 1].replace(\"HSN No:\", \"\").trim();\n            console.log(\"-----------hsn\", hsn);\n            poItemDetails.hsn = hsn;\n            productDetails.hsn = hsn;\n\n            console.log(\"------productDetails-------------\", productDetails.hsn);\n\n\n            // ORDERED QTY and UOM\n\n            qty = lines[i + 4].replace(\"Quantity:\", \"\").trim();\n            poItemDetails.qty = qty;\n            productDetails.qty = qty;\n            console.log(\";;;;;;;qty;;;;;;;;;;\", productDetails.qty);\n\n            uom = lines[i + 3].replace(\"UOM:\", \"\").trim();\n            poItemDetails.uom = uom;\n            productDetails.uom = uom;\n            console.log(\";;;;;;;uom;;;;;;;;;;\", productDetails.uom);\n            // PRODUCT NAME \n            product_name = lines[i + 2].replace(\"\", \"\").trim();\n            poItemDetails.product_name = product_name;\n            productDetails.product_name = product_name;\n            console.log(\";;;;;;;productDetails. product_name;;;;;;;;;;\", productDetails.product_name);\n\n\n            //replace last qty and uom from name\n            productDetails.product_name = productDetails.product_name.replace(/\\d+\\s*PC$/, \"\").trim();\n            console.log(\"------ productDetails.product_name--------\", productDetails.product_name);\n\n            //To loop till product detials ends\n            while (i < lines.length - 1 && !lines[i].replace(/ /g, \"\").includes(\"DateQuantityPlant\")) {\n                if (lines[i].includes(\"Item Basic PriceINR\")) {\n                    let unitAndNetTotal = lines[i + 1].trim().split(\" \");\n                    unitPrice = parseFloat(unitAndNetTotal[0].replaceAll(',', '').trim());\n                    netTotal = parseFloat(unitAndNetTotal[1].replaceAll(',', '').trim());\n\n                    poItemDetails.unit_price = unitPrice;\n                    poItemDetails.net_price = netTotal;\n\n                }\n                if (lines[i].includes(\"Item PO Price\")) {\n                    grossTotal = parseFloat(lines[i + 1].replaceAll(',', '').trim());\n                    poItemDetails.gross_price = grossTotal;\n\n                }\n                if (lines[i].includes(\"CGST\")) {\n                    gst = parseFloat(lines[i].replace(\"CGST\", \"\").replaceAll('%', '').trim()) * 2;\n                    totalTax = parseFloat(lines[i + 1].replaceAll(',', '').trim()) * 2;\n                    poItemDetails.tax_percentage = gst;\n                    poItemDetails.tax_value = totalTax;\n\n                }\n                if (lines[i].includes(\"IGST\")) {\n                    gst = parseFloat(lines[i].replace(\"IGST\", \"\").replaceAll('%', '').trim());\n                    totalTax = parseFloat(lines[i + 1].replaceAll(',', '').trim());\n                }\n                i++;\n            }\n\n            deliveryDate = lines[i + 1] ? new Date(lines[i + 1].split(\" \")[0].split(\".\").reverse().join(\"-\")) : \"\";\n            if (!data.po_delivery_date || data.po_delivery_date < deliveryDate) {\n                data.po_delivery_date = deliveryDate;\n                poItemDetails.delivery_date = deliveryDate;\n            }\n            i = i + 2;\n\n            data.poItemDetails.push(poItemDetails);\n            poItemDetails.products.push(productDetails)\n            data.calculated_gross_price = data.calculated_gross_price + (unitPrice * qty) + ((unitPrice * qty) * (gst / 100));\n\n        }\n    }\n\n}\n\n//data.calculated_gross_price = calculatedGrossPrice;\ndata.po_value_mismatch = data.calculated_gross_price == data.po_value ? false : true;\n//area.pos.po_document = $node[\"Post the file\"].json[\"data\"][\"id\"];\nlet products = data.productDetails;\nreturn data;\nlet productIds = products.map(product => product.id);\nitems[0].json.data = data;\nitems[0].json.productIds = productIds;\nitems[0].json.products = products;\n\nreturn items;\n\n"
      },
      "name": "FunctionItem",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1380,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let poData=$node[\"Read PDF\"].json[\"text\"];\n\nlet startIndexPoDetails=poData.indexOf(\"Purchase Order\");\n// let endIndexPoDetails=poData.indexOf(\"Order Value Summary\"); \nlet endIndexPoDetails=poData.indexOf(\"In words, RUPEES\");\n\nlet startIndexPoItems=poData.indexOf(\"ANNEXURE-I\");\nlet endIndexPoItems=poData.indexOf(\"Total No. Of Items\");\n\nlet poItems=poData.substring(startIndexPoItems,endIndexPoItems).split('\\n');\n\nlet poExtracted=[]; \n\nlet skip=false;\nfor (i = 0; i < poItems.length; i++) {\n  if(poItems[i].includes(\"Disclaimer\")){\n    skip=true;\n  }\n  if(skip && poItems[i].includes(\"Sr. No.Material Code/DescriptionUOM\") && poItems[i+1].includes(\"Quantity\")){\n    skip=false;\n    i=i+2;\n  }\n  if(!skip){\n    poExtracted.push(poItems[i]);\n  }\n}\n\nitems[0]={\n  \"poDetails\":poData.substring(startIndexPoDetails,endIndexPoDetails).split('\\n'),\n  \"poItems\":poExtracted\n};\n\nreturn items[0];"
      },
      "name": "Function1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1080,
        300
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-10-04T05:31:56.953Z"
}