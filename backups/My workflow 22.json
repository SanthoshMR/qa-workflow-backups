{
  "active": false,
  "connections": {
    "IMAP Email": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Read PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF": {
      "main": [
        [
          {
            "node": "FunctionItem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-09-14T11:50:41.140Z",
  "id": "358",
  "name": "My workflow 22",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "format": "resolved",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "IMAP Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        460,
        300
      ],
      "credentials": {
        "imap": {
          "id": "99",
          "name": "IMAP account 2"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "items[0].json.attachmentIndex = items[0].binary ? Object.values(items[0].binary).findIndex(key => key.mimeType === \"application/pdf\") : -1;\nif(items[0].json.attachmentIndex !== -1){\n  items[0].json.data = items[0].binary[items[0].json.attachmentIndex];\n}\n\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=attachment_{{$node[\"Function\"].json[\"attachmentIndex\"]}}"
      },
      "name": "Read PDF",
      "type": "n8n-nodes-base.readPDF",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "let data= {//\n\"id\": '',\n\"user_created\": '',\n\"date_created\": '',\n\"user_updated\": null,\n\"date_updated\": null,\n\"po_value\": '',\n\"delivery_status\": '',\n//\"shipment_address\": '',\n\"street_address\":'',\n\"state\": '',\n\"city\": '',\n\"country\": '',\n\"gstin\": '',\n\"ship_street_address\":'',\n\"ship_pincode\": '',\n\"ship_city\": '',\n\"ship_state\": '',\n\"ship_country\": '',\n\"po_date\": '',\n\"po_delivery_date\": '',\n\"poc_name\": '',\n\"poc_contact_number\": '',\n\"poc_email\": '',\n\"po_document\": '',\n\"po_net_value\": '',\n\"po_status\": '',\n\"calculated_gross_price\": '',\n\"po_value_mismatch\": true,     \n}\nlet gstin = 0;\nconst contentSubStringArray = $node[\"Read PDF\"].json[\"text\"];\nconst lines = contentSubStringArray.split('\\n');\n console.log(\"====================\",lines);\n\nfor (i = 0; i < lines.length; i++) {\n \n    if (lines[i].includes(\"PO No\")) {\n        console.log(\"::::::::::::::::::::::\",lines[i])\n       data.id=lines[i];\n    }\nelse if (lines[i].includes(\"Date :\")) {\n    console.log(\"___________date-----------\",lines[i].includes(\"Date\"))\n        let splitDateString = lines[i].split(\":\");\n        date = splitDateString[1];\n        console.log(\"*************************\",date)\n        data.po_date = date;\n    \n        }\n         // PAN number\n    if (lines[i].includes(\"PAN:\")) {\n        console.log(\"__________________pan\",lines[i].includes(\"PAN:\"))\n        let splitPanString = lines[i].split(\":\");\n        pan = splitPanString[1];\n        data.pan = pan;\n    }\n         // GSTIN number\n    else if (lines[i].includes(\"GSTIN:\")) {\n        console.log(\"________________________gstin__,\",lines[i].includes(\"GSTIN\"))\n        let splitGstnString = lines[i];\n        const regex = /GSTIN:\\s*([A-Za-z0-9]{15})/;\n        gstin = splitGstnString.match(regex);\n        if (gstin) {\n            data.gstin = gstin[1];\n        } else {\n            data.gstin = null;\n        }\n    }\n    else if (lines[i].includes(\"Seller's Detail\")) {\n        console.log(\"::::::seller details\",lines[i].includes(\"Seller's Detail\"))\n        const startString = \"Seller's Detail\";\n        const endString = \"Please supply in accordance with the stipulated terms and conditions attached. Kindly send us your\";\n        const startIndex = lines.indexOf(startString);\n        const endIndex = lines.indexOf(endString); \n        const addr = /^(.*?)(?=\\b\\d{6}\\b)/;\n        shipping_address = lines.slice(startIndex + 1, endIndex).join();\n        data.shipping_address = shipping_address;\n        data.shipment_address = data.shipping_address;\n        street_address = data.shipment_address.match(addr);\n        \n      if(street_address == null || street_address.length <0){\n            street_address2 = data.shipment_address;\n             console.log(\"__-----------street\",street_address2)\n            data.street_address = street_address2.replace(/,/g, \" \").trim();\n            data.ship_street_address = street_address2.replace(/,/g, \" \").trim();\n             \n       } else{\n           data.street_address = street_address && street_address[0] ? street_address[0].replace(/,/g, \" \").trim() : null;\n          data.ship_street_address = street_address && street_address[0] ? street_address[0].replace(/,/g, \" \").trim() : null;\n        }\n         \n\n        \n        if (data.shipment_address) {\n            const regex = /-?\\d+(\\.\\d+)?/g;\n            const pin = /\\b\\d{6}\\b/;\n             billing_address = data.shipment_address.split(\"  \").reverse(\"\");\n            splitBillingaddress = billing_address;\n             city = splitBillingaddress[0].split(\",\");\n           state =billing_address[0].split(\" \");\n           console.log(\"'''''''''''''''''''''''\",state)\n            data.city = city || \"\";\n            data.ship_city = city[0] || \"\";\n          //  state = splitBillingaddress[0].split(\",\");\n           \n            data.state = state[0] || \"\";\n            data.ship_state = state[0] || \"\";\n            country = splitBillingaddress[0].split(\",\");\n            data.country = country[1] || \"\";\n            data.ship_country = country[1] || \"\";\n            pincode = data.shipment_address.match(pin);\n            data.pincode = pincode && pincode[0] ? parseInt(pincode[0]) : null;\n            data.ship_pincode = pincode && pincode[0] ? parseInt(pincode[0]) : null;\n        }\n    }\n\n    // POC NAME,EMAIL,PHONE NUMBER\n    else if (lines[i].includes(\"Our Contact Details\")) {\n\n        console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\",lines[i].includes(\"Our Contact Details\"));\n        let excludeStartStringFound=false;\n        let skipIndex=i;\n        for (t=0; t<25; t++){  \n                if(lines[i+t] && lines[i+t].includes(\"Note regarding\") && !excludeStartStringFound){\n                    excludeStartStringFound=true;\n                }\n                if(excludeStartStringFound && lines[i+t].includes(\"ItemMaterial/DescriptionQuantityUnitPrice\")){\n                    skipIndex=i+t;\n                    break;\n                }\n            }\n       \n            // POC_NUMBER\n            let phone_match = /(\\+\\d{2}\\s*\\(\\d+\\)\\s*\\d+)|(\\+\\d{2}\\s*\\d{10})|\\d{8,}/g;\n            let phone_match2 = /\\(\\d{3}\\)\\s*\\d{7}/;\n            let phone_match3 = /\\b\\d{10}\\b/;\n            let regex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/;\n            console.log(\"-------regex------\",regex)\n            let phone=0;\n            let poc_email=0;\n            for (let u = 0; u < 10; u++) {\n                if (lines[skipIndex + u].match(phone_match)) { \n                    phone = lines[skipIndex + u].match(phone_match)\n                    \n                    data.poc_contact_number=(phone.length >0) ? phone[0] : null;\n                    console.log(\"_---------phoe--------\",  data.poc_contact_number)\n                }\n               if(lines[skipIndex + u].match(regex)){\n                    poc_email = lines[skipIndex + u].match(regex)\n                    console.log(\"-----------email---------\",poc_email)\n                }\n                if(lines[i].match(regex)){\n                        poc_email = lines[i].match(regex)\n                } \n                if(lines[i+1].match(regex)){\n                    poc_email = lines[i+1].match(regex)\n                }\n            \n            //POC_EMAIL \n          data.poc_email = (poc_email && poc_email.length >0) ? poc_email[0].slice(5) : null;\nconsole.log(\":::::::::::::::::::email::::::::::::::::\", data.poc_email);\n            // POC_NAME\n           data.poc_name = poc_email.length > 0 ? poc_email[0].slice(5).split(\"@\")[0].replaceAll('.',\" \") : null;\n           console.log(\":::::::::::::::::::name::::::::::::::::\", data.poc_name);\n        \n       \n    }\n            \n}\n  \n}  \n\n  \nreturn {\"id\":data.id,\"po_date\":data.po_date,\"gstin\":  data.gstin,\"pan\":data.pan,\"street_address\":data.street_address,data}"
      },
      "name": "FunctionItem",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-09-20T09:50:13.515Z"
}