{
  "active": false,
  "connections": {
    "IMAP Email": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Read PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF": {
      "main": [
        [
          {
            "node": "FunctionItem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-09-14T11:50:41.140Z",
  "id": "358",
  "name": "My workflow 22",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "format": "resolved",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "IMAP Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        460,
        300
      ],
      "credentials": {
        "imap": {
          "id": "99",
          "name": "IMAP account 2"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "items[0].json.attachmentIndex = items[0].binary ? Object.values(items[0].binary).findIndex(key => key.mimeType === \"application/pdf\") : -1;\nif(items[0].json.attachmentIndex !== -1){\n  items[0].json.data = items[0].binary[items[0].json.attachmentIndex];\n}\n\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=attachment_{{$node[\"Function\"].json[\"attachmentIndex\"]}}"
      },
      "name": "Read PDF",
      "type": "n8n-nodes-base.readPDF",
      "typeVersion": 1,
      "position": [
        900,
        300
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "let data= {\n\"id\": '',\n\"user_created\": '',\n\"date_created\": '',\n\"user_updated\": null,\n\"date_updated\": null,\n\"po_value\": '',\n\"delivery_status\": '',\n//\"shipment_address\": '',\n\"street_address\":'',\n\"state\": '',\n\"city\": '',\n\"country\": '',\n\"gstin\": '',\n\"ship_street_address\":'',\n\"ship_pincode\": '',\n\"ship_city\": '',\n\"ship_state\": '',\n\"ship_country\": '',\n\"po_date\": '',\n\"po_delivery_date\": '',\n\"poc_name\": '',\n\"poc_contact_number\": '',\n\"poc_email\": '',\n\"po_document\": '',\n\"po_net_value\": '',\n\"po_status\": '',\n\"calculated_gross_price\": '',\n\"po_value_mismatch\": true,     \n}\nlet gstin = 0;\nconst contentSubStringArray = $node[\"Read PDF\"].json[\"text\"];\nconst lines = contentSubStringArray.split('\\n');\n console.log(\"====================\",lines);\n\nfor (i = 0; i < lines.length; i++) {\n \n   /* if (lines[i].includes(\"PO No\")) {\n        console.log(\"::::::::::::::::::::::\",lines[i])\n       data.id=lines[i];\n    }*/\n      if (lines[i].includes(\"PO No\") && !data.id) {\n        data.id =lines[i].split(\":\")[1].trim();\n    }\nelse if (lines[i].includes(\"Date :\")) {\n    console.log(\"___________date-----------\",lines[i].includes(\"Date\"))\n        let splitDateString = lines[i].split(\":\");\n        date = splitDateString[1];\n        console.log(\"*************************\",date)\n        data.po_date = date;\n    \n        }\n         // PAN number\n    if (lines[i].includes(\"PAN:\")) {\n        console.log(\"__________________pan\",lines[i].includes(\"PAN:\"))\n        let splitPanString = lines[i].split(\":\");\n        pan = splitPanString[1];\n        data.pan = pan;\n    }\n         // GSTIN number\n    else if (lines[i].includes(\"GSTIN:\")) {\n        console.log(\"________________________gstin__,\",lines[i].includes(\"GSTIN\"))\n        let splitGstnString = lines[i];\n        const regex = /GSTIN:\\s*([A-Za-z0-9]{15})/;\n        gstin = splitGstnString.match(regex);\n        if (gstin) {\n            data.gstin = gstin[1];\n        } else {\n            data.gstin = null;\n        }\n    }\n    else if (lines[i].includes(\"Seller's Detail\")) {\n        console.log(\"::::::seller details\",lines[i].includes(\"Seller's Detail\"))\n        const startString = \"Seller's Detail\";\n        const endString = \"Please supply in accordance with the stipulated terms and conditions attached. Kindly send us your\";\n        const startIndex = lines.indexOf(startString);\n        const endIndex = lines.indexOf(endString); \n        const addr = /^(.*?)(?=\\b\\d{6}\\b)/;\n        shipping_address = lines.slice(startIndex + 1, endIndex).join();\n        data.shipping_address = shipping_address;\n        data.shipment_address = data.shipping_address;\n        street_address = data.shipment_address.match(addr);\n        \n      if(street_address == null || street_address.length <0){\n            street_address2 = data.shipment_address;\n             console.log(\"__-----------street\",street_address2)\n            data.street_address = street_address2.replace(/,/g, \" \").trim();\n            data.ship_street_address = street_address2.replace(/,/g, \" \").trim();\n             \n       } else{\n           data.street_address = street_address && street_address[0] ? street_address[0].replace(/,/g, \" \").trim() : null;\n          data.ship_street_address = street_address && street_address[0] ? street_address[0].replace(/,/g, \" \").trim() : null;\n        }\n         \n\n        \n        if (data.shipment_address) {\n            const regex = /-?\\d+(\\.\\d+)?/g;\n            const pin = /\\b\\d{6}\\b/;\n             billing_address = data.street_address.split(\"  \").reverse(\"\");\n            splitBillingaddress = billing_address;\n             city = splitBillingaddress[0].split(\",\");\n           state =billing_address[0].split(\" \");\n           console.log(\"'''''''''''''''''''''''\",state)\n            data.city = city[0] || \"\";\n            data.ship_city = city[0] || \"\";\n          //  state = splitBillingaddress[0].split(\",\");\n           \n            data.state = \"GUJARAT\";\n            data.ship_state = \"GUJARAT\";\n            country = splitBillingaddress[0].split(\",\");\n            data.country = \"INDIA\";\n            data.ship_country =\"INDIA\" ;\n            pincode = data.shipment_address.match(pin);\n            data.pincode = pincode && pincode[0] ? parseInt(pincode[0]) : null;\n            data.ship_pincode = pincode && pincode[0] ? parseInt(pincode[0]) : null;\n        }\n    }\n\n    // POC NAME,EMAIL,PHONE NUMBER\n    else if (lines[i].includes(\"Our Contact Details\")) {\n\n        console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\",lines[i].includes(\"Our Contact Details\"));\n        let excludeStartStringFound=false;\n        let skipIndex=i;\n        for (t=0; t<25; t++){  \n                if(lines[i+t] && lines[i+t].includes(\"Note regarding\") && !excludeStartStringFound){\n                    excludeStartStringFound=true;\n                }\n                if(excludeStartStringFound && lines[i+t].includes(\"ItemMaterial/DescriptionQuantityUnitPrice\")){\n                    skipIndex=i+t;\n                    break;\n                }\n            }\n       \n            // POC_NUMBER\n            let phone_match = /(\\+\\d{2}\\s*\\(\\d+\\)\\s*\\d+)|(\\+\\d{2}\\s*\\d{10})|\\d{8,}/g;\n            let phone_match2 = /\\(\\d{3}\\)\\s*\\d{7}/;\n            let phone_match3 = /\\b\\d{10}\\b/;\n            let regex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/;\n            console.log(\"-------regex------\",regex)\n            let phone=0;\n            let poc_email=0;\n            for (let u = 0; u < 10; u++) {\n                if (lines[skipIndex + u].match(phone_match)) { \n                    phone = lines[skipIndex + u].match(phone_match)\n                    \n                    data.poc_contact_number=(phone.length >0) ? phone[0] : null;\n                    console.log(\"_---------phoe--------\",  data.poc_contact_number)\n                }\n               if(lines[skipIndex + u].match(regex)){\n                    poc_email = lines[skipIndex + u].match(regex)\n                    console.log(\"-----------email---------\",poc_email)\n                }\n                if(lines[i].match(regex)){\n                        poc_email = lines[i].match(regex)\n                } \n                if(lines[i+1].match(regex)){\n                    poc_email = lines[i+1].match(regex)\n                }\n            \n            //POC_EMAIL \n          data.poc_email = (poc_email && poc_email.length >0) ? poc_email[0].slice(5) : null;\nconsole.log(\":::::::::::::::::::email::::::::::::::::\", data.poc_email);\n            // POC_NAME\n           data.poc_name = poc_email.length > 0 ? poc_email[0].slice(5).split(\"@\")[0].replaceAll('.',\" \") : null;\n           console.log(\":::::::::::::::::::name::::::::::::::::\", data.poc_name);\n    }      \n\n  \n    }\n        //check order value summary started\n   else if(lines[i].includes(\"Order Value Summary\")){\n        console.log(\">>>>>>>>>>>>>>>>ordersummary>>>>>>>>>>>\",lines[i].includes(\"Order Value Summary\"));\n     \n    }\n        //PO Net Value with out tax\n       else if (lines[i].includes(\"Basic Price\") ) {\n            data.po_net_value = parseFloat(lines[i+1].replace(\"INR\",\"\").replaceAll(',', '').trim());\n            console.log(\"..............datavalue...........\",data.po_net_value);\n        }\n\n        //PO tax\n       else if (lines[i].includes(\"Taxes\") && !data.po_taxes) {\n            data.po_taxes = parseFloat(lines[i+1].replace(\"INR\",\"\").replaceAll(',', '').trim());\n        }\n\n        //PO other tax\n       else if (lines[i].includes(\"Other Charges\") && !data.po_other_taxes) {\n            data.po_other_taxes = parseFloat(lines[i+1].replace(\"INR\",\"\").replaceAll(',', '').trim());\n        }\n\n        //PO Value with  tax\n       else if (lines[i].includes(\"PO Price\") && !data.po_value) {\n            data.po_value = parseFloat(lines[i+1].replace(\"INR\",\"\").replaceAll(',', '').trim());\n        }\n\n        \n    // MULTIPLE PO_ITEMS\n    else if (lines[i].includes(\"HSN No\")) {\n       \n        // PO_ITEMS\n        let obj = {\n            id: '',\n            products: [],\n            hsn: '',\n            uom: '',\n            product: '',\n            ordered_qty: '',\n            unit_price: '',\n            net_price: '',\n            gross_price: '',\n            tax_percentage: '',\n            tax_value: '',\n            description: '',\n        }\n        // PRODUCTS\n        let product_details = {\n            id: '',\n            product_name: '',\n            hsn: '',\n            product_type: 2\n            //main_category:'',\n        }\n\n        // PRODUCT CODE - SKU CODE\n        let prod = \"\";\n        let split_product = lines.slice(i, i + 30)\n        split_product.map((e, j) => {\n            if(prod!=\"\"){\n                let skuLength = prod.match(/[a-zA-Z0-9]/g).length;                \n                if(skuLength < 11){\n                    let onlySKUDigit=prod.replace(/[^0-9]/gi, \"\").length;\n                    if(onlySKUDigit < 10){\n                        prod=\"\";\n                    }\n                }\n                else{\n                    let onlySKULetters=prod.replace(/[^a-z]/gi, \"\").length;\n                    let onlySKUDigit=prod.replace(/[^0-9]/gi, \"\").length;\n                    \n                    if(!(onlySKULetters <= 5 && onlySKUDigit > 6)){\n                        prod=\"\"\n                    }\n\n                }\n            }\n            if (e.includes(\"Gross Price\") && prod == \"\") {\n                if(split_product[j + 1].includes(\"Integrated\")){\n                    prod = split_product[j + 2];\n                    if (prod.startsWith(\"Quote ID:\")) {\n                    prod = prod.replace(\"Quote ID:\", \"\").trim();\n                    }\n                    if(prod.length < 16 && !prod.includes(\" \")){\n                    obj.product = prod;\n                    }                    \n                    product_details.id = obj.product;\n                } else if (split_product[j + 1].includes(\"Central\") && prod == \"\") {\n                   let secondMap = split_product.slice(j + 1);\n                   console.log(secondMap);\n                   \n                   secondMap.map((el, k) => {\n                    if (el.includes(\"Note regarding\") && !removeStartStringFound) {\n                        removeStartStringFound = true;\n                    }\n                    if (removeStartStringFound && el.includes(\"Supplier Product Number\")) {\n                        skipindex = k + 1;\n                    }\n                    let skucode = secondMap[k + 1];\n                    console.log(\"-----------\");\n                    console.log(k);\n                    console.log(\"-----------\");\n                    console.log(skucode);\n                    if (skucode && skucode.startsWith(\"Quote ID:\")) {\n                    skucode = skucode.replace(\"Quote ID:\", \"\").trim();\n                    }\n                    if(skucode.length < 16 && !skucode.includes(\" \")){\n                    obj.product = skucode;\n                    }\n                    product_details.id = obj.product;\n                });\n                }else if(split_product[j + 1].includes(\"Integrated\") == false){\n                    prod = split_product[j + 1];\n                    if (prod.startsWith(\"Quote ID:\")) {\n                    prod = prod.replace(\"Quote ID:\", \"\").trim();\n                    }\n                    if(prod.length < 16 && !prod.includes(\" \")){\n                    obj.product = prod;\n                    }                    \n                    product_details.id = obj.product;\n                } else {\n                        prod = split_product[j + 2];\n                        if (prod.startsWith(\"Quote ID:\")) {\n                        prod = prod.replace(\"Quote ID:\", \"\").trim();\n                        }\n                        if(prod.length < 16 && !prod.includes(\" \")){\n                        obj.product = prod;\n                        }                    \n                        product_details.id = obj.product;\n                }\n            } else if (e.includes(\"Integrated GST\") && prod == \"\") {\n                prod = split_product[j + 1];\n                if (prod.startsWith(\"Quote ID:\")) {\n                    prod = prod.replace(\"Quote ID:\", \"\").trim();\n                    }\n                if(prod.length < 16 && !prod.includes(\" \")){\n                    obj.product = prod;\n                    }                    \n                    product_details.id = obj.product;\n            } else if (e.includes(\"#\") && prod == \"\") {\n                prod = split_product[j - 1];\n                if (prod.startsWith(\"Quote ID:\")) {\n                    prod = prod.replace(\"Quote ID:\", \"\").trim();\n                    }\n                if(prod.length < 16 && !prod.includes(\" \")){\n                    obj.product = prod;\n                    }                    \n                    product_details.id = obj.product;\n            } else if (e.includes(\"<p>\") && prod == \"\") {\n                prod = split_product[j - 1];\n                if (prod.startsWith(\"Quote ID:\")) {\n                    prod = prod.replace(\"Quote ID:\", \"\").trim();\n                    }\n                if(prod.length < 16 && !prod.includes(\" \")){\n                    obj.product = prod;\n                    }                    \n                    product_details.id = obj.product;\n            } else if (e.includes(\"<ul>\") && prod == \"\") {\n                prod = split_product[j - 1];\n                if (prod.startsWith(\"Quote ID:\")) {\n                    prod = prod.replace(\"Quote ID:\", \"\").trim();\n                    }\n                if(prod.length < 16 && !prod.includes(\" \")){\n                    obj.product = prod;\n                    }                    \n                    product_details.id = obj.product;\n            }\n        });\n\n        // ID\n        let order = lines.find((e) => e.includes(\"Order no.\")).match(/\\d+/);\n        const itemno_id = /-?\\d+(\\.\\d+)?/g;\n        let serial = order + \"-\" + length\n        order_no = order[0].match(itemno_id);\n        obj.id = serial;\n        let pattern = /^\\d{4}/;\n        let serialno = pattern.test(lines[i]);\n        // SERIAL NUMBER\n        if (serialno && i != id + 1) {\n            let a = lines[i].split(\"\")\n            let itemno = a[0] + a[1] + a[2] + a[3]\n            let order = lines.find((e) => e.includes(\"Order no.\"))\n            let splitOrderNoString = order.split(\":\");\n            const itemno_id = /-?\\d+(\\.\\d+)?/g;\n            order_no = splitOrderNoString[0].match(itemno_id);\n            obj.id = order_no + '-' + itemno;\n        }\n\n        let productFound = false;\n        let integratedFound = false;\n        let descriptionFirstLineFound = false;\n        let descriptionEnded = false;\n\n        let net_value = lines.map((e, j) => {\n            if (j > i && j < i + 20 && e.includes(\"Gross Price PBXX\")) {\n                if (!productFound) {\n\n                    // NET PRICE \n                    net = lines[j].split(\" \").reverse();\n                    net_price = net[1];\n                    obj.net_price = parseFloat(net_price.replace(\",\", \"\"));\n\n                    // UNIT PRICE\n                    unit = lines[j].split(\" \").reverse();\n                    unit_price = unit.filter(element => element.trim() !== '');\n                    obj.unit_price = parseFloat(unit_price[1].replace(\",\", \"\"));\n                    productFound = true;\n                }\n                if (!integratedFound) {\n                    if (lines[j + 1].includes(\"Integrated\")) {\n                        tax_percent = lines[j + 1].split(\" \").reverse();\n                        const tax_reg = /(\\d+(,\\d+)?(\\.\\d+)?)/;\n                        tax_value = tax_percent[1].trim().match(tax_reg);\n                        obj.tax_value = parseFloat(tax_value[0].replace(\",\", \"\"));\n\n                        // TAX PERCENTAGE\n                        let splitGSTstring = lines[j + 1].split(\":\");\n                        const percent = /-?\\d+(\\.\\d+)?/g;\n                        tax_percentage = splitGSTstring[0].match(percent);\n                        obj.tax_percentage = parseFloat(tax_percentage[0]);\n                    }\n                    else if (lines[j + 1].includes(\"Central\") && lines[j + 2].includes(\"State\")) {\n                        tax_percent1 = lines[j + 1].split(\" \").reverse();\n                        tax_percent2 = lines[j + 2].split(\" \").reverse();\n                        const tax_reg = /(\\d+(,\\d+)?(\\.\\d+)?)/;\n                        tax_value1 = tax_percent1[1].trim().match(tax_reg);\n                        tax_value2 = tax_percent2[1].trim().match(tax_reg);\n                        tax_value_result1 = tax_value1[0].replace(\",\", \"\");\n                        tax_value_result2 = tax_value2[0].replace(\",\", \"\");\n                        obj.tax_value = parseInt(tax_value_result1) + parseInt(tax_value_result2);\n\n                        // TAX PERCENTAGE\n                        let splitGSTstring1 = lines[j + 1].split(\":\");\n                        let splitGSTstring2 = lines[j + 2].split(\":\")\n                        const percent = /-?\\d+(\\.\\d+)?/g;\n                        tax_percentage1 = splitGSTstring1[0].match(percent);\n                        tax_percentage2 = splitGSTstring2[0].match(percent);\n                        obj.tax_percentage = parseFloat(tax_percentage1[0]) + parseFloat(tax_percentage2[0]);\n                    }\n                    else {\n                        obj.tax_percentage = 0;\n                        obj.tax_value = 0;\n                    }\n                    integratedFound = true;\n                }\n                // Net Price\n                obj.gross_price = obj.net_price + obj.tax_value;                \n            }\n\n            // MATERIAL DESCRIPTION   \n            if (j > i && j < i + 20 && (descriptionFirstLineFound && !descriptionEnded)) {\n                if (e.includes(\"|||\")) {\n                    descriptionEnded = true;\n                    material_description = material_description + lines[j];\n                    obj.description = material_description.slice(0, material_description.indexOf(\"|||\"));\n                }\n                else {\n                    material_description = material_description + lines[j];\n                    \n                }\n            }\n\n            if (j > i && j < i + 25 && !descriptionFirstLineFound && (e.includes(\"<p>\") || e.includes(\"<ul>\") || e.includes(\"#\"))) {\n                material_description = lines[j];\n                descriptionFirstLineFound = true;\n                if (e.includes(\"|||\")) {                    \n                    obj.description = material_description.slice(0, material_description.indexOf(\"|||\")) ? material_description.slice(0, material_description.indexOf(\"|||\")) : '';\n                    descriptionEnded = true;\n                }\n            }\n        });\n\n\n        // HSN Code\n        let splitHsnCodeString = lines[i].split(\":\");\n        hsn = splitHsnCodeString[1].replace(/\\s/g, \"\");\n        obj.hsn = hsn;\n        product_details.hsn = hsn;\n\n        // ORDERED QTY and UOM\n\n        // ORDERED QTY\n        if (lines[i].includes(\"HSN\")) {\n            const regex = /(\\d+(?:,\\d+)?)/g;\n            let splitOrderQTY = lines[i - 1].split(\" \").reverse();\n            ordered_qty = splitOrderQTY[1].match(regex);\n            \n\n            // obj.ordered_qty = ordered_qty ? parseInt(ordered_qty[0].replace(/,/g, '')) : null;\n            obj.ordered_qty = ordered_qty ? parseInt(ordered_qty[ordered_qty.length - 1].replace(/,/g, '')) : null;\n            \n            // UOM\n            obj.uom = splitOrderQTY[0];\n        }\n\n        // PRODUCT NAME \n        let productFirstLineFound = false;\n        let productNameFound = false;\n        let product_trim = lines.map((e, j) => {\n\n            if (productFirstLineFound && !productNameFound) {\n                if (e.includes(\"HSN\")) {\n                    productNameFound = true;\n                }\n                else {\n                    product_details.product_name = product_details.product_name + e\n                }\n            }\n\n            if (j < i && j > i - 10 && e.match(/\\b\\d{4}(?=[a-z])/gi)) {\n                product_details.product_name = e.replace(/\\b\\d{1,4}(?=[a-zA-Z])/g, \"\").replace(/\\d+\\s*PC$/, \"\").trim() ||\n                    \"\";\n                productFirstLineFound = true;\n            }\n        });\n\n        //replace last qty and uom from name\n        product_details.product_name = product_details.product_name.replace(/\\d+\\s*PC$/, \"\").trim();\n\n        obj.products.push(product_details)\n     \n        data.po_items = obj;\n        \n        //calculated Gross Price\n        // calculatedGrossPrice += obj.gross_price;\n        calculatedGrossPrice += ( obj.unit_price * obj.ordered_qty) + ((obj.unit_price * obj.ordered_qty) * obj.tax_percentage / 100);\n        console.log(\"----------------calculatedGrossPrice----------\",calculatedGrossPrice);\n    }\n}\ndata.calculated_gross_price=calculatedGrossPrice;\ndata.po_value_mismatch = calculatedGrossPrice == area.pos.po_value ? false : true;\nlet products =data.po_items;\n\nlet productIds = products.map(product => product.products[0].id);\nitems[0].json.data = area;\nitems[0].json.productIds = productIds;\nitems[0].json.products = products;\nreturn items;\n\n    \n\n     return data;"
      },
      "name": "FunctionItem",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-09-25T10:13:33.585Z"
}