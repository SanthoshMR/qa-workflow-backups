{
  "active": true,
  "connections": {
    "Get Cloud Files": {
      "main": [
        [
          {
            "node": "Combine Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Items": {
      "main": [
        [
          {
            "node": "Nextcloud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nextcloud": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get Cloud Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Function to get payment data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get payment data": {
      "main": [
        [
          {
            "node": "Move All Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Loop": {
      "main": [
        [
          {
            "node": "Function to get the splitted payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get the splitted payment": {
      "main": [
        [
          {
            "node": "Update vendor payments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment index": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "End Loop",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update vendor payments": {
      "main": [
        [
          {
            "node": "Check for partial payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for partial payment": {
      "main": [
        [
          {
            "node": "Create partial vendor payment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create partial vendor payment": {
      "main": [
        [
          {
            "node": "Increment index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Increment index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move All Files": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-02-13T10:10:15.557Z",
  "id": "262",
  "name": "Vedanta : Read vendor payments from cloud",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -260,
        -120
      ]
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "path": "Vendor-payments-qa/"
      },
      "name": "Get Cloud Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        180,
        320
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Vendor-payments-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        600,
        340
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// return items;\nlet poFiles=[];\nlet excelFiles=[];\nitems.forEach((item) => {\n    const fullPath = item.json[\"path\"].split(\"/\");\n    const fileName = fullPath[fullPath.length - 1]\n    if(decodeURI(fileName).includes(\".csv\")){\n        excelFiles.push({\"file_name\":decodeURI(fileName)});\n    }\n});\n\nreturn [{\n     json: {\n         excelData:excelFiles\n    }\n}];"
      },
      "name": "Combine Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        380,
        340
      ]
    },
    {
      "parameters": {
        "functionCode": "let binaries = {};\nconst { read: xlsxRead } = require('xlsx'); \nconst data = items[0].binary.data; \nworkbook = xlsxRead(data.data); \nbinaries[\"data\"] = workbook;\n\nitems[0].json.binaries= binaries\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        780,
        340
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=data",
        "options": {
          "sheetName": "={{$node[\"Function\"].json[\"binaries\"][\"data\"][\"SheetNames\"][0]}}"
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        1040,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -40,
        320
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "vendor-payment-cloud-qa",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -240,
        320
      ],
      "webhookId": "cb60ae7e-2706-4f5f-b252-cea276383106"
    },
    {
      "parameters": {
        "functionCode": "let paymentsData = [];\nitems.forEach((item, index) => {\n  \n  if(item.json[\"Payment UTR\"]){\n    let paymentDate = getFormattedDate(item.json[\"Payment  Date (dd-mm-yyyy)\"]?item.json[\"Payment  Date (dd-mm-yyyy)\"]:new Date().toISOString().split(\"T\")[0].split(\"-\").reverse().join(\"-\"));\n      paymentsData.push({\n      id : item.json[\"id\"],\n      payment_amount:item.json[\"Payment Amount\"],\n      payment_utr : item.json[\"Payment UTR\"],\n      payment_date:paymentDate,\n      payment_description:item.json[\"Payment Description\"],\n      remarks:item.json[\"remarks\"]?item.json[\"remarks\"]:'',\n      actual_paid_amount:item.json[\"Actual paid Amount to vendor\"]?item.json[\"Actual paid Amount to vendor\"]:0,\n      any_deductions:item.json[\"Any Other Deductions (LD charges/etc)\"]?item.json[\"Any Other Deductions (LD charges/etc)\"]:0,\n      tax_deducted :item.json[\"Tax Deducted\"]?item.json[\"Tax Deducted\"]:0,\n      payment_paid_to_vendor:item.json[\"Payment Paid Status (fully_paid/partially_paid)\"],\n    })\n  }\n\n})\nfunction getFormattedDate(secs){\n  if(typeof secs != \"string\"){\n    const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day\n\n    const date = new Date((secs-1) * millisecondsPerDay + Date.parse(\"1900-01-01\"));\n\n    const day = date.getDate();\n    const month = date.getMonth() + 1; // Months are zero-based, so we add 1\n    const year = date.getFullYear();\n    const formattedDate = `${day < 10 ? '0' : ''}${day-1}-${month < 10 ? '0' : ''}${month}-${year}`;\n    return formattedDate\n }\n else return secs;\n}\nconst size = 10; // size of each subarray\n\nconst result = [];\nfor (let i = 0; i < paymentsData.length; i += size) {\n  result.push(paymentsData.slice(i, i + size));\n}\n\nreturn [{\n    json: {\n        result: result,\n        resultlength : result.length\n    },\n}];\n"
      },
      "name": "Function to get payment data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1320,
        340
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1540,
        340
      ]
    },
    {
      "parameters": {},
      "name": "Start Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1780,
        340
      ]
    },
    {
      "parameters": {
        "functionCode": "let paymentData = $node[\"Function to get payment data\"].json[\"result\"];\nlet currentIndex = $node[\"Start Loop\"].json[\"index\"];\nlet currentPayment = paymentData[currentIndex];\nlet returnItems = [];\nlet partialDiffCheckAmount = 5;\ncurrentPayment.forEach(function(obj,index){\n    let next_payable_amount = parseFloat(obj[\"payment_amount\"])-(parseFloat(obj[\"actual_paid_amount\"])+parseFloat(obj[\"tax_deducted\"])+parseFloat(obj[\"any_deductions\"]));\n     let [day, month, year] = obj[\"payment_date\"].split(\"-\");\n     let paymentPaidToVendor = next_payable_amount>partialDiffCheckAmount?\"partially_paid\":\"fully_paid\";\n    returnItems.push({\n    json: {\n      id : obj[\"id\"],\n      payment_amount:obj[\"payment_amount\"],\n      payment_utr : obj[\"payment_utr\"],\n      payment_date:new Date(year, month - 1, day).toISOString(),\n      payment_description:obj[\"payment_description\"],\n      remarks:obj[\"remarks\"],\n      actual_paid_amount:obj[\"actual_paid_amount\"],\n      any_deductions:obj[\"any_deductions\"],\n      tax_deducted : obj[\"tax_deducted\"],\n      payment_paid_to_vendor:paymentPaidToVendor,\n      next_payable_amount : next_payable_amount,\n      dms_url : $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]\n    }\n  });\n  \n})\n\nreturn returnItems;\n"
      },
      "name": "Function to get the splitted payment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1980,
        340
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index",
              "value": "={{$node[\"Start Loop\"].json[\"index\"]+1}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Increment index",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2620,
        340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Increment index\"].json[\"index\"]}}",
              "operation": "equal",
              "value2": "={{$node[\"Function to get payment data\"].json[\"resultlength\"]}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2740,
        340
      ]
    },
    {
      "parameters": {},
      "name": "End Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2960,
        140
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to get the splitted payment\"].json[\"dms_url\"]}}/items/sdm_vendor_payments/{{$node[\"Function to get the splitted payment\"].json[\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "actual_paid_amount",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"actual_paid_amount\"]}}"
            },
            {
              "name": "payment_utr",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"payment_utr\"]}}"
            },
            {
              "name": "payment_description",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"payment_description\"]}}"
            },
            {
              "name": "remarks",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"remarks\"]}}"
            },
            {
              "name": "any_deductions",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"any_deductions\"]}}"
            },
            {
              "name": "vendor_payment_status",
              "value": "={{true}}"
            },
            {
              "name": "tax_deducted",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"tax_deducted\"]}}"
            },
            {
              "name": "payment_date",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"payment_date\"]}}"
            },
            {
              "name": "payment_paid_to_vendor",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"payment_paid_to_vendor\"]}}"
            }
          ]
        }
      },
      "name": "Update vendor payments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2220,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function to get the splitted payment\"].json[\"payment_paid_to_vendor\"]==\"partially_paid\"?true:false}}"
            }
          ]
        }
      },
      "name": "Check for partial payment",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2380,
        180
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Function to get the splitted payment\"].json[\"dms_url\"]}}/items/sdm_vendor_payments",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "vendor_po_number",
              "value": "={{$node[\"Update vendor payments\"].json[\"data\"][\"vendor_po_number\"]}}"
            },
            {
              "name": "payment_amount",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"next_payable_amount\"]}}"
            },
            {
              "name": "payment_type",
              "value": "invoice"
            },
            {
              "name": "vendor_invoice",
              "value": "={{$node[\"Update vendor payments\"].json[\"data\"][\"vendor_invoice\"]}}"
            }
          ]
        }
      },
      "name": "Create partial vendor payment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2420,
        -20
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2420,
        400
      ]
    },
    {
      "parameters": {
        "operation": "move",
        "path": "=Vendor-payments-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}",
        "toPath": "=Vedanta-old-payments-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Move All Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1420,
        180
      ],
      "executeOnce": true,
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-08-03T12:59:03.514Z"
}