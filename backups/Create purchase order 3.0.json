{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "access token generated by refresh token": {
      "main": [
        [
          {
            "node": "Get po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Function to create vendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Get taxes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for item": {
      "main": [
        [
          {
            "node": "Condition for creating item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for item objects": {
      "main": [
        [
          {
            "node": "Check for item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get taxes": {
      "main": [
        [
          {
            "node": "Function for item objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create item": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for creating item": {
      "main": [
        [
          {
            "node": "Function for create item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Existing Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for create item": {
      "main": [
        [
          {
            "node": "create item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Function to create po",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Existing Products": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Check for vendor": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create vendor": {
      "main": [
        [
          {
            "node": "Get the place of supply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create vendor": {
      "main": [
        [
          {
            "node": "Get taxes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Customer": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create contact": {
      "main": [
        [
          {
            "node": "create contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create contact": {
      "main": [
        [
          {
            "node": "Check for vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Function to create contact",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp1": {
      "main": [
        [
          {
            "node": "Check for vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get po_details": {
      "main": [
        [
          {
            "node": "Get contact details based on plant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the vendor po_num": {
      "main": [
        [
          {
            "node": "Create vendor invoice details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create po": {
      "main": [
        [
          {
            "node": "create po",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create po": {
      "main": [
        [
          {
            "node": "Update the vendor po_num",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get PO attachment": {
      "main": [
        [
          {
            "node": "Move Binary Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload PO in vpanel": {
      "main": [
        [
          {
            "node": "Wait for file upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Binary Data": {
      "main": [
        [
          {
            "node": "Upload PO in vpanel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload PO in mozart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for vendor in vpanel": {
      "main": [
        [
          {
            "node": "Condition for checking vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for checking vendor": {
      "main": [
        [
          {
            "node": "Create vendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create vendor": {
      "main": [
        [
          {
            "node": "Check whether user exits or not",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create vendor details": {
      "main": [
        [
          {
            "node": "Function for getting sku",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp2": {
      "main": [
        [
          {
            "node": "Function for getting sku",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for getting sku": {
      "main": [
        [
          {
            "node": "Get the products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the products": {
      "main": [
        [
          {
            "node": "Function to create products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create products": {
      "main": [
        [
          {
            "node": "Checking condition whether to post the products ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post the products ": {
      "main": [
        [
          {
            "node": "post product details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post product details": {
      "main": [
        [
          {
            "node": "Create po in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp3": {
      "main": [
        [
          {
            "node": "Create po in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create po in vpanel": {
      "main": [
        [
          {
            "node": "Function to map po and product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map po and products": {
      "main": [
        [
          {
            "node": "Update the po_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to map po and product": {
      "main": [
        [
          {
            "node": "Map po and products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create vendor invoice details": {
      "main": [
        [
          {
            "node": "Get PO attachment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get contact details based on plant": {
      "main": [
        [
          {
            "node": "Check for Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload PO in mozart": {
      "main": [
        [
          {
            "node": "Wait for file upload",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Update the vendor po_file in mozart": {
      "main": [
        [
          {
            "node": "Check for vendor in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for file upload": {
      "main": [
        [
          {
            "node": "Update the vendor po_file in mozart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "access token generated by refresh token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the po_status": {
      "main": [
        [
          {
            "node": "Construct obj for sending mail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construct obj for sending mail": {
      "main": [
        [
          {
            "node": "Send email to vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check whether user exits or not": {
      "main": [
        [
          {
            "node": "Get user id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get user id": {
      "main": [
        [
          {
            "node": "Create vendor details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp4": {
      "main": [
        [
          {
            "node": "Create vendor details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the place of supply": {
      "main": [
        [
          {
            "node": "create vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-09-13T07:22:36.657Z",
  "id": "180",
  "name": "Create purchase order 3.0",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -860,
        -240
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "create_po",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -480,
        100
      ],
      "webhookId": "e527030c-1bfc-4f07-8b57-24aa8cae6d0d",
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://accounts.zoho.com/oauth/v2/token\n",
        "options": {},
        "headerParametersUi": {
          "parameter": []
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "client_id",
              "value": "=1000.WBSVSVM7UXFERT32STIOQLG3CFWOKP"
            },
            {
              "name": "grant_type",
              "value": "refresh_token"
            },
            {
              "name": "redirect_uri",
              "value": "http://localhost:5678/webhook-test/sd_invoice"
            },
            {
              "name": "client_secret",
              "value": "=71afde1862948a64f91e451cdfe7f8c78250d32f7e"
            },
            {
              "name": "refresh_token",
              "value": "=1000.5ff4be7b6c923c0d40d2b96565226359.bd12d19eea668016c7e40b698bb6a0a0"
            }
          ]
        }
      },
      "name": "access token generated by refresh token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        120,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [],
          "number": [
            {
              "value1": "={{$node[\"Check for vendor\"].json[\"contacts\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1540,
        80
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1800,
        260
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/items?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "options": {},
        "headerParametersUi": {
          "parameter": []
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "sku",
              "value": "={{$node[\"Function for item objects\"].json[\"0\"][\"sku\"]}}"
            }
          ]
        }
      },
      "name": "Check for item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2640,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nlet pro_items=$node[\"Get po_details\"].json[\"data\"][0][\"po_items\"]\nlet returnItems =[]\npro_items.forEach(function(obj,index){  \n    returnItems.push({\n    json: [{\n       name:obj[\"product\"][\"product_name\"],\n       rate:obj[\"rate\"],\n       sku:obj[\"product\"][\"id\"],\n       item_type :obj[\"item_type\"] \n    }]\n  });\n  \n})\n\nreturn returnItems;"
      },
      "name": "Function for item objects",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2440,
        40
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/settings/taxes?organization_id=685685414",
        "options": {}
      },
      "name": "Get taxes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2020,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/items?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "batchInterval": 90000,
          "batchSize": 1,
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function for create item\"].json[\"0\"]}}"
      },
      "name": "create item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3200,
        -200
      ],
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 2500,
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for item\"].json[\"items\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Condition for creating item",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2820,
        40
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "functionCode": "let list_items = $node[\"Get po_details\"].json[\"data\"][0][\"po_items\"]\nlet zoho_taxes = $node[\"Get taxes\"].json[\"taxes\"];\n\nlet returnItems = []\nlet resultFilter = \n   list_items.filter(list=>\n      items.some(\n      data=> data.json[\"page_context\"][\"search_criteria\"][0][\"search_text\"] === list[\"product\"][\"id\"]\n    )\n  );\n\n\nresultFilter .forEach(function(obj,index){ \n    //let taxes = obj.item_tax_preferences;\n    //let igst_tax_name =  \"IGST\";\n    //let gst_tax_name =  \"GST\";\n    let igst_tax_name = \"IGST\"+obj.tax_percentage;\n    let gst_tax_name = \"GST\"+obj.tax_percentage;\n    let igst_taxid_obj = zoho_taxes.filter(tax=>tax.tax_name == igst_tax_name);\n    let gst_taxid_obj = zoho_taxes.filter(tax=>tax.tax_name == gst_tax_name);\n    returnItems.push({\n    json: [{\n       name:obj[\"product\"][\"product_name\"],\n       item_type :obj.product.type,\n       sku:obj[\"product\"][\"id\"],\n       hsn_or_sac:obj[\"product\"][\"hsn\"],\n       available_stock:0,\n       purchase_account_id:\"1763031000000293201\",\n       purchase_account_name: \"Purchase Domestic\",\n       item_type: \"inventory\",\n       unit : \"pcs\",\n       is_returnable:true,\n       \"item_tax_preferences\": [\n          {\n              \"tax_specification\": \"inter\",\n              \"tax_type\": 2,\n              \"tax_name\": igst_tax_name,\n              \"tax_percentage\": obj.tax_percentage,\n              \"tax_id\": igst_taxid_obj[0].tax_id\n          },\n          {\n              \"tax_specification\": \"intra\",\n              \"tax_type\": 2,\n              \"tax_name\": gst_tax_name,\n              \"tax_percentage\": obj.tax_percentage,\n              \"tax_id\": gst_taxid_obj[0].tax_id\n          }\n        ],\n    }]\n  }); \n})\n\nreturn returnItems ;\n\n"
      },
      "name": "Function for create item",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2900,
        -200
      ],
      "continueOnFail": true
    },
    {
      "parameters": {},
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        3200,
        40
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Existing Products",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        3020,
        180
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/vendors/?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "email",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"].trim()}}"
            }
          ]
        }
      },
      "name": "Check for vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1260,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let contact_name=$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_company\"]\nlet tax_treatment = \"\";\nlet gst_treatment = \"\";\nlet contact_type = \"vendor\"; \nlet JSONString={\n  \"contact_name\":contact_name\n }\nif($node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"gstin\"]){\n   tax_treatment = \"vat_registered\";\n   gst_treatment = \"business_gst\";\n }else {\n   tax_treatment = \"vat_not_registered\";\n   gst_treatment = \"business_none\";\n }\n let billing_address= {\n    \"address\": $node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_address\"]\n}\n items[0].json.contact_type = contact_type;\n items[0].json.tax_treatment = tax_treatment;\n items[0].json.gst_treatment = gst_treatment;\n items[0].json.billing_address = billing_address;\n items[0].json.JSONString=JSONString;\nreturn items;"
      },
      "name": "Function to create vendor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1600,
        -180
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/contacts/?organization_id=685685414",
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "billing_address",
              "value": "={{$node[\"Function to create vendor\"].json[\"billing_address\"]}}"
            },
            {
              "name": "shipping_address",
              "value": "={{$node[\"Function to create vendor\"].json[\"billing_address\"]}}"
            },
            {
              "name": "contact_name",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"vendor_name\"]}}"
            },
            {
              "name": "first_name",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"vendor_name\"]}}"
            },
            {
              "name": "email",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"vendor_email\"]}}"
            },
            {
              "name": "mobile",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"vendor_phone\"]}}"
            },
            {
              "name": "place_of_contact",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"source_of_supply\"]}}"
            },
            {
              "name": "contact_type",
              "value": "={{$node[\"Function to create vendor\"].json.contact_type}}"
            },
            {
              "name": "gst_no",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"gstin\"]}}"
            },
            {
              "name": "gst_treatment",
              "value": "={{$node[\"Function to create vendor\"].json.gst_treatment}}"
            },
            {
              "name": "company_name",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"vendor_company\"]}}"
            }
          ]
        }
      },
      "name": "create vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1980,
        -180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/contacts/?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "contact_name",
              "value": "={{$node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"]}}"
            }
          ]
        }
      },
      "name": "Check for Customer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        700,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let contact_name=$node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"]\nlet tax_treatment = \"\";\nlet gst_treatment = \"\";\nlet contact_type = \"customer\"; \nlet JSONString={\n  \"contact_name\":contact_name\n }\n\nif($node[\"Get contact details based on plant\"].json[\"data\"][0][\"gst\"]){\n   tax_treatment = \"vat_registered\";\n   gst_treatment = \"business_gst\";\n }else {\n   tax_treatment = \"vat_not_registered\";\n   gst_treatment = \"business_none\";\n }\nlet billing_address= {\n    \"address\": $node[\"Get contact details based on plant\"].json[\"data\"][0][\"delivery_address\"],\n    \"country\":\"India\"\n}\n items[0].json.contact_type = contact_type;\n items[0].json.tax_treatment = tax_treatment;\n items[0].json.gst_treatment = gst_treatment;\n items[0].json.billing_address = billing_address;\n items[0].json.JSONString=JSONString;\nreturn items;"
      },
      "name": "Function to create contact",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        940,
        -180
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/contacts?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "billing_address",
              "value": "={{$node[\"Function to create contact\"].json[\"billing_address\"]}}"
            },
            {
              "name": "shipping_address",
              "value": "={{$node[\"Function to create contact\"].json[\"billing_address\"]}}"
            },
            {
              "name": "contact_name",
              "value": "={{$node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"]}}"
            },
            {
              "name": "first_name",
              "value": "={{$node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"]}}"
            },
            {
              "name": "last_name",
              "value": "={{$node[\"Get contact details based on plant\"].json[\"data\"][0][\"last_name\"]}}"
            },
            {
              "name": "email",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"email\"]}}"
            },
            {
              "name": "mobile",
              "value": "={{$node[\"Get contact details based on plant\"].json[\"data\"][0][\"mobile\"]}}"
            },
            {
              "name": "place_of_contact",
              "value": "=KA"
            },
            {
              "name": "contact_type",
              "value": "={{$node[\"Function to create contact\"].json.contact_type}}"
            },
            {
              "name": "gst_no",
              "value": "={{$node[\"Get contact details based on plant\"].json[\"data\"][0][\"gst\"]}}"
            },
            {
              "name": "gst_treatment",
              "value": "={{$node[\"Function to create contact\"].json.gst_treatment}}"
            },
            {
              "name": "pan_no",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"pan_no\"]}}"
            },
            {
              "name": "company_name",
              "value": "={{$node[\"Get contact details based on plant\"].json[\"data\"][0][\"company_name\"]}}"
            }
          ]
        }
      },
      "name": "create contact",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1220,
        -180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [],
          "number": [
            {
              "value1": "={{$node[\"Check for Customer\"].json[\"contacts\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        860,
        100
      ]
    },
    {
      "parameters": {},
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1080,
        280
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_pos?filter={\"id\":{\"_eq\":\"{{$node[\"Webhook\"].json[\"body\"][\"keys\"][0]}}\"}}&fields=id,po_date,po_value,payment_terms,po_deliver_date,vendor.*,po_items.*,po_items.product.*,po_num.*,po_num.issuer_name.*,po_num.issuer_name.user.*",
        "options": {
          "ignoreResponseCode": true
        }
      },
      "name": "Get po_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        320,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_pos/{{$node[\"Get po_details\"].json[\"data\"][0][\"id\"].replaceAll(\"/\",\"%2F\")}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "id",
              "value": "={{$node[\"create po\"].json[\"purchaseorder\"][\"purchaseorder_number\"]}}"
            },
            {
              "name": "po_status",
              "value": "=vendor_po_sent"
            }
          ]
        }
      },
      "name": "Update the vendor po_num",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3740,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nlet pro_items=$node[\"Get po_details\"].json[\"data\"][0][\"po_items\"]\nlet routing_commission = $node[\"Globals\"].json.commission;\nlet po_type = $node[\"Get po_details\"].json[\"data\"][0][\"po_num\"][\"po_type\"];\npro_items.map((obj, i) => ({ ...obj, isMapped: false }));\n//let payment_terms = $node[\"wait for order data\"].json[\"body\"][\"payment_terms\"]?$node[\"wait for order data\"].json[\"body\"][\"payment_terms\"]:\"Advance\";\nconst id= [];\nconst custom_fields=[];\nlet contact_id=\"\";\nlet vendor_id = \"\";\nlet source_of_supply = $node[\"Check for vendor\"].json[\"contacts\"].length?$node[\"Check for vendor\"].json[\"contacts\"][0][\"place_of_contact\"]:$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"source_of_supply\"];\nlet destination_of_supply = $node[\"Get contact details based on plant\"].json[\"data\"][0][\"destination_of_supply\"];\nlet vendor_gst_treatment = \"\";\n\nif($node[\"Check for Customer\"].json[\"contacts\"].length!==0){\n    contact_id=$node[\"Check for Customer\"].json[\"contacts\"][0][\"contact_id\"]\n}else{\n    contact_id=$node[\"create contact\"].json[\"contact\"][\"contact_id\"]\n}\nif($node[\"Check for vendor\"].json[\"contacts\"].length!==0){\n    vendor_id=$node[\"Check for vendor\"].json[\"contacts\"][0][\"contact_id\"]\n    vendor_gst_treatment=$node[\"Check for vendor\"].json[\"contacts\"][0][\"gst_treatment\"]\n}else{\n    vendor_id=$node[\"create vendor\"].json[\"contact\"][\"contact_id\"]\n    vendor_gst_treatment=$node[\"create vendor\"].json[\"contact\"][\"gst_treatment\"]\n}\n\nfor (const [index,item] of items.entries()) {\n  if(item.json.hasOwnProperty(\"code\")){\n     let tax_name = source_of_supply == destination_of_supply?\"intra\":\"inter\";\n     let item_tax_preferences = item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"item_tax_preferences\"]:item.json[\"items\"][0][\"item_tax_preferences\"];\n     let taxId = item_tax_preferences.find(tax =>tax.tax_specification == tax_name);\n     let list = pro_items.find(data=>data[\"product\"][\"id\"]===(item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"sku\"]:item.json[\"items\"][0][\"sku\"])&& !data[\"isMapped\"])\n     pro_items[pro_items.findIndex(product=>product[\"product\"][\"id\"]===(item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"sku\"]:item.json[\"items\"][0][\"sku\"])&& !product[\"isMapped\"])].isMapped = true\n        id.push(\n        {\n            item_id: item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"item_id\"]:item.json[\"items\"][0][\"item_id\"],\n            sku : list[\"product\"][\"id\"],\n            quantity:list[\"requested_qty\"],\n            rate:po_type == \"routing\"?list[\"unit_price\"]-(list[\"unit_price\"]*routing_commission)/100 :list[\"unit_price\"],\n            reverse_charge_tax_id:vendor_gst_treatment == \"business_none\"?taxId[\"tax_id\"]:\"\",\n            product_type: \"goods\",\n            tax_id:vendor_gst_treatment == \"business_none\"?\"\":taxId[\"tax_id\"],\n        });\n  }   \n}\n\n//Start : Get the products which are not mapped and push to invoice\nlet not_mapped_products = pro_items.filter(prod =>!prod.isMapped);\nif(not_mapped_products){\n    not_mapped_products.forEach(function(nmp,index){\n        let find_product = id.find(item=>nmp[\"product\"][\"id\"] == item.sku);\n        if(find_product){\n            id.push(\n            {\n                item_id: find_product[\"item_id\"],\n                quantity:nmp[\"requested_qty\"],\n                rate:po_type == \"routing\"?nmp[\"rate\"]-(nmp[\"rate\"]*routing_commission)/100:nmp[\"rate\"],\n                reverse_charge_tax_id:find_product[\"reverse_charge_tax_id\"],\n                product_type: \"goods\",\n                tax_id:find_product[\"tax_id\"],\n            });\n        }\n    })\n}\n//END\n\nlet delivery_address= {\n    \"address\": $node[\"Get contact details based on plant\"].json[\"data\"][0][\"delivery_address\"]\n}\nlet invoice_obj={\n \"purchaseorder_number\" :\"1test\"+$node[\"Get po_details\"].json[\"data\"][0][\"id\"],\n \"delivery_customer_id\":contact_id,\n  \"line_items\":id,\n \"date\":$node[\"Get po_details\"].json[\"data\"][0][\"po_date\"],\n \"reference_number\":\"1test\"+$node[\"Get po_details\"].json[\"data\"][0][\"po_num\"][\"id\"],\n \"expected_delivery_date\":$node[\"Get po_details\"].json[\"data\"][0][\"po_deliver_date\"],\n //\"salesperson_name\":$node[\"wait for order data\"].json[\"body\"][\"salesperson_name\"],\n //\"custom_fields\":custom_fields,\n \"payment_terms\":parseInt($node[\"Get po_details\"].json[\"data\"][0][\"payment_terms\"]),\n //\"discount\": $node[\"wait for order data\"].json[\"body\"][\"discount\"],\n //\"shipping_charge\":$node[\"wait for order data\"].json[\"body\"][\"shipping_charge\"],\n //\"billing_address\":$node[\"wait for order data\"].json[\"body\"][\"billing_address\"],\n //\"shipping_address\":$node[\"wait for order data\"].json[\"body\"][\"shipping_address\"],\n \"source_of_supply\":source_of_supply,\n \"destination_of_supply\":$node[\"Get contact details based on plant\"].json[\"data\"][0][\"destination_of_supply\"],\n \"is_discount_before_tax\":false,\n \"vendor_id\":vendor_id,\n \"delivery_address\":delivery_address,\n \"vendor_gst_treatment\":vendor_gst_treatment,\n \"pro_items\":pro_items\n}  \nlet returnItems = []\nreturnItems.push({\njson:invoice_obj\n})\nreturn returnItems ;\n"
      },
      "name": "Function to create po",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3360,
        40
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/purchaseorders?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "options": {
          "bodyContentType": "json",
          "ignoreResponseCode": false
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "delivery_customer_id",
              "value": "={{$node[\"Function to create po\"].json[\"delivery_customer_id\"]}}"
            },
            {
              "name": "line_items",
              "value": "={{$node[\"Function to create po\"].json[\"line_items\"]}}"
            },
            {
              "name": "reference_number",
              "value": "={{$node[\"Function to create po\"].json[\"reference_number\"]}}"
            },
            {
              "name": "date",
              "value": "={{$node[\"Function to create po\"].json[\"date\"]}}"
            },
            {
              "name": "payment_terms",
              "value": "={{$node[\"Function to create po\"].json[\"payment_terms\"]}}"
            },
            {
              "name": "discount_type",
              "value": "=entity_level"
            },
            {
              "name": "is_discount_before_tax",
              "value": "={{$node[\"Function to create po\"].json[\"is_discount_before_tax\"]}}"
            },
            {
              "name": "source_of_supply",
              "value": "={{$node[\"Function to create po\"].json[\"source_of_supply\"]}}"
            },
            {
              "name": "destination_of_supply",
              "value": "={{$node[\"Function to create po\"].json[\"destination_of_supply\"]}}"
            },
            {
              "name": "vendor_id",
              "value": "={{$node[\"Function to create po\"].json[\"vendor_id\"]}}"
            },
            {
              "name": "reverse_charge_tax_amount",
              "value": "={{100}}"
            },
            {
              "name": "purchaseorder_number",
              "value": "={{$node[\"Function to create po\"].json[\"purchaseorder_number\"]}}"
            },
            {
              "name": "expected_delivery_date",
              "value": "={{$node[\"Function to create po\"].json[\"expected_delivery_date\"]}}"
            },
            {
              "name": "delivery_date",
              "value": "={{$node[\"Function to create po\"].json[\"expected_delivery_date\"]}}"
            },
            {
              "name": "notes",
              "value": "=Note : We must be notified 2 hours before dispatch in order to generate ASN and Tax invoices, which are required for goods receipt and without which materials will not be allowed inside the Material gate by security. For Order Dispatch Related queries E-mail to: vedantaiob.ops@shakedeal.com"
            },
            {
              "name": "terms",
              "value": "=Terms & Conditions\nPrice basis : FOR - Free on Road\nFOR SITE\nInsurance :\nTaxes : GST Extra @ Actuals\nShipping Instruction : OP COMMERCE INVOICE HAS TO BE ATTACHED TO PRODUCT.\nPayment mode : NEFT/RTGS\nPayment terms : 30 Days Credit\n\nWarranty : The equipment's/spares supplied to us under this Contract shall be warranted against defects in workmanship and material under normal use, service and duty conditions as specified in the Purchase Order, for a period of 12 months from the date of installation or 18 months from the date of supply, whichever is earlier. If any defects are noticed in the equipment during the warranty period, the same shall be intimated to you in writing and the equipment will be sent to you on a freight-to-pay basis. All rectification/replacement will be undertaken at your own cost.\n\nLD clause # Applicable as below\nLD Clause: In the event you fail to supply the material within the time specified in the contract, you shall pay to us penalty @ 0.5% of the value of the contract for each weeks delay and part thereof. However, such payment shall not exceed 5% of the total value of the contract. We may, without prejudice to any other method of recovery, deduct an amount of such damages from any monies due or which may become due to you."
            }
          ]
        }
      },
      "name": "create po",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3560,
        40
      ],
      "alwaysOutputData": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/purchaseorders/{{$node[\"create po\"].json[\"purchaseorder\"][\"purchaseorder_id\"]}}?organization_id=685685414&accept=pdf",
        "responseFormat": "file",
        "dataPropertyName": "po_file",
        "options": {}
      },
      "name": "Get PO attachment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4100,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "=input_file:po_file"
      },
      "name": "Upload PO in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4460,
        -100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "setAllData": false,
        "sourceKey": "po_file",
        "options": {
          "keepSource": true,
          "keepAsBase64": true
        }
      },
      "name": "Move Binary Data",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        4280,
        40
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendors?filter={\"vendor\":{ \"email\": { \"_eq\": \"{{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"]}}\"}}}",
        "options": {}
      },
      "name": "Check for vendor in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5000,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for vendor in vpanel\"].json.data.length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Condition for checking vendor",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        5160,
        40
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/users",
        "options": {
          "ignoreResponseCode": true
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "first_name",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_name\"]}}"
            },
            {
              "name": "email",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"]}}"
            },
            {
              "name": "password",
              "value": "=vendor@123"
            },
            {
              "name": "role",
              "value": "=afb9d0f3-e000-449a-8ed9-ce0901df7cf4"
            }
          ]
        }
      },
      "name": "Create vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5220,
        -240
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendors",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "vendor",
              "value": "={{$node[\"Create vendor\"].json[\"data\"][\"id\"]}}"
            },
            {
              "name": "vendor_phone",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_phone\"]}}"
            },
            {
              "name": "vendor_company",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_company\"]}}"
            },
            {
              "name": "vendor_address",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"vendor_address\"]}}"
            },
            {
              "name": "gstin",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"gstin\"]}}"
            }
          ]
        }
      },
      "name": "Create vendor details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5800,
        -240
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        5420,
        260
      ]
    },
    {
      "parameters": {
        "functionCode": "let products = $node[\"Get po_details\"].json[\"data\"][0][\"po_items\"];\n\nlet product_codes = [];\nproducts.forEach(function(obj,index){\n    product_codes.push(obj[\"product\"][\"id\"])\n})\n\nitems[0].json.product_codes = product_codes;\nreturn items;"
      },
      "name": "Function for getting sku",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        5680,
        80
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_products?filter={ \"product_code\": { \"_in\": \"{{$node[\"Function for getting sku\"].json.product_codes}}\"}}",
        "options": {}
      },
      "name": "Get the products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5980,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nlet action = \"\";\nlet products = $node[\"Get po_details\"].json[\"data\"][0][\"po_items\"];\nlet product_codes = $node[\"Function for getting sku\"].json.product_codes;\nlet existing_product_codes = [];\n\nlet existing_products = items[0].json.data\nlet resultFilter = \n   products.filter(products=>\n     !existing_products.some(\n      data=> data.product_code === products[\"product\"][\"id\"] \n    )\n  );\n\nexisting_products.forEach(function(prod,index){\n  existing_product_codes.push(prod.product_code);\n});\n\nvar toFindDuplicates = product_codes.reduce(function(acc, el, i, arr) {\n  if (arr.indexOf(el) !== i && acc.indexOf(el) < 0) acc.push(el); return acc;\n}, []);\n\ntoFindDuplicates.forEach(function(code,index){\n  let filterProducts = products.filter(prod => prod[\"product\"][\"id\"] == code);\n  let filterExistingProducts = existing_products.filter(prod=>prod.product_code == code);\n  if(filterProducts.length>filterExistingProducts.length){\n    resultFilter.push(filterProducts[0]);\n  }\n});\n\n\nlet products_to_create = []\nitems[0].json.length= resultFilter .length;\nif(resultFilter.length>0){\n   action=\"post the products\";\n   resultFilter.forEach(function(obj,index){\n     products_to_create[index]={};\n     products_to_create[index].product_name = obj[\"product\"][\"product_name\"]\n     products_to_create[index].product_code = obj[\"product\"][\"id\"]\n     products_to_create[index].hsn = obj[\"hsn\"]\n     products_to_create[index].description = obj[\"product\"][\"description\"]\n   })\n\n}else action = \"no products to post\";\n\nitems[0].json.postProducts=products_to_create ;\nitems[0].json.products=products;\nitems[0].json.existing_product_codes=existing_product_codes;\nitems[0].json.toFindDuplicates=toFindDuplicates;\n\n\n\nitems[0].json.action = action;\n\n\n\nreturn items;"
      },
      "name": "Function to create products",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        6240,
        80
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "post the products"
            }
          ]
        }
      },
      "name": "Checking condition whether to post the products ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        6480,
        80
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_products",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function to create products\"].json[\"postProducts\"]}}"
      },
      "name": "post product details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        6740,
        -100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        6740,
        260
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendor_pos",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "po_file",
              "value": "={{$node[\"Upload PO in vpanel\"].json[\"data\"][\"id\"]}}"
            },
            {
              "name": "po_number",
              "value": "={{$node[\"create po\"].json[\"purchaseorder\"][\"purchaseorder_number\"]}}"
            },
            {
              "name": "po_value",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"po_value\"]}}"
            },
            {
              "name": "po_date",
              "value": "={{$node[\"Get po_details\"].json[\"data\"][0][\"po_date\"]}}"
            },
            {
              "name": "vendor",
              "value": "={{$node[\"Check for vendor in vpanel\"].json.data.length>0 &&Array.isArray($node[\"Check for vendor in vpanel\"].json.data)?$node[\"Check for vendor in vpanel\"].json.data[0].id:$node[\"Check for vendor in vpanel\"].json.data.length>0 && !Array.isArray($node[\"Check for vendor in vpanel\"].json.data )?$node[\"Check for vendor in vpanel\"].json.data.id:Array.isArray($node[\"Create vendor details\"].json.data)?$node[\"Create vendor details\"].json.data[0].id:$node[\"Create vendor details\"].json.data.id}}"
            },
            {
              "name": "client",
              "value": "={{$node[\"Webhook\"].json[\"headers\"][\"client\"]}}"
            }
          ]
        }
      },
      "name": "Create po in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        7180,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendor_pos_sdv_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to map po and product\"].json.po_to_products}}"
      },
      "name": "Map po and products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        7680,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let po_to_products = [];\nlet concat_products = $node[\"Function to create products\"].json.action == \"post the products\"?[...$node[\"post product details\"].json.data,...$node[\"Get the products\"].json.data]:$node[\"Get the products\"].json.data;\nconcat_products.map((obj, i) => ({ ...obj, isMapped: false }));\nlet product_details = $node[\"Get po_details\"].json[\"data\"][0][\"po_items\"]\nproduct_details.forEach(function(obj,index){\n  let product = concat_products.filter(prod=>prod.product_code == obj[\"product\"][\"id\"] && !prod[\"isMapped\"]);\n  concat_products[concat_products.findIndex(prod=>prod.product_code == obj[\"product\"][\"id\"]&& !prod[\"isMapped\"])].isMapped = true;\n  po_to_products[index]={};\n  po_to_products[index].sdv_products_id = product[0].id;\n  po_to_products[index].sdv_vendor_pos_id = Array.isArray($node[\"Create po in vpanel\"].json.data)?$node[\"Create po in vpanel\"].json.data[0].id:$node[\"Create po in vpanel\"].json.data.id;\n  po_to_products[index].req_qty = obj.requested_qty\n  po_to_products[index].rate = obj.unit_price\n  po_to_products[index].sub_total = obj.net_price\n  po_to_products[index].tax_value = obj.tax_value\n  po_to_products[index].product_total = obj.gross_price\n})\n\n\nitems[0].json.po_to_products= po_to_products;\nitems[0].json.concat_products= concat_products;\nitems[0].json.product_details= product_details;\nreturn items;"
      },
      "name": "Function to map po and product",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        7420,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_invoice_details",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "vendor_po_number",
              "value": "={{$node[\"Update the vendor po_num\"].json[\"data\"][\"id\"]}}"
            }
          ]
        }
      },
      "name": "Create vendor invoice details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3920,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_plants?filter={\"id\":{\"_eq\":\"{{$node[\"Get po_details\"].json[\"data\"][0][\"po_items\"][0][\"plant\"]}}\"}}",
        "options": {}
      },
      "name": "Get contact details based on plant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        500,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "=input_file:po_file"
      },
      "name": "Upload PO in mozart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4440,
        220
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_pos/{{$node[\"Get po_details\"].json[\"data\"][0][\"id\"].replace(\"/\",\"%2F\")}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "po_file",
              "value": "={{$node[\"Upload PO in mozart\"].json[\"data\"][\"id\"]}}"
            }
          ]
        }
      },
      "name": "Update the vendor po_file in mozart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4820,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "mode": "wait"
      },
      "name": "Wait for file upload",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        4640,
        40
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "={{$node[\"Webhook\"].json[\"headers\"][\"client\"]}}"
            },
            {
              "name": "env",
              "value": "={{$node[\"Webhook\"].json[\"headers\"][\"x-sd-env\"]}}"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -120,
        100
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_pos/{{$node[\"Get po_details\"].json[\"data\"][0][\"po_num\"][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "po_status",
              "value": "=vendor_po_sent"
            }
          ]
        }
      },
      "name": "Update the po_status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        7920,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/purchaseorders/{{$node[\"create po\"].json[\"purchaseorder\"][\"purchaseorder_id\"]}}/email?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Construct obj for sending mail\"].json.mail_obj}}"
      },
      "name": "Send email to vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        8360,
        120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": " let po_number = $node[\"create po\"].json[\"purchaseorder\"][\"purchaseorder_number\"];\nlet po_date = $node[\"create po\"].json[\"purchaseorder\"][\"date\"];\n let po_total = $node[\"create po\"].json[\"purchaseorder\"][\"total\"];\nlet from_address_id = \"1763031000051671212\";\ncc_mail_ids = [\"sairam.reddy@shakedeal.com\"]\nlet vendor_name = $node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"vendor_name\"];\n//let subject = `Purchase Order from Opcommerce Online Private Limited (PO #: ${po_number})`;\n//let subject = `Purchase Order from Opcommerce Online Private Limited (PO #: SDPO)`;\n//let to_mail_ids = [$node[\"Get po_details\"].json[\"data\"][\"vendor\"][\"vendor_email\"]];\nlet to_mail_ids = [\"sairam.reddy@shakedeal.com\"];\nlet body = `Dear ${vendor_name}, <br><br>The purchase order ${po_number} is attached with this email. <br><br>An overview of the purchase order is available below: <br> ----------------------------------------------------------------------------------------<br><h2>Purchase Order&nbsp;# :&nbsp;${po_number}</h2><br> ----------------------------------------------------------------------------------------<br><b>&nbsp;Order Date &nbsp; &nbsp;&nbsp;&nbsp;: &nbsp;<span>${po_date}</span></b><br><b>&nbsp;Amount &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : &nbsp;&nbsp;₹${po_total}(in INR)</b><br>----------------------------------------------------------------------------------------<br><br><br>Please go through it and confirm the order. We look forward to working with you again<br><br><br><br>Regards<br><br>Zillium Inc<br><Opcommerce Online Private Limited><br>`\n\nlet mail_obj = {};\nmail_obj.from_address_id = from_address_id;\nmail_obj.cc_mail_ids = mail_obj;\n//mail_obj.subject = subject;\nmail_obj.to_mail_ids= to_mail_ids;\nmail_obj.body = body;\n\nitems[0].json.mail_obj = mail_obj;\n\nreturn items;"
      },
      "name": "Construct obj for sending mail",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        8140,
        100
      ],
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Create vendor\"].json[\"errors\"][0][\"message\"]}}",
              "value2": "=Field \"email\" has to be unique."
            }
          ]
        }
      },
      "name": "Check whether user exits or not",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        5420,
        -240
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/users?filter={\"email\":\"{{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"id\"]}}\"}",
        "options": {}
      },
      "name": "Get user id",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5600,
        -420
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp4",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        5600,
        -200
      ]
    },
    {
      "parameters": {
        "values": {
          "number": [
            {
              "name": "commission",
              "value": 2
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -300,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_state_codes?filter={\"tin\":{\"_eq\":\"{{$node[\"Get po_details\"].json[\"data\"][0][\"vendor\"][\"gstin\"].trim().slice(0, 2)}}\"}}",
        "options": {}
      },
      "name": "Get the place of supply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1780,
        -180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    }
  ],
  "settings": {
    "saveExecutionProgress": true
  },
  "staticData": null,
  "tags": [],
  "updatedAt": "2022-11-30T09:43:08.001Z"
}