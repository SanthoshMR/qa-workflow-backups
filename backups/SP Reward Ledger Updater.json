{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Ledger Calculator and Updater1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-05-04T09:43:59.215Z",
  "id": "300",
  "name": "SP Reward Ledger Updater",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -340,
        40
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-reward-ledger",
        "responseMode": "lastNode",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -520,
        320
      ],
      "webhookId": "96579495-29af-4ff7-a29c-3ccfbf507f40"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "dms_campaign_url",
              "value": "https://campaignsqa.shakepe.com"
            },
            {
              "name": "campaigns_header_auth",
              "value": "Bearer A1SgJqv876pUzTBHfwg1f86znvD3iD3C"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -280,
        320
      ]
    },
    {
      "parameters": {
        "functionCode": "const axios = require('axios');\n\nconst dmsUrl = $node[\"Globals\"].json[\"dms_campaign_url\"];\nconst campaignsAuth = $node[\"Globals\"].json[\"campaigns_header_auth\"];\n\ntry {\n  const allRedemptionsFromActiveCampaign = await axios.get(`${dmsUrl}/items/sp_reward_redemptions`, {\n    params: {\n      sort: [\"date_created\"],\n      fields: [\n        \"*\", \n        \"reward_link.pending_value\",\n        \"reward_link.value\",\n        \"reward_link.reward_campaign\",\n        \"reward_link.id\",\n        \"sku.value\",\n        \"sku.name\",\n        \"reward_link.reward_campaign.name\",\n        \"reward_link.reward_campaign.status\",\n        \"reward_link.reward_campaign.id\",\n      ],\n      filter: {\n        _and: [\n          {\n            reward_link: {\n              _nnull: true\n            }\n          },\n          {\n            reward_link: {\n              reward_campaign: {\n                status: {\n                  _eq: \"active\"\n                }\n              }\n            }\n          }\n        ]\n      },\n      limit: -1\n    },\n    headers: {\n      'Authorization': campaignsAuth\n    }\n  });\n\n  const campaignWiseTotalLinkValues = await axios.get(`${dmsUrl}/items/sp_reward_links`, {\n    params: {\n      sort: [\"date_created\"],\n      fields: [\n        \"reward_campaign\", \"value\"\n      ],\n      filter: {\n        _and: [\n          {\n              reward_campaign: {\n                status: {\n                  _eq: \"active\"\n              }\n            }\n          }\n        ]\n      },\n      limit: -1\n    },\n    headers: {\n      'Authorization': campaignsAuth\n    }\n  });\n\n  const campaignWiseOpeningBalances = {};\n\n  const allRewardLinkValues = campaignWiseTotalLinkValues.data.data;\n\n  allRewardLinkValues.forEach(({reward_campaign, value})=>{\n    if(!campaignWiseOpeningBalances[reward_campaign]){ \n      campaignWiseOpeningBalances[reward_campaign]={ opening_balance: 0 }\n    }\n    campaignWiseOpeningBalances[reward_campaign][\"opening_balance\"]+=value*1;\n  });\n  \n  const campaignWiseReportsJson = {};\n\n  const redemptionsArray = allRedemptionsFromActiveCampaign.data.data;\n\n  redemptionsArray.forEach(redemption=>{\n    const campaignName = redemption[\"reward_link\"][\"reward_campaign\"][\"name\"];\n    const campaignId = redemption[\"reward_link\"][\"reward_campaign\"][\"id\"];\n    const redemptionValue = redemption[\"sku\"]?redemption[\"sku\"][\"value\"]:0;\n    const redemptionMonthYear = (new Date(redemption[\"date_created\"]).getMonth()+1)+\"-\"+new Date(redemption[\"date_created\"]).getFullYear();\n    if(!campaignWiseReportsJson[campaignId]) {\n      campaignWiseReportsJson[campaignId] = {};\n    }\n    if(!campaignWiseReportsJson[campaignId][redemptionMonthYear]) {\n      let openingBalanceCalc = 0;\n      if(Object.keys(campaignWiseReportsJson[campaignId]).length>1) {\n        const lastMonthKey = Object.keys(campaignWiseReportsJson[campaignId])[Object.keys(campaignWiseReportsJson[campaignId]).length-1];\n        openingBalanceCalc = campaignWiseReportsJson[campaignId][lastMonthKey][\"closing_balance\"];\n        campaignWiseReportsJson[campaignId][redemptionMonthYear] = {\n          opening_balance: openingBalanceCalc,\n          closing_balance: 0,\n          loaded_balance: 0,\n          redeemed_amount: 0\n        };\n      } else if(Object.keys(campaignWiseReportsJson[campaignId]).length==1) {\n        const lastMonthKey = Object.keys(campaignWiseReportsJson[campaignId])[Object.keys(campaignWiseReportsJson[campaignId]).length-1];\n        openingBalanceCalc = campaignWiseReportsJson[campaignId][lastMonthKey][\"loaded_balance\"];\n        campaignWiseReportsJson[campaignId][redemptionMonthYear] = {\n          opening_balance: openingBalanceCalc,\n          closing_balance: 0,\n          loaded_balance: 0,\n          redeemed_amount: 0\n        };\n      } else {\n        openingBalanceCalc = campaignWiseOpeningBalances[campaignId][\"opening_balance\"];\n        campaignWiseReportsJson[campaignId][redemptionMonthYear] = {\n          opening_balance: 0,\n          closing_balance: 0,\n          loaded_balance: openingBalanceCalc,\n          redeemed_amount: 0\n        };\n      }\n\n      \n    }\n    campaignWiseReportsJson[campaignId][redemptionMonthYear][\"redeemed_amount\"]+=redemptionValue*1;\n    campaignWiseReportsJson[campaignId][redemptionMonthYear][\"closing_balance\"]=\n       campaignWiseReportsJson[campaignId][redemptionMonthYear][\"opening_balance\"] \n       + campaignWiseReportsJson[campaignId][redemptionMonthYear][\"loaded_balance\"]\n       - campaignWiseReportsJson[campaignId][redemptionMonthYear][\"redeemed_amount\"];\n  });\n\n  const campaignWiseReportsList = [];\n\n  Object.keys(campaignWiseReportsJson).forEach(campaignId=>{\n    Object.keys(campaignWiseReportsJson[campaignId]).forEach(record=>{\n      const month = record.split(\"-\")[0];\n      const year = record.split(\"-\")[1];\n      campaignWiseReportsList.push({\n        month, year, reward_campaign: campaignId, ...campaignWiseReportsJson[campaignId][record]\n      });\n    });\n  });\n  \n\n  // return { data: campaignWiseReportsList };\n\n  try {\n    const getAllLedgerResponse = await axios.get(`${dmsUrl}/items/sp_reward_ledger`, {\n      params: {\n        fields: [\n          \"id\"\n        ],\n        limit: -1\n      },\n      headers: {\n        'Authorization': campaignsAuth\n      }\n    });\n\n    const allLedgerKeys = getAllLedgerResponse.data.data.map(led=>{\n      return led.id;\n    });\n\n    const deleteAllLedgerResponse = await axios.delete(`${dmsUrl}/items/sp_reward_ledger`, {\n      headers: {\n        'Authorization': campaignsAuth\n      },\n      data: {\n        keys: allLedgerKeys\n      }\n    });\n\n    const addAllLedgerResponse = await axios.post(`${dmsUrl}/items/sp_reward_ledger`, campaignWiseReportsList,\n    {\n      headers: {\n        'Authorization': campaignsAuth,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    return campaignWiseReportsList;\n    \n  } catch(e) {\n    return { updationError: \"\"+e};\n  }\n\n} catch (e) {\n  return { calculationError: \"\"+e};\n}\n\n\n\n\n"
      },
      "name": "Ledger Calculator and Updater",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -580,
        20
      ]
    },
    {
      "parameters": {
        "functionCode": "const axios = require('axios');\n\nconst dmsUrl = $node[\"Globals\"].json[\"dms_campaign_url\"];\nconst campaignsAuth = $node[\"Globals\"].json[\"campaigns_header_auth\"];\n\ntry {\n  const allRedemptionsFromActiveCampaign = await axios.get(`${dmsUrl}/items/sp_reward_redemptions`, {\n    params: {\n      sort: [\"date_created\"],\n      fields: [\n        \"*\", \n        \"reward_link.pending_value\",\n        \"reward_link.value\",\n        \"reward_link.reward_campaign\",\n        \"reward_link.id\",\n        \"sku.value\",\n        \"sku.name\",\n        \"reward_link.reward_campaign.name\",\n        \"reward_link.reward_campaign.status\",\n        \"reward_link.reward_campaign.id\",\n        \"reward_link.reward_campaign.end_date\"\n      ],\n      filter: {\n        _and: [\n          {\n            reward_link: {\n              _nnull: true\n            }\n          },\n          {\n            reward_link: {\n              reward_campaign: {\n                status: {\n                  _eq: \"active\"\n                }\n              }\n            }\n          }\n        ]\n      },\n      limit: -1\n    },\n    headers: {\n      'Authorization': campaignsAuth\n    }\n  });\n\n  const campaignWiseTotalLinkValues = await axios.get(`${dmsUrl}/items/sp_reward_links`, {\n    params: {\n      sort: [\"date_created\"],\n      fields: [\n        \"reward_campaign.id\",\"reward_campaign.end_date\", \"reward_campaign.start_date\", \"value\"\n      ],\n      filter: {\n        _and: [\n          {\n              reward_campaign: {\n                status: {\n                  _eq: \"active\"\n              }\n            }\n          }\n        ]\n      },\n      limit: -1\n    },\n    headers: {\n      'Authorization': campaignsAuth\n    }\n  });\n\n  const campaignWiseOpeningBalances = {};\n\n  const allRewardLinkValues = campaignWiseTotalLinkValues.data.data;\n\n  allRewardLinkValues.forEach(({reward_campaign, value})=>{\n    if(!campaignWiseOpeningBalances[reward_campaign[\"id\"]]){ \n      campaignWiseOpeningBalances[reward_campaign[\"id\"]]={ opening_balance: 0, end_date: reward_campaign[\"end_date\"], start_date: reward_campaign[\"start_date\"] }\n    }\n    campaignWiseOpeningBalances[reward_campaign[\"id\"]][\"opening_balance\"]+=value*1;\n  });\n  \n  const campaignWiseReportsJson = {};\n\n  const redemptionsArray = allRedemptionsFromActiveCampaign.data.data;\n\n  // Object.keys(campaignWiseOpeningBalances).forEach(campaignId=>{\n  //   const startDate = campaignWiseOpeningBalances[campaignId][\"start_date\"];\n  //   const endDate = campaignWiseOpeningBalances[campaignId][\"end_date\"];\n\n  // });\n\n  redemptionsArray.forEach(redemption => {\n    const campaignName = redemption[\"reward_link\"][\"reward_campaign\"][\"name\"];\n    const campaignId = redemption[\"reward_link\"][\"reward_campaign\"][\"id\"];\n    const redemptionValue = redemption[\"sku\"]?redemption[\"sku\"][\"value\"]:0;\n    const redemptionMonthYear = (new Date(redemption[\"date_created\"]).getMonth()+1)+\"-\"+new Date(redemption[\"date_created\"]).getFullYear();\n    if(!campaignWiseReportsJson[campaignId]) {\n      campaignWiseReportsJson[campaignId] = {};\n    }\n    if(!campaignWiseReportsJson[campaignId][redemptionMonthYear]) {\n      let openingBalanceCalc = 0;\n      if(Object.keys(campaignWiseReportsJson[campaignId]).length>1) {\n        const lastMonthKey = Object.keys(campaignWiseReportsJson[campaignId])[Object.keys(campaignWiseReportsJson[campaignId]).length-1];\n        openingBalanceCalc = campaignWiseReportsJson[campaignId][lastMonthKey][\"closing_balance\"];\n        campaignWiseReportsJson[campaignId][redemptionMonthYear] = {\n          opening_balance: openingBalanceCalc,\n          closing_balance: 0,\n          loaded_balance: 0,\n          redeemed_amount: 0\n        };\n      } else if(Object.keys(campaignWiseReportsJson[campaignId]).length==1) {\n        const lastMonthKey = Object.keys(campaignWiseReportsJson[campaignId])[Object.keys(campaignWiseReportsJson[campaignId]).length-1];\n        openingBalanceCalc = campaignWiseReportsJson[campaignId][lastMonthKey][\"closing_balance\"];\n        campaignWiseReportsJson[campaignId][redemptionMonthYear] = {\n          opening_balance: openingBalanceCalc,\n          closing_balance: 0,\n          loaded_balance: 0,\n          redeemed_amount: 0\n        };\n      } else {\n        openingBalanceCalc = campaignWiseOpeningBalances[campaignId][\"opening_balance\"];\n        campaignWiseReportsJson[campaignId][redemptionMonthYear] = {\n          opening_balance: 0,\n          closing_balance: 0,\n          loaded_balance: openingBalanceCalc,\n          redeemed_amount: 0\n        };\n      }\n\n      \n    }\n    campaignWiseReportsJson[campaignId][redemptionMonthYear][\"redeemed_amount\"]+=redemptionValue*1;\n    campaignWiseReportsJson[campaignId][redemptionMonthYear][\"closing_balance\"]=\n       campaignWiseReportsJson[campaignId][redemptionMonthYear][\"opening_balance\"] \n       + campaignWiseReportsJson[campaignId][redemptionMonthYear][\"loaded_balance\"]\n       - campaignWiseReportsJson[campaignId][redemptionMonthYear][\"redeemed_amount\"];\n  });\n\n  const campaignWiseReportsList = [];\n\n  Object.keys(campaignWiseReportsJson).forEach((campaignId)=>{\n    Object.keys(campaignWiseReportsJson[campaignId]).forEach((record, index)=>{\n      const month = record.split(\"-\")[0];\n      const year = record.split(\"-\")[1];\n\n      const expiryMonth = new Date(campaignWiseOpeningBalances[campaignId][\"end_date\"]).getMonth()+1;\n      const expiryYear = new Date(campaignWiseOpeningBalances[campaignId][\"end_date\"]).getFullYear();\n\n\n      campaignWiseReportsList.push({\n        month, year, reward_campaign: campaignId, ...campaignWiseReportsJson[campaignId][record]\n      });\n\n      if(index==(Object.keys(campaignWiseReportsJson[campaignId]).length-1)) {\n        if(campaignWiseOpeningBalances[campaignId][\"end_date\"] < new Date().toISOString()) {\n          if(month==expiryMonth && year==expiryYear) {\n            campaignWiseReportsList[ campaignWiseReportsList.length-1 ] = {\n              month: expiryMonth, \n              year: expiryYear, \n              reward_campaign: campaignId, \n              opening_balance: campaignWiseReportsJson[campaignId][record][\"closing_balance\"],\n              closing_balance: 0,\n              expired_balance: campaignWiseReportsJson[campaignId][record][\"closing_balance\"],\n              loaded_balance: 0,\n              redeemed_amount: 0\n            }\n          } else {\n            campaignWiseReportsList.push({\n              month: expiryMonth, \n              year: expiryYear, \n              reward_campaign: campaignId, \n              opening_balance: campaignWiseReportsJson[campaignId][record][\"closing_balance\"],\n              closing_balance: 0,\n              expired_balance: campaignWiseReportsJson[campaignId][record][\"closing_balance\"],\n              loaded_balance: 0,\n              redeemed_amount: 0\n            });\n          }\n        }\n      }\n\n    });\n  });\n  \n\n  // return { data: campaignWiseReportsList };\n\n  try {\n    const getAllLedgerResponse = await axios.get(`${dmsUrl}/items/sp_reward_ledger`, {\n      params: {\n        fields: [\n          \"id\"\n        ],\n        limit: -1\n      },\n      headers: {\n        'Authorization': campaignsAuth\n      }\n    });\n\n    const allLedgerKeys = getAllLedgerResponse.data.data.map(led=>{\n      return led.id;\n    });\n\n    const deleteAllLedgerResponse = await axios.delete(`${dmsUrl}/items/sp_reward_ledger`, {\n      headers: {\n        'Authorization': campaignsAuth\n      },\n      data: {\n        keys: allLedgerKeys\n      }\n    });\n\n    const addAllLedgerResponse = await axios.post(`${dmsUrl}/items/sp_reward_ledger`, campaignWiseReportsList,\n    {\n      headers: {\n        'Authorization': campaignsAuth,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    return campaignWiseReportsList;\n    \n  } catch(e) {\n    return { updationError: \"\"+e};\n  }\n\n} catch (e) {\n  return { calculationError: \"\"+e};\n}\n\n\n\n\n"
      },
      "name": "Ledger Calculator and Updater1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -60,
        320
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-05-05T17:16:38.892Z"
}