{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get the current shipment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the shipment": {
      "main": [
        [
          {
            "node": "Get the shipment from vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the shipment from vpanel": {
      "main": [
        [
          {
            "node": "Update shipment status in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update shipment status in vpanel": {
      "main": [
        [
          {
            "node": "Get all shipments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Update order status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get pr_advance payment": {
      "main": [
        [
          {
            "node": "Function to get payment ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create payment to vendors": {
      "main": [
        [
          {
            "node": "Create payment to vendors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for grn accepted": {
      "main": [
        [
          {
            "node": "Get pr_advance payment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create payment to vendors": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp1": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the residual amounts": {
      "main": [
        [
          {
            "node": "Check for consignment type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to update advance payments": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Function to update advance payments",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp3": {
      "main": [
        [
          {
            "node": "Check for consignment type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for consignment type": {
      "main": [
        [
          {
            "node": "Function to create payment to shakedeal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create payment to shakedeal": {
      "main": [
        [
          {
            "node": "Create payment to shakedeal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp4": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create payment to shakedeal": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Payments Data in vpanel": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get payment ids": {
      "main": [
        [
          {
            "node": "Get the payments from vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the payments from vpanel": {
      "main": [
        [
          {
            "node": "Function to create payment to vendors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Tag payment to shipment in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tag shipment to payment in vpanel": {
      "main": [
        [
          {
            "node": "Update the residual amounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tag payment to shipment in vpanel": {
      "main": [
        [
          {
            "node": "Tag shipment to payment in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Update payments to vendors in payments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update payments to vendors in payments": {
      "main": [
        [
          {
            "node": "Update Payments Data in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all shipments": {
      "main": [
        [
          {
            "node": "Check for grn accepted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the shipment id": {
      "main": [
        [
          {
            "node": "Get the shipment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the current shipment": {
      "main": [
        [
          {
            "node": "Get the shipment id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-05-24T13:28:32.382Z",
  "id": "315",
  "name": "Vedanta : Update Shipment Status on GRN update",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -280,
        280
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "=update-shipment-status",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -100,
        280
      ],
      "webhookId": "ffe2d71b-3e50-4241-9e4f-951057739a56",
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        140,
        280
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_shipments/{{$node[\"Get the shipment id\"].json[\"data\"][0][\"id\"]}}?fields=*,shipment_items.*,shipment_items.sdm_po_items_id.*,sdm_orders.*,sdm_orders.sdm_orders_id.*,vendor_po_num.*",
        "options": {}
      },
      "name": "Get the shipment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        400,
        280
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_shipments?filter={\"_and\": [{\"invoice_number\":{\"_eq\":\"{{$node[\"Get the shipment\"].json[\"data\"][\"invoice_number\"]}}\"}},{\"vendor_po_num\":{\"po_number\":{\"_eq\":\"{{$node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"id\"]}}\"}}}]}",
        "options": {}
      },
      "name": "Get the shipment from vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        640,
        280
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_shipments/{{$node[\"Get the shipment from vpanel\"].json[\"data\"][0][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "shipment_Status",
              "value": "={{$node[\"Webhook\"].json[\"body\"][\"payload\"][\"shipment_status\"]}}"
            }
          ]
        }
      },
      "name": "Update shipment status in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        860,
        280
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_orders/{{$node[\"Get the shipment\"].json[\"data\"][\"sdm_orders\"][0][\"sdm_orders_id\"][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "order_status",
              "value": "={{$node[\"Webhook\"].json[\"body\"][\"payload\"][\"shipment_status\"] == \"grn_partially_accepted\" || $node[\"Webhook\"].json[\"body\"][\"payload\"][\"shipment_status\"] == \"grn_completed\"?\"complete\":\"cancelled\"}}"
            }
          ]
        }
      },
      "name": "Update order status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4540,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"consignment_type\"] == \"non_consignmnet\"?true:false}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4180,
        440
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4540,
        620
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_payments?filter={\"_and\": [{\"vendor_po_number\": {\"_eq\":\"{{$node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"id\"]}}\"}},{\"vendor_payment_status\":{\"_eq\":true}},{\"residual_amount\":{\"_gt\":0}},{\"payment_type\":{\"_eq\":\"advance\"}}]}&fields=*,upload_document.*",
        "options": {}
      },
      "name": "Get pr_advance payment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1500,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let advancePayments = $node[\"Get pr_advance payment\"].json.data;\nlet vpanelAdvanvcePayments = $node[\"Get the payments from vpanel\"].json.data;\nlet allShipmentData = $node[\"Get all shipments\"].json.data;\nlet allShipmentItems = [];\nallShipmentData.forEach(function(shipmentData,index){\n  allShipmentItems.push(...shipmentData.shipment_items)\n})\n\nlet orderValue = allShipmentItems.reduce((accumulator, current) => {\n  if (current.grn_status == \"grn_accepted\" || current.grn_status == \"grn_partially_accepted\") {\n    let netValue = current.accepted_qty * parseFloat(current.sdm_po_items_id.unit_price);\n    let grossValue = netValue+(netValue*parseFloat(current.sdm_po_items_id.tax_percentage))/100;\n    return accumulator + grossValue;\n  } else {\n    return accumulator;\n  }\n}, 0);\nlet vendorpaymentTerms = $node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"payment_terms\"];\nlet remainingOrderValue = orderValue;\nlet updateResidualAmountArr = [];\nlet vendorPayments = [];\nlet paymentStatus = \"\";\nlet maxPercentage = 100;\nlet minPercentage = 0;\nlet paymentToVendorsobj = {};\nif(advancePayments.length>0){\n  advancePayments.forEach(function(payment,index){\n    if(remainingOrderValue>0){\n      let matchedVpanelPayment = vpanelAdvanvcePayments.filter(vpayment=>vpayment.payment_ref == payment.id );\n      let residual_amount = remainingOrderValue>=payment.residual_amount?0:(payment.residual_amount-remainingOrderValue);\n      let paymentConsumedAmount = remainingOrderValue>payment.residual_amount?payment.residual_amount:remainingOrderValue;\n      remainingOrderValue= payment.residual_amount>=remainingOrderValue?0:remainingOrderValue-payment.residual_amount;\n      updateResidualAmountArr[index] = {};\n      updateResidualAmountArr[index].id = payment.id;\n      updateResidualAmountArr[index].vpanelId = matchedVpanelPayment[0].id;\n      updateResidualAmountArr[index].residual_amount = residual_amount;\n      updateResidualAmountArr[index].consumed_amount = parseInt(payment.actual_paid_amount)-residual_amount;\n      updateResidualAmountArr[index].payment_consumed_amount = paymentConsumedAmount;\n    }\n  })\n}\nlet totalPaidAmount = orderValue - remainingOrderValue;\nlet percentagePaid = (totalPaidAmount*100)/orderValue;\nif(percentagePaid>=maxPercentage){\n  paymentStatus=\"paymentreleased\"\n}else if(percentagePaid>minPercentage && percentagePaid<100){\n  paymentStatus=\"partiallypaid\"\n}else paymentStatus=\"paymentpending\"\n\n// Get the current date\nfunction getFormattedDate(daysToAdd){\n  var today = new Date();\n\n  // Add 30 days to the current date\n  today.setDate(today.getDate() + parseInt(daysToAdd));\n\n  // Format the resulting date as YYYY-MM-DD\n  var year = today.getFullYear();\n  var month = String(today.getMonth() + 1).padStart(2, '0');\n  var day = String(today.getDate()).padStart(2, '0');\n  var formattedDate = year + '-' + month + '-' + day;\n  return formattedDate\n}\n\n//Construct obj for vendor payments\nif(remainingOrderValue){\n  vendorPayments.push(\n    {\n      sdm_vendor_payments_id:{\n        vendor_po_number : $node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"id\"],\n        payment_amount : remainingOrderValue,\n        payment_type :  \"invoice\",\n      }\n    }\n  )\n}\nif(updateResidualAmountArr.length>0){\n  updateResidualAmountArr.forEach(function(payment,index){\n    vendorPayments.push(\n      {\n        sdm_vendor_payments_id:payment.id,\n        consumed_amount : payment.payment_consumed_amount\n      }\n    )\n  })\n}\n\n//construct obj for payment to vendors record\npaymentToVendorsobj.vendor_po_number = $node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"id\"];\npaymentToVendorsobj.vendor_invoice = $node[\"Get the shipment\"].json[\"data\"][\"vendor_invoice\"];\npaymentToVendorsobj.invoice_number = $node[\"Get the shipment\"].json[\"data\"][\"invoice_number\"];\npaymentToVendorsobj.payment_due_date = new Date(getFormattedDate(vendorpaymentTerms));\npaymentToVendorsobj.inward_date = new Date(getFormattedDate(5));\npaymentToVendorsobj.vendor_displayed_due_date = new Date(getFormattedDate(5+parseInt(vendorpaymentTerms)));\npaymentToVendorsobj.shipment = $node[\"Get the shipment\"].json[\"data\"][\"id\"];\npaymentToVendorsobj.payable_amount = orderValue;\npaymentToVendorsobj.total_paid_amount = totalPaidAmount;\npaymentToVendorsobj.total_percentage_paid = percentagePaid;\npaymentToVendorsobj.remaining_to_pay = remainingOrderValue;\npaymentToVendorsobj.vendor_payment = paymentStatus;\npaymentToVendorsobj.vendor_payments = vendorPayments;\npaymentToVendorsobj.ld_charges = 0;\npaymentToVendorsobj.tax_deducted = 0;\n//construct obj for payment to vendors record\n\nitems[0].json.totalPaidAmount = totalPaidAmount;\nitems[0].json.advancePayments = advancePayments;\nitems[0].json.order_value = orderValue;\nitems[0].json.remainingOrderValue = remainingOrderValue;\nitems[0].json.updateResidualAmountArr = updateResidualAmountArr;\nitems[0].json.percentagePaid = percentagePaid;\nitems[0].json.paymentStatus = paymentStatus;\nitems[0].json.paymentToVendorsobj = paymentToVendorsobj;\nreturn items;"
      },
      "name": "Function to create payment to vendors",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1800,
        180
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_invoice_details?fields=*,vendor_payments.*",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create payment to vendors\"].json[\"paymentToVendorsobj\"]}}"
      },
      "name": "Create payment to vendors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1980,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Webhook\"].json[\"body\"][\"payload\"][\"shipment_status\"] == \"grn_partially_accepted\" || $node[\"Webhook\"].json[\"body\"][\"payload\"][\"shipment_status\"] == \"grn_completed\"?true:false}}"
            }
          ]
        }
      },
      "name": "Check for grn accepted",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1400,
        280
      ]
    },
    {
      "parameters": {},
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2020,
        520
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Function to create payment to vendors\"].json[\"advancePayments\"].length}}",
              "operation": "larger"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2300,
        160
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to update advance payments\"].json[\"url\"]}}/items/sdm_vendor_payments/{{$node[\"Function to update advance payments\"].json[\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "residual_amount",
              "value": "={{$node[\"Function to update advance payments\"].json[\"residual_amount\"]}}"
            },
            {
              "name": "consumed_amount",
              "value": "={{$node[\"Function to update advance payments\"].json[\"consumed_amount\"]}}"
            }
          ]
        }
      },
      "name": "Update the residual amounts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3300,
        -40
      ],
      "retryOnFail": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const update_residual_amount_obj = $node[\"Function to create payment to vendors\"].json[\"updateResidualAmountArr\"]\n\nlet returnItems =[]\n\nupdate_residual_amount_obj.forEach(function(obj,index){  \n    returnItems.push({\n    json: {\n       id : obj.id,\n       vpanelId : obj.vpanelId,\n       residual_amount : obj.residual_amount,\n       url : $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"],\n       vPanelUrl : $node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"],\n       vendor_invoice : $node[\"Create payment to vendors\"].json[\"data\"][\"id\"],\n       vpanel_vendor_invoice: $node[\"Get the shipment from vpanel\"].json[\"data\"][0][\"id\"],\n       upload_document : obj.upload_document,\n       consumed_amount : obj.consumed_amount,\n       payment_consumed_amount : obj.payment_consumed_amount\n    }\n  });\n  \n})\n\nreturn returnItems;"
      },
      "name": "Function to update advance payments",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2440,
        -40
      ]
    },
    {
      "parameters": {},
      "name": "NoOp3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2820,
        260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"consignment_type\"] == \"non_consignmnet\"?true:false}}"
            }
          ]
        }
      },
      "name": "Check for consignment type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3740,
        0
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "functionCode": "let paymentToShakedealObj = {};\nlet shakedealPayment = [];\n\n\n//Construct shakedeal payment\nshakedealPayment[0] = {};\nshakedealPayment[0].vedanta_po_number = $node[\"Get the shipment\"].json[\"data\"][\"sdm_orders\"][0][\"sdm_orders_id\"][\"po_number\"];\nshakedealPayment[0].invoice_number = $node[\"Get the shipment\"].json[\"data\"][\"sdm_orders\"][0][\"sdm_orders_id\"][\"order_invoice\"][0];\nshakedealPayment[0].net_payable_amount = $node[\"Function to create payment to vendors\"].json[\"order_value\"];\nshakedealPayment[0].tax_percentage = \"0.1\";\nshakedealPayment[0].tax_deduction = ($node[\"Function to create payment to vendors\"].json[\"order_value\"]*0.1)/100;\nshakedealPayment[0].actual_tax_deducted_value = ($node[\"Function to create payment to vendors\"].json[\"order_value\"]*0.1)/100;\n//Construct shakedeal payment\n\n//Construct Payment to shakedeal record\npaymentToShakedealObj.invoice = $node[\"Get the shipment\"].json[\"data\"][\"sdm_orders\"][0][\"sdm_orders_id\"][\"order_invoice\"][0];\npaymentToShakedealObj.order_value = $node[\"Get the shipment\"].json[\"data\"][\"sdm_orders\"][0][\"sdm_orders_id\"][\"order_value\"];\npaymentToShakedealObj.amount_to_be_received =  $node[\"Function to create payment to vendors\"].json[\"order_value\"];\npaymentToShakedealObj.order_id = $node[\"Get the shipment\"].json[\"data\"][\"sdm_orders\"][0][\"sdm_orders_id\"][\"id\"];\npaymentToShakedealObj.total_outstanding =  $node[\"Function to create payment to vendors\"].json[\"order_value\"];\npaymentToShakedealObj.shakedeal_payment_status = \"grn_number_pending\";\npaymentToShakedealObj.sdm_shakedeal_payments = shakedealPayment;\npaymentToShakedealObj.vendor_payment_ref = $node[\"Create payment to vendors\"].json[\"data\"][\"id\"];\npaymentToShakedealObj.grn_number = $node[\"Get the shipment\"].json[\"data\"][\"shipment_items\"][0][\"grn_number\"];\npaymentToShakedealObj.grn_date = $node[\"Get the shipment\"].json[\"data\"][\"shipment_items\"][0][\"grn_date\"];\npaymentToShakedealObj.shakedeal_payment_status = \"dp_number_pending\";\n//Construct Payment to shakedeal record\n\nitems[0].json.shakedealPayment = shakedealPayment;\nitems[0].json.paymentToShakedealObj = paymentToShakedealObj;\nreturn items;"
      },
      "name": "Function to create payment to shakedeal",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3920,
        -240
      ]
    },
    {
      "parameters": {},
      "name": "NoOp4",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3920,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_payment_advise",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create payment to shakedeal\"].json[\"paymentToShakedealObj\"]}}"
      },
      "name": "Create payment to shakedeal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4300,
        -240
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_shipments/{{$node[\"Get the shipment from vpanel\"].json[\"data\"][0][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "inward_date",
              "value": "={{$node[\"Create payment to vendors\"].json[\"data\"][\"inward_date\"]}}"
            },
            {
              "name": "payment_due_date",
              "value": "={{$node[\"Create payment to vendors\"].json[\"data\"][\"vendor_displayed_due_date\"]}}"
            },
            {
              "name": "grn_accepted_value",
              "value": "={{$node[\"Create payment to vendors\"].json[\"data\"][\"payable_amount\"]}}"
            },
            {
              "name": "total_outstanding",
              "value": "={{$node[\"Create payment to vendors\"].json[\"data\"][\"remaining_to_pay\"]}}"
            },
            {
              "name": "total_amount_received",
              "value": "={{$node[\"Create payment to vendors\"].json[\"data\"][\"total_paid_amount\"]}}"
            },
            {
              "name": "payment_status",
              "value": "={{$node[\"Create payment to vendors\"].json[\"data\"][\"vendor_payment\"] == \"partiallypaid\"?\"partially_received\":$node[\"Create payment to vendors\"].json[\"data\"][\"vendor_payment\"] == \"paymentreleased\"?\"fully_received\":$node[\"Update shipment status in vpanel\"].json[\"data\"][\"payment_status\"]}}"
            }
          ]
        }
      },
      "name": "Update Payments Data in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2220,
        -20
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]}}/items/sdv_vendor_payments?filter={\"payment_ref\":{\"_in\":\"{{$node[\"Function to get payment ids\"].json[\"vpanelPaymentIds\"]}}\"}}",
        "options": {}
      },
      "name": "Get the payments from vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1800,
        -100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let advancePayments = $node[\"Get pr_advance payment\"].json.data;\nlet vpanelPaymentIds = [];\nif(advancePayments.length>0){\n  advancePayments.forEach(function(payment,index){\n    vpanelPaymentIds.push(payment.id)\n  })\n}\n\nitems[0].json.vpanelPaymentIds = vpanelPaymentIds\nreturn items;"
      },
      "name": "Function to get payment ids",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1660,
        0
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to update advance payments\"].json[\"vPanelUrl\"]}}/items/sdv_vendor_payments/{{$node[\"Function to update advance payments\"].json[\"vpanelId\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "consumed_amount",
              "value": "={{$node[\"Function to update advance payments\"].json[\"consumed_amount\"]}}"
            }
          ]
        }
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2780,
        -20
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Function to update advance payments\"].json[\"vPanelUrl\"]}}/items/sdv_shipments_sdv_vendor_payments",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "sdv_shipments_id",
              "value": "={{$node[\"Function to update advance payments\"].json[\"vpanel_vendor_invoice\"]}}"
            },
            {
              "name": "sdv_vendor_payments_id",
              "value": "={{$node[\"Function to update advance payments\"].json[\"vpanelId\"]}}"
            },
            {
              "name": "consumed_amount",
              "value": "={{$node[\"Function to update advance payments\"].json[\"payment_consumed_amount\"]}}"
            }
          ]
        }
      },
      "name": "Tag shipment to payment in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3060,
        -20
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Function to update advance payments\"].json[\"vPanelUrl\"]}}/items/sdv_vendor_payments_sdv_shipments",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "sdv_shipments_id",
              "value": "={{$node[\"Function to update advance payments\"].json[\"vpanel_vendor_invoice\"]}}"
            },
            {
              "name": "sdv_vendor_payments_id",
              "value": "={{$node[\"Function to update advance payments\"].json[\"vpanelId\"]}}"
            },
            {
              "name": "consumed_amount",
              "value": "={{$node[\"Function to update advance payments\"].json[\"payment_consumed_amount\"]}}"
            }
          ]
        }
      },
      "name": "Tag payment to shipment in vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2960,
        -160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let vendorPayments = $node[\"Create payment to vendors\"].json[\"data\"][\"vendor_payments\"];\nlet updateShipmentsToPayments = [];\nvendorPayments.forEach(function(payment,index){\n  updateShipmentsToPayments.push({\n    sdm_vendor_payments_id:payment.sdm_vendor_payments_id,\n    sdm_vendor_invoice_details_id:payment.sdm_vendor_invoice_details_id,\n    consumed_amount:payment.consumed_amount\n  })\n})\n\n\nitems[0].json.updateShipmentsToPayments = updateShipmentsToPayments;\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2020,
        -200
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_vendor_payments_sdm_vendor_invoice_details",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function\"].json[\"updateShipmentsToPayments\"]}}"
      },
      "name": "Update payments to vendors in payments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2240,
        -220
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_shipments?filter={\"_and\": [{\"invoice_number\":{\"_icontains\":\"{{$node[\"Webhook\"].json[\"body\"][\"payload\"][\"parent_invoice\"]}}\"}},{\"vendor_po_num\":{\"id\":{\"_eq\":\"{{$node[\"Get the shipment\"].json[\"data\"][\"vendor_po_num\"][\"id\"]}}\"}}}]}&fields=*,shipment_items.*,shipment_items.sdm_po_items_id.*",
        "options": {}
      },
      "name": "Get all shipments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1080,
        280
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_shipments?filter={\"_and\": [{\"invoice_number\":{\"_eq\":\"{{$node[\"Webhook\"].json[\"body\"][\"payload\"][\"parent_invoice\"]}}\"}},{\"vendor_po_num\":{\"id\":{\"_eq\":\"{{$node[\"Get the current shipment\"].json[\"data\"][\"vendor_po_num\"]}}\"}}}]}",
        "options": {}
      },
      "name": "Get the shipment id",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        400,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_shipments/{{$node[\"Webhook\"].json[\"body\"][\"keys\"][0]}}",
        "options": {}
      },
      "name": "Get the current shipment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        240,
        -20
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2024-04-18T09:22:10.790Z"
}