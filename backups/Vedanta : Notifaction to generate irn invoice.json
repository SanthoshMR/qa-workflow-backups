{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get the order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the order": {
      "main": [
        [
          {
            "node": "Function to split files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to split files": {
      "main": [
        [
          {
            "node": "Get the uploaded files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the uploaded files": {
      "main": [
        [
          {
            "node": "Get the uploaded assets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the uploaded assets": {
      "main": [
        [
          {
            "node": "Function to club the binay files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to club the binay files": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Update order status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-02-01T13:26:44.683Z",
  "id": "259",
  "name": "Vedanta : Notifaction to generate irn invoice",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "send-irn-generate-notification",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        560,
        260
      ],
      "webhookId": "dfb7db66-3ce1-477c-bb88-903e1acd2674"
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://athena.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        780,
        260
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_orders?filter={\"order_id\":{\"_eq\":\"{{$node[\"Webhook\"].json[\"body\"][\"order_id\"]}}\"}}&fields=id,order_id,po_number,shipments.sdm_shipments_id.*,shipments.sdm_shipments_id.vendor_po_num.po_num.id,shipments.sdm_shipments_id.vendor_po_num.po_num.po_file,shipments.sdm_shipments_id.vendor_po_num.id,user_created.*,shipments.sdm_shipments_id.vendor_po_num.operation_agent.*",
        "options": {}
      },
      "name": "Get the order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        980,
        260
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let responseData = [];\nlet order_data = $node[\"Get the order\"].json[\"data\"][0]\nlet files = [];\nfiles.push(order_data.shipments[0].sdm_shipments_id.vendor_invoice);\nif(order_data.shipments[0].sdm_shipments_id.vendor_po_num.po_num){\n    files.push(order_data.shipments[0].sdm_shipments_id.vendor_po_num.po_num.po_file)\n}\n\nif(files){\n    files.forEach(function(upload_file,index){\n        responseData.push({\n            json: {\n                \"id\":upload_file,\n                \"index\":\"data\"+index,\n                \"dms_url\":$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]\n            }\t\t\t\n        });\n    })\n}\n\n\nreturn responseData;"
      },
      "name": "Function to split files",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1220,
        260
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Function to split files\"].json[\"dms_url\"]}}/files/{{$node[\"Function to split files\"].json[\"id\"]}}",
        "options": {}
      },
      "name": "Get the uploaded files",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1460,
        260
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://sdqa.mozart.shakedeal.com/assets/{{$node[\"Get the uploaded files\"].json[\"data\"][\"id\"]}}",
        "allowUnauthorizedCerts": true,
        "responseFormat": "file",
        "dataPropertyName": "=data",
        "options": {}
      },
      "name": "Get the uploaded assets",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1660,
        260
      ],
      "executeOnce": false,
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let binaries = {}, binary_keys = [],uploadDocument = [],extension = [];\nlet vedantaPoNumnber = $node[\"Get the order\"].json[\"data\"][0][\"shipments\"][0][\"sdm_shipments_id\"][\"vendor_po_num\"][\"po_num\"]?$node[\"Get the order\"].json[\"data\"][0][\"shipments\"][0][\"sdm_shipments_id\"][\"vendor_po_num\"][\"po_num\"][\"id\"]:$node[\"Get the order\"].json[\"data\"][0][\"po_number\"];\n\nlet sdInvoiceNumber = $node[\"Webhook\"].json[\"body\"][\"invoice_number\"];\nlet orderId = $node[\"Webhook\"].json[\"body\"][\"order_id\"];\nlet orderValue = $node[\"Webhook\"].json[\"body\"][\"order_value\"];\nlet vendorInvoiceNumber = $node[\"Get the order\"].json[\"data\"][0][\"shipments\"].map(shipment=>shipment[\"sdm_shipments_id\"][\"invoice_number\"]).join(\",\");\nlet borderStyle = \"border: 1px solid black;border-collapse: collapse\"\nlet vendorPoNumbers = $node[\"Get the order\"].json[\"data\"][0][\"shipments\"].map(shipment=>shipment[\"sdm_shipments_id\"][\"vendor_po_num\"][\"id\"]);\nconst uniqueVendorPoArray = vendorPoNumbers.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nlet vendorPoNumber =  uniqueVendorPoArray.join(\",\")\nfor([index, item] of items.entries()) {\n    let extension = item.json.data.filename_disk.split(\".\")[1]\n    item.binary.data.fileName = `${item.json.data.title}.${extension}`;\n    binaries[`data_${index}.${extension}`] = item.binary.data;\n    binary_keys.push(`data_${index}.${extension}`);\n    uploadDocument.push(`input_file${index}:data_${index}.${extension}`);\n}\nlet tableHtml = `<table  style=\"color:#000000;width: auto;border: 1px solid black;border-collapse: collapse;\">`+\n    `<tr style='${borderStyle}'>`+\n    `<td style='${borderStyle}'>Vedanta PO</td>`+\n    `<td style='${borderStyle}'>${vedantaPoNumnber}</td>`+\n    `</tr>`+\n     `<tr style='${borderStyle}'>`+\n    `<td style='${borderStyle}'>Vendor PO</td>`+\n    `<td style='${borderStyle}'>${vendorPoNumber}</td>`+\n    `</tr>`+\n    `<tr style='${borderStyle}'>`+\n    `<td style='${borderStyle}'>SD Invoice Number</td>`+\n    `<td style='${borderStyle}'>${sdInvoiceNumber}</td>`+\n    `</tr>`+\n    `<tr style='${borderStyle}'>`+\n    `<td style='${borderStyle}'>Order ID</td>`+\n    `<td style='${borderStyle}'>${orderId}</td>`+\n    `</tr>`+\n    `<tr style='${borderStyle}'>`+\n    `<td style='${borderStyle}'>Order Value</td>`+\n    `<td style='${borderStyle}'>${orderValue}</td>`+\n    `</tr>`+\n    `<tr style='${borderStyle}'>`+\n    `<td style='${borderStyle}'>Vendor Invoice Number</td>`+\n    `<td style='${borderStyle}'>${vendorInvoiceNumber}</td>`+\n    `</tr>`+\n    `</table>`;\n\nreturn [{\n    json: {\n        binary_keys: binary_keys.join(','),\n        uploadDocument : uploadDocument.join(','),\n        tableHtml : tableHtml\n    },\n    binary: binaries\n}];"
      },
      "name": "Function to club the binay files",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1900,
        260
      ]
    },
    {
      "parameters": {
        "fromEmail": "=handyalasairam9177@gmail.com",
        "toEmail": "=sairam.reddy@shakedeal.com,bijan.krishna@shakedeal.com",
        "ccEmail": "={{$node[\"Get the order\"].json[\"data\"][0][\"shipment\"][\"vendor_po_num\"][\"operation_agent\"][\"email\"]}}",
        "subject": "=Action needed : Generate IRN for invoice #{{$node[\"Webhook\"].json[\"body\"][\"invoice_number\"]}}",
        "html": "=<p>Please generate IRN invoice for the Invoice # {{$node[\"Webhook\"].json[\"body\"][\"invoice_number\"]}} which is punched against Order # {{$node[\"Webhook\"].json[\"body\"][\"order_id\"]}}</p>\n{{$node[\"Function to club the binay files\"].json[\"tableHtml\"]}}\n<br>\n<br>\n<p>Once it is generated please mandatorily upload digitally signed IRN invoice in folder which is shared by Tech team.</p>",
        "attachments": "={{$node[\"Function to club the binay files\"].json[\"binary_keys\"]}}",
        "options": {}
      },
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2120,
        260
      ],
      "credentials": {
        "smtp": {
          "id": "17",
          "name": "smtp(sai)creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]}}/items/sdm_orders/{{$node[\"Get the order\"].json[\"data\"][0][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "order_status",
              "value": "=awaiting_irn"
            }
          ]
        }
      },
      "name": "Update order status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2340,
        260
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-06-03T12:20:42.723Z"
}