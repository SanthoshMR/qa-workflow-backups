{
  "active": false,
  "connections": {
    "Get Cloud Files": {
      "main": [
        [
          {
            "node": "Combine Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get Cloud Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nextcloud": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Items": {
      "main": [
        [
          {
            "node": "Nextcloud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Function to get payment data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get payment data": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Loop": {
      "main": [
        [
          {
            "node": "Function to get the splitted payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment index": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "End Loop",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get the splitted payment": {
      "main": [
        [
          {
            "node": "Check for partially paid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for partially paid": {
      "main": [
        [
          {
            "node": "Create partial paid shakedeal payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-06-13T13:24:13.389Z",
  "id": "325",
  "name": "Vedanta : Update shakedeal payments from cloud",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "path": "Shakedeal-payments-qa/"
      },
      "name": "Get Cloud Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        660,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        440,
        300
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Shakedeal-payments-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1100,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// return items;\nlet poFiles=[];\nlet excelFiles=[];\nitems.forEach((item) => {\n    const fullPath = item.json[\"path\"].split(\"/\");\n    const fileName = fullPath[fullPath.length - 1];\n    if(decodeURI(fileName).includes(\".csv\") || decodeURI(fileName.toLowerCase()).includes(\".xlsx\") ||decodeURI(fileName).includes(\".xls\")){\n        excelFiles.push({\"file_name\":decodeURI(fileName)});\n    }\n});\n\nreturn [{\n     json: {\n         excelData:excelFiles\n    }\n}];"
      },
      "name": "Combine Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let binaries = {};\nconst { read: xlsxRead } = require('xlsx'); \nconst data = items[0].binary.data; \nworkbook = xlsxRead(data.data); \nbinaries[\"data\"] = workbook;\n\nitems[0].json.binaries= binaries\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        300
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=data",
        "options": {
          "sheetName": "={{$node[\"Function\"].json[\"binaries\"][\"data\"][\"SheetNames\"][0]}}"
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        1540,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let paymentsData = [];\nitems.forEach((item, index) => {\n  let paymentDate = getFormattedDate(item.json[\"payment_date\"])\n  paymentsData.push({\n    id : item.json[\"id\"],\n    vedanta_po_number : item.json[\"vedanta_po_number\"],\n    invoice_number : item.json[\"invoice_number\"],\n    net_payable_amount : item.json[\"net_payable_amount\"],\n    payment_date : paymentDate,\n    ref_number : item.json[\"ref_number\"],\n    tax_percentage : item.json[\"tax_percentage\"],\n    tax_deduction : item.json[\"tax_deduction\"],\n    actual_tax_deducted_value : item.json[\"actual_tax_deducted_value\"],\n    payment_utr : item.json[\"payment_utr\"],\n    payment_paid : item.json[\"payment_paid\"],\n    sd_payment_description : item.json[\"sd_payment_description\"],\n    payment_paid_to_shakedeal : item.json[\"payment_paid_to_shakedeal\"],\n    other_deductions : item.json[\"other_deductions\"],\n    ld_charges : item.json[\"ld_charges\"]\n  })\n})\nfunction getFormattedDate(secs){\n  const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day\n\n  const date = new Date((secs-1) * millisecondsPerDay + Date.parse(\"1900-01-01\"));\n\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Months are zero-based, so we add 1\n  const year = date.getFullYear();\n  const formattedDate = `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day-1}`;\n  return formattedDate\n}\nconst size = 10; // size of each subarray\n\nconst result = [];\nfor (let i = 0; i < paymentsData.length; i += size) {\n  result.push(paymentsData.slice(i, i + size));\n}\n\nreturn [{\n    json: {\n        result: result,\n        resultlength : result.length\n    },\n}];\n"
      },
      "name": "Function to get payment data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1800,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2020,
        300
      ]
    },
    {
      "parameters": {},
      "name": "Start Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2240,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let paymentData = $node[\"Function to get payment data\"].json[\"result\"];\nlet currentIndex = $node[\"Start Loop\"].json[\"index\"];\nlet currentPayment = paymentData[currentIndex];\nlet returnItems = [];\n\ncurrentPayment.forEach(function(obj,index){\n    let next_payable_amount = parseFloat(obj[\"net_payable_amount\"])-parseFloat(obj[\"actual_tax_deducted_value\"])-parseFloat(obj[\"other_deductions\"])-parseFloat(obj[\"ld_charges\"]);\n    returnItems.push({\n    json: {\n      id : obj[\"id\"],\n      vedanta_po_number : obj[\"vedanta_po_number\"],\n      invoice_number : obj[\"invoice_number\"],\n      net_payable_amount : obj[\"net_payable_amount\"],\n      payment_date : obj[\"payment_date\"],\n      ref_number : obj[\"ref_number\"],\n      tax_percentage : obj[\"tax_percentage\"],\n      tax_deduction : obj[\"tax_deduction\"],\n      actual_tax_deducted_value : obj[\"actual_tax_deducted_value\"],\n      payment_utr : obj[\"payment_utr\"],\n      payment_paid : obj[\"payment_paid\"],\n      sd_payment_description : obj[\"sd_payment_description\"],\n      payment_paid_to_shakedeal : obj[\"payment_paid_to_shakedeal\"],\n      other_deductions : obj[\"other_deductions\"],\n      ld_charges : obj[\"ld_charges\"],\n      next_payable_amount : next_payable_amount,\n      dms_url : $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]\n    }\n  });\n  \n})\n\nreturn returnItems;\n"
      },
      "name": "Function to get the splitted payment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2460,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index",
              "value": "={{$node[\"Start Loop\"].json[\"index\"]+1}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Increment index",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2940,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Increment index\"].json[\"index\"]}}",
              "operation": "equal",
              "value2": "={{$node[\"Function to get payment data\"].json[\"resultlength\"]}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3100,
        300
      ]
    },
    {
      "parameters": {},
      "name": "End Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3160,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function to get the splitted payment\"].json[\"payment_paid_to_shakedeal\"]== \"partially_paid\"?true:false}}"
            }
          ]
        }
      },
      "name": "Check for partially paid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2640,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Function to get the splitted payment\"].json[\"dms_url\"]}}/items/sdm_payments_to_shakedeal",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "invoice_number",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"invoice_number\"]}}"
            },
            {
              "name": "vedanta_po_number",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"vedanta_po_number\"]}}"
            },
            {
              "name": "net_payable_amount",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"next_payable_amount\"]}}"
            },
            {
              "name": "tax_percentage",
              "value": "0.1"
            },
            {
              "name": "tax_deduction",
              "value": "={{($node[\"Function to get the splitted payment\"].json[\"next_payable_amount\"]*0.1/100)}}"
            }
          ]
        }
      },
      "name": "Create partial paid shakedeal payment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2720,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-06-13T13:58:05.075Z"
}