{
  "active": true,
  "connections": {
    "Get Cloud Files": {
      "main": [
        [
          {
            "node": "Combine Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get Cloud Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nextcloud": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Items": {
      "main": [
        [
          {
            "node": "Nextcloud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Function to get payment data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get payment data": {
      "main": [
        [
          {
            "node": "Move All Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Loop": {
      "main": [
        [
          {
            "node": "Function to get the splitted payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment index": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "End Loop",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get the splitted payment": {
      "main": [
        [
          {
            "node": "Update vendor payments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for partially paid": {
      "main": [
        [
          {
            "node": "Create partial paid shakedeal payment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Increment index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create partial paid shakedeal payment": {
      "main": [
        [
          {
            "node": "Increment index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for consignment type": {
      "main": [
        [
          {
            "node": "Get the payment to vendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the payment to vendor": {
      "main": [
        [
          {
            "node": "Update payment to vendors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp1": {
      "main": [
        [
          {
            "node": "Check for partially paid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update payment to vendors": {
      "main": [
        [
          {
            "node": "Check for partially paid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update vendor payments": {
      "main": [
        [
          {
            "node": "Check for consignment type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move All Files": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-06-13T13:24:13.389Z",
  "id": "325",
  "name": "Vedanta : Update shakedeal payments from cloud",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        260,
        -160
      ]
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "path": "Shakedeal-payments-qa/"
      },
      "name": "Get Cloud Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        660,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        440,
        300
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Shakedeal-payments-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1100,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// return items;\nlet poFiles=[];\nlet excelFiles=[];\nitems.forEach((item) => {\n    const fullPath = item.json[\"path\"].split(\"/\");\n    const fileName = fullPath[fullPath.length - 1];\n    if(decodeURI(fileName).includes(\".csv\") || decodeURI(fileName.toLowerCase()).includes(\".xlsx\") ||decodeURI(fileName).includes(\".xls\")){\n        excelFiles.push({\"file_name\":decodeURI(fileName)});\n    }\n});\n\nreturn [{\n     json: {\n         excelData:excelFiles\n    }\n}];"
      },
      "name": "Combine Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let binaries = {};\nconst { read: xlsxRead } = require('xlsx'); \nconst data = items[0].binary.data; \nworkbook = xlsxRead(data.data); \nbinaries[\"data\"] = workbook;\n\nitems[0].json.binaries= binaries\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        300
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=data",
        "options": {
          "sheetName": "={{$node[\"Function\"].json[\"binaries\"][\"data\"][\"SheetNames\"][0]}}"
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        1540,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let paymentsData = [];\n\nitems.forEach((item, index) => {\n  let paymentDate = getFormattedDate(item.json[\"Payment Received Date (dd-mm-yyyy)\"]);\n  if(item.json[\"Payment UTR\"]){\n    paymentsData.push({\n      id : item.json[\"id\"],\n      vedanta_po_number : item.json[\"Vedanta PO No.\"],\n      invoice_number : item.json[\"SD Invoice No.\"],\n      net_payable_amount : item.json[\"Receivable Amount (Tax Included)\"],\n      payment_date : item.json[\"Payment Received Date (dd-mm-yyyy)\"],\n      ref_number : item.json[\"Reference No. (Optional)\"],\n      tax_percentage : item.json[\"Tax Percentage (Don't Change)\"],\n      tax_deduction : item.json[\"Tax Deduction (Don't Change)\"],\n      actual_tax_deducted_value : item.json[\"Actual Tax Deducted Value(If required change)\"],\n      payment_utr : item.json[\"Payment UTR\"],\n      payment_paid : item.json[\"Payment Received (In bank acc.)\"]?item.json[\"Payment Received (In bank acc.)\"]:0,\n      sd_payment_description : item.json[\"Payment Description\"],\n      payment_paid_to_shakedeal : item.json[\"Payment Received Status (fully_received/partially_received)\"],\n      other_deductions : item.json[\"Other Deductions\"],\n      ld_charges : item.json[\"LD Charges\"],\n      vendor_payment_ref:item.json[\"Vendor Payment Ref (Don't Change)\"],\n      consignment_type:item.json[\"Consignment Type\"]\n    })\n  }\n  \n})\nfunction getFormattedDate(secs){\n  const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day\n\n  const date = new Date((secs-1) * millisecondsPerDay + Date.parse(\"1900-01-01\"));\n\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Months are zero-based, so we add 1\n  const year = date.getFullYear();\n  const formattedDate = `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day-1}`;\n  return formattedDate\n}\nconst size = 10; // size of each subarray\n\nconst result = [];\nfor (let i = 0; i < paymentsData.length; i += size) {\n  result.push(paymentsData.slice(i, i + size));\n}\n\nreturn [{\n    json: {\n        result: result,\n        resultlength : result.length\n    },\n}];\n"
      },
      "name": "Function to get payment data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1800,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2020,
        300
      ]
    },
    {
      "parameters": {},
      "name": "Start Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2240,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let paymentData = $node[\"Function to get payment data\"].json[\"result\"];\nlet currentIndex = $node[\"Start Loop\"].json[\"index\"];\nlet currentPayment = paymentData[currentIndex];\nlet returnItems = [];\nlet partialDiffCheckAmount = 5;\ncurrentPayment.forEach(function(obj,index){\n    let next_payable_amount = parseFloat(obj[\"net_payable_amount\"])-(parseFloat(obj[\"payment_paid\"])+parseFloat(obj[\"actual_tax_deducted_value\"])+parseFloat(obj[\"other_deductions\"])+parseFloat(obj[\"ld_charges\"]));\n    let [day, month, year] = obj[\"payment_date\"].split(\"-\");\n    let paymentPaidToShakedeal = next_payable_amount>partialDiffCheckAmount?\"partially_received\":\"fully_received\"\n    returnItems.push({\n    json: {\n      id : obj[\"id\"],\n      vedanta_po_number : obj[\"vedanta_po_number\"],\n      invoice_number : obj[\"invoice_number\"],\n      net_payable_amount : obj[\"net_payable_amount\"],\n      payment_date : new Date(year, month - 1, day).toISOString(),\n      ref_number : obj[\"ref_number\"],\n      tax_percentage : obj[\"tax_percentage\"],\n      tax_deduction : obj[\"tax_deduction\"],\n      actual_tax_deducted_value : obj[\"actual_tax_deducted_value\"],\n      payment_utr : obj[\"payment_utr\"],\n      payment_paid : obj[\"payment_paid\"],\n      sd_payment_description : obj[\"sd_payment_description\"],\n      payment_paid_to_shakedeal : paymentPaidToShakedeal,\n      other_deductions : obj[\"other_deductions\"],\n      ld_charges : obj[\"ld_charges\"],\n      next_payable_amount : next_payable_amount,\n      vendor_payment_ref:obj[\"vendor_payment_ref\"],\n      consignment_type:obj[\"consignment_type\"],\n      dms_url : $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]\n    }\n  });\n  \n})\n\nreturn returnItems;\n"
      },
      "name": "Function to get the splitted payment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2380,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index",
              "value": "={{$node[\"Start Loop\"].json[\"index\"]+1}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Increment index",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        3440,
        280
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Increment index\"].json[\"index\"]}}",
              "operation": "equal",
              "value2": "={{$node[\"Function to get payment data\"].json[\"resultlength\"]}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3600,
        280
      ]
    },
    {
      "parameters": {},
      "name": "End Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3820,
        -40
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function to get the splitted payment\"].json[\"payment_paid_to_shakedeal\"]== \"partially_received\"?true:false}}"
            }
          ]
        }
      },
      "name": "Check for partially paid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3120,
        260
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Function to get the splitted payment\"].json[\"dms_url\"]}}/items/sdm_payments_to_shakedeal",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "invoice_number",
              "value": "={{$node[\"Check for partially paid\"].json[\"data\"][\"invoice_number\"]}}"
            },
            {
              "name": "vedanta_po_number",
              "value": "={{$node[\"Check for partially paid\"].json[\"data\"][\"vedanta_po_number\"]}}"
            },
            {
              "name": "net_payable_amount",
              "value": "={{parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"net_payable_amount\"])-(parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"payment_paid\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"actual_tax_deducted_value\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"other_deductions\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"ld_charges\"]))}}"
            },
            {
              "name": "tax_percentage",
              "value": "0.1"
            },
            {
              "name": "tax_deduction",
              "value": "={{(parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"net_payable_amount\"])-(parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"payment_paid\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"actual_tax_deducted_value\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"other_deductions\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"ld_charges\"])))*0.1/100}}"
            },
            {
              "name": "actual_tax_deducted_value",
              "value": "={{(parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"net_payable_amount\"])-(parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"payment_paid\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"actual_tax_deducted_value\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"other_deductions\"])+parseFloat($node[\"Check for partially paid\"].json[\"data\"][\"ld_charges\"])))*0.1/100}}"
            },
            {
              "name": "payment_advice",
              "value": "={{$node[\"Check for partially paid\"].json[\"data\"][\"payment_advice\"]}}"
            }
          ]
        }
      },
      "name": "Create partial paid shakedeal payment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3260,
        -60
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3280,
        340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function to get the splitted payment\"].json[\"consignment_type\"]== \"non_consignment\"?true:false}}"
            }
          ]
        }
      },
      "name": "Check for consignment type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2620,
        280
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to get the splitted payment\"].json[\"dms_url\"]}}/items/sdm_vendor_invoice_details/{{$node[\"Check for consignment type\"].json[\"data\"][\"payment_advice\"][\"vendor_payment_ref\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "ld_charges",
              "value": "={{parseFloat($node[\"Get the payment to vendor\"].json[\"data\"][\"ld_charges\"])+parseFloat($node[\"Check for consignment type\"].json[\"data\"][\"ld_charges\"])}}"
            },
            {
              "name": "tax_deducted",
              "value": "={{parseFloat($node[\"Get the payment to vendor\"].json[\"data\"][\"tax_deducted\"])+parseFloat($node[\"Check for consignment type\"].json[\"data\"][\"actual_tax_deducted_value\"])}}"
            },
            {
              "name": "other_deductions",
              "value": "={{parseFloat($node[\"Get the payment to vendor\"].json[\"data\"][\"other_deductions\"])+parseFloat($node[\"Check for consignment type\"].json[\"data\"][\"other_deductions\"])}}"
            },
            {
              "name": "payment_received",
              "value": "={{parseFloat($node[\"Get the payment to vendor\"].json[\"data\"][\"payment_received\"])+parseFloat($node[\"Check for consignment type\"].json[\"data\"][\"payment_paid\"])}}"
            }
          ]
        }
      },
      "name": "Update payment to vendors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2920,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Function to get the splitted payment\"].json[\"dms_url\"]}}/items/sdm_vendor_invoice_details/{{$node[\"Check for consignment type\"].json[\"data\"][\"payment_advice\"][\"vendor_payment_ref\"]}}",
        "options": {}
      },
      "name": "Get the payment to vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2740,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2900,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to get the splitted payment\"].json[\"dms_url\"]}}/items/sdm_payments_to_shakedeal/{{$node[\"Function to get the splitted payment\"].json[\"id\"]}}?fields=*,payment_advice.*",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "payment_date",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"payment_date\"]}}"
            },
            {
              "name": "ref_number",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"ref_number\"]}}"
            },
            {
              "name": "actual_tax_deducted_value",
              "value": "={{parseFloat($node[\"Function to get the splitted payment\"].json[\"actual_tax_deducted_value\"])}}"
            },
            {
              "name": "payment_utr",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"payment_utr\"]}}"
            },
            {
              "name": "payment_paid",
              "value": "={{parseFloat($node[\"Function to get the splitted payment\"].json[\"payment_paid\"])}}"
            },
            {
              "name": "sd_payment_description",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"sd_payment_description\"]}}"
            },
            {
              "name": "payment_status",
              "value": "={{true}}"
            },
            {
              "name": "other_deductions",
              "value": "={{parseFloat($node[\"Function to get the splitted payment\"].json[\"other_deductions\"])}}"
            },
            {
              "name": "payment_paid_to_shakedeal",
              "value": "={{$node[\"Function to get the splitted payment\"].json[\"payment_paid_to_shakedeal\"]}}"
            },
            {
              "name": "ld_charges",
              "value": "={{parseFloat($node[\"Function to get the splitted payment\"].json[\"ld_charges\"])}}"
            }
          ]
        }
      },
      "name": "Update vendor payments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2560,
        20
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-shakedeal-payments",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        220,
        300
      ],
      "webhookId": "712c3fd1-cc1a-4441-9253-cc9c5a698c89"
    },
    {
      "parameters": {
        "operation": "move",
        "path": "=Shakedeal-payments-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}",
        "toPath": "=Shakedeal-payments-old-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Move All Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1980,
        40
      ],
      "executeOnce": true,
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-07-04T11:46:06.865Z"
}