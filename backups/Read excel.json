{
  "active": true,
  "connections": {
    "Move Binary Data": {
      "main": [
        [
          {
            "node": "post the file to dms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post the file to dms": {
      "main": [
        [
          {
            "node": "Merging the globals and file Id",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merging the globals and file Id": {
      "main": [
        [
          {
            "node": "Check for PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Buyer Details": {
      "main": [
        [
          {
            "node": "Get shakedeal POC",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check from_adress & to_adress": {
      "main": [
        [
          {
            "node": "Move Binary Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Do Nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the index of attachment": {
      "main": [
        [
          {
            "node": "Check from_adress & to_adress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get shakedeal POC": {
      "main": [
        [
          {
            "node": "Creating user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get the index of attachment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for PO": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Buyer Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post product details": {
      "main": [
        [
          {
            "node": "Checking the order_type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post vendor details": {
      "main": [
        [
          {
            "node": "constructing po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get vendor Details": {
      "main": [
        [
          {
            "node": "Creating new vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post buyer details": {
      "main": [
        [
          {
            "node": "construct for user_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get product details": {
      "main": [
        [
          {
            "node": "Create new product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post the po_details": {
      "main": [
        [
          {
            "node": "Constructing Vendor PO Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "constructing po_details": {
      "main": [
        [
          {
            "node": "post the po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "construct for user_details": {
      "main": [
        [
          {
            "node": "Post to the user_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to the user_details": {
      "main": [
        [
          {
            "node": "Checking condition  whether user exists ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get user_id": {
      "main": [
        [
          {
            "node": "get product details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conditon for  checking whether user exists or create new user": {
      "main": [
        [
          {
            "node": "post buyer details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Checking condition  whether user exists ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post the products ": {
      "main": [
        [
          {
            "node": "post product details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Checking the order_type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post the vendors ": {
      "main": [
        [
          {
            "node": "post vendor details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "constructing po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition  whether user exists ": {
      "main": [
        [
          {
            "node": "Get user_id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get product details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Creating user": {
      "main": [
        [
          {
            "node": "Conditon for  checking whether user exists or create new user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new product": {
      "main": [
        [
          {
            "node": "Checking condition whether to post the products ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Creating new vendor": {
      "main": [
        [
          {
            "node": "Checking condition whether to post the vendors ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking the order_type": {
      "main": [
        [
          {
            "node": "Get vendor Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get product_ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get product_ids": {
      "main": [
        [
          {
            "node": "Get the product_vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the product_vendor": {
      "main": [
        [
          {
            "node": "Create new product_vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new product_vendor": {
      "main": [
        [
          {
            "node": "Checking condition whether to post product_vendor ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking condition whether to post product_vendor ": {
      "main": [
        [
          {
            "node": "Post the product_vendor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "constructing for PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post the product_vendor": {
      "main": [
        [
          {
            "node": "constructing for PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "constructing for PO": {
      "main": [
        [
          {
            "node": "Post the PO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post the PO": {
      "main": [
        [
          {
            "node": "SA is informed that PO is generated1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extracting balco PO details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting balco PO details": {
      "main": [
        [
          {
            "node": "Extracting PO details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting PO details": {
      "main": [
        [
          {
            "node": "Merging the globals and file Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Constructing Vendor PO Details": {
      "main": [
        [
          {
            "node": "post the vendor po_details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post the vendor po_details": {
      "main": [
        [
          {
            "node": "Function to create obj for updating the vendor po in po items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracting Vedanta PO details": {
      "main": [
        [
          {
            "node": "Extracting PO details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for PO Email": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create obj for updating the vendor po in po items": {
      "main": [
        [
          {
            "node": "Update the vendor po in po items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the vendor po in po items": {
      "main": [
        [
          {
            "node": "SA is informed that PO is generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Extracting Vedanta PO details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-09-27T09:25:11.210Z",
  "id": "189",
  "name": "Read excel",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "setAllData": false,
        "sourceKey": "=attachment_{{$node[\"Get the index of attachment\"].json[\"attachmentIndex\"]}}",
        "options": {
          "keepSource": true,
          "keepAsBase64": true
        }
      },
      "name": "Move Binary Data",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        1340,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/files",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "sendBinaryData": true,
        "binaryPropertyName": "=input_file:attachment_{{$node[\"Move Binary Data\"].json[\"attachmentIndex\"]}}"
      },
      "name": "post the file to dms",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1520,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "name": "Merging the globals and file Id",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1800,
        320
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/users?filter={ \"email\": { \"_eq\": \"{{$node[\"Extracting PO details\"].json[\"buyer_email\"]}}\" }}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get Buyer Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        460,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Get the index of attachment\"].json[\"fromEmails\"]}}",
              "operation": "contains",
              "value2": "={{$node[\"Get the index of attachment\"].json[\"from\"][\"value\"][0][\"address\"]}}"
            },
            {
              "value1": "={{$node[\"Get the index of attachment\"].json[\"to\"][\"value\"][0][\"address\"]}}",
              "value2": "={{$node[\"Get the index of attachment\"].json[\"to\"][\"value\"][0][\"address\"]}}"
            }
          ],
          "number": [
            {
              "value1": "={{$node[\"Get the index of attachment\"].json[\"attachmentIndex\"]}}",
              "operation": "notEqual",
              "value2": "=-1"
            }
          ]
        }
      },
      "name": "Check from_adress & to_adress",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1040,
        360
      ]
    },
    {
      "parameters": {
        "functionCode": "items[0].json.attachmentIndex = items[0].binary ? Object.values(items[0].binary).findIndex(key => key.mimeType === \"application/pdf\") : -1;\nif(items[0].json.attachmentIndex !== -1){\n  items[0].json.data = items[0].binary[items[0].json.attachmentIndex];\n}\n\nlet fromEmails = [\"sairam.reddy@shakedeal.com\",\"ordersender-prod@ansmtp.ariba.com\",\"chidanand@shakedeal.com\",\"surya.kc@shakedeal.com\",\"mozartautomationtest@gmail.com\",\"handyalasairam9177@gmail.com\"];\nlet toEmails = [\"shakedeal.mozart+balco@shakedeal.com\",\"shakedeal.mozart+vedanta@shakedeal.com\",\"sairam.shakedeal+vedantaqa@gmail.com\",\"sairam.shakedeal+balcoqa@gmail.com\"]\n\nitems[0].json.fromEmails = fromEmails;\n\nreturn items\n"
      },
      "name": "Get the index of attachment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        860,
        360
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/users?filter={\"email\":{\"_eq\":\"{{$node[\"Globals\"].json[\"po_poc_email\"]}}\"}}",
        "options": {}
      },
      "name": "Get shakedeal POC",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        660,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "Do Nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1340,
        560
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "dms_url",
              "value": "={{$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"shakedeal.mozart+balco@shakedeal.com\"?\"https://balco.mozart.shakedeal.com\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedanta@gmail.com\"?\"https://vedanta.mozart.shakedeal.com\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedantaqa@gmail.com\"?\"https://sdqa.mozart.shakedeal.com\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+mozartqa@gmail.com\"?\"https://sdqa.mozart.shakedeal.com\":\"https://sdqa.mozart.shakedeal.com\"}}"
            },
            {
              "name": "sales_agent_email",
              "value": "=sairam.reddy@shakedeal.com"
            },
            {
              "name": "workflow_from_email",
              "value": "=handyalasairam9177@gmail.com"
            },
            {
              "name": "po_issuer_role",
              "value": "={{$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"shakedeal.mozart+balco@shakedeal.com\"?\"445e4cf8-1023-4538-a60e-706c2a72fb94\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedanta@gmail.com\"?\"5ccdb06f-07c4-4ab5-b55a-a820d4f9f51f\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedantaqa@gmail.com\"?\"445e4cf8-1023-4538-a60e-706c2a72fb94\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+mozartqa@gmail.com\"?\"2563cee6-50d5-4917-aab4-1110ae4ea6b8\":\"445e4cf8-1023-4538-a60e-706c2a72fb94\"}}"
            },
            {
              "name": "po_poc_email",
              "value": "=madhu.mr@shakedeal.com"
            },
            {
              "name": "token",
              "value": "={{$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"shakedeal.mozart+balco@shakedeal.com\"?\"d1b1178f-637a-4927-8c41-29f4a8219a95\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedanta@gmail.com\"?\"FcsMdcm7d6Whb-y8ATeBmN40tyzzBpyv\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedantaqa@gmail.com\"?\"FcsMdcm7d6Whb-y8ATeBmN40tyzzBpyv\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+mozartqa@gmail.com\"?\"oes-token-to-check-spec\":\"oes-token-to-check-spec\"}}"
            },
            {
              "name": "client",
              "value": "={{$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"shakedeal.mozart+balco@shakedeal.com\"?\"balco\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedanta@gmail.com\"?\"vedanta\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+vedantaqa@gmail.com\"?\"vedanta\":$node[\"Wait for PO Email\"].json[\"to\"][\"value\"][0][\"address\"]==\"sairam.shakedeal+mozartqa@gmail.com\"?\"https://sdqa.mozart.shakedeal.com\":\"balco\"}}"
            },
            {
              "name": "vendor_po_num_prefix",
              "value": "=SDPO"
            }
          ],
          "number": [
            {
              "name": "commision_percentage",
              "value": "={{2}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        660,
        360
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_pos?filter={\"id\":{\"_eq\":\"{{$node[\"Extracting PO details\"].json[\"po_num\"]}}\"}}",
        "options": {}
      },
      "name": "Check for PO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2000,
        320
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for PO\"].json[\"data\"].length}}",
              "operation": "notEqual"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2240,
        320
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{$node[\"Globals\"].json[\"workflow_from_email\"]}}",
        "toEmail": "={{$node[\"Globals\"].json[\"sales_agent_email\"]}}",
        "subject": "=Balco :This PO already exits with PO number: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}",
        "html": "=<!DoCtYPe html><html lang=\"en\"><head><style id=\"stndz-\nstyle\"></style>\n<meta http-equiv=\"Content-Type\" content=\"text\n/html; charset=UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,\ninitial-scale=1, shrink-to-fit=no\">\n<meta name=\"description\" content=\"\">\n<meta name=\"author\" content=\"Mark Otto, Jacob\nThornton, and Bootstrap contributors\">\n<meta name=\"generator\" content=\"\nAcelleSystemLayouts\">\n<!-- Bootstrap core CSS -->\n<link href=\"https://marketing.shakedeal.com/assets\n/templates/60584da7bdf65/css/bootstrap.min.css\" rel=\"\nstylesheet\">\n<script id=\"spHTMLFormElementPrototypeScript\">\n(function()\n{\ntry\n{\nvar sp_old_HTMLFormElementPrototype_submit =\nHTMLFormElement.prototype.submit;\nHTMLFormElement.prototype.submit = function\n(AEvent)\n{\ntry\n{\nvar spEvent = document.createEvent('Event');\nspEvent.initEvent('sp_submit', true, true);\nthis.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from HTMLFormElement.\nprototype.submit: ' + ErrorMessage);\n}\nsp_old_HTMLFormElementPrototype_submit.apply\n(this);\n};\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to HTMLFormElement.prototype.submit: ' +\nErrorMessage);\n}\ntry\n{\nif (typeof __doPostBack == 'function')\n{\nvar sp_old__doPostBack = __doPostBack;\n__doPostBack = function(eventTarget,\neventArgument)\n{\ntry\n{\nvar spEvent = document.createEvent\n('Event');\nspEvent.initEvent('sp_submit', true, true);\nwindow.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from __doPostBack(): '\n+ ErrorMessage);\n}\nsp_old__doPostBack(eventTarget,\neventArgument);\n};\n}\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to __doPostBack(): ' + ErrorMessage);\n}\n})();</script><link href=\"https://fonts.googleapis.\ncom/icon?family=Material+Icons\" rel=\"stylesheet\"><link\nhref=\"https://fonts.googleapis.com/icon?\nfamily=Material+Icons+Outlined\" rel=\"stylesheet\"></head>\n\n<body data-new-gr-c-s-check-loaded=\"14.990.0\" data-\ngr-ext-installed=\"\">\n<main role=\"main\">\n<div class=\"py-5 bg-light\">\n<div class=\"container\">\n<h1 class=\"my-4 display-4 text-center\">This PO already exits with PO number:{{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}</h1>\n<div><img class=\"my-2\" src=\"\" width=\"100%\" /></div>\n</div>\n</div>\n</main><footer class=\"text-muted py-5\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p class=\"mb-1\">Copyright &copy; OpCommerce Online PVT\nLTD, All rights reserved.</p>\n<p class=\"mb-0\">Please email us on <a href=\"\nsupport@shakedeal.com\">support@shakedeal.com</a> in\ncase of any queries.\n</div>\n<div class=\"col-md-4\">\n<p class=\"float-right\"><a href=\"#\">Back to top</a></p>\n</div>\n</div>\n</div>\n</footer>\n</body></html>",
        "options": {}
      },
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2520,
        160
      ],
      "credentials": {
        "smtp": {
          "id": "17",
          "name": "smtp(sai)creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_products",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Create new product\"].json[\"postProducts\"]}}"
      },
      "name": "post product details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        820,
        1500
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_vendors",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Creating new vendor\"].json[\"postVendors\"]}}"
      },
      "name": "post vendor details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1760,
        1440
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_vendors?filter={ \"id\": { \"_in\": \"{{$node[\"Extracting PO details\"].json[\"vendor_email\"]}}\" }}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get vendor Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1180,
        1560
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/users",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Creating user\"].json[\"user\"]}}"
      },
      "name": "post buyer details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1280,
        920
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_products?filter={ \"id\": { \"_in\": \"{{$node[\"Extracting PO details\"].json[\"product_code\"]}}\" }}",
        "options": {}
      },
      "name": "get product details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2520,
        1140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_pos",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json[\"po_details\"]}}"
      },
      "name": "post the po_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2300,
        1580
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let data = items[0].json.data;\nlet po_file = $node[\"Merging the globals and file Id\"].json[\"data\"][\"id\"];\nlet po_num = $node[\"Extracting PO details\"].json[\"po_num\"];\nlet po_value= $node[\"Extracting PO details\"].json[\"po_value\"];\nlet po_status =$node[\"Extracting PO details\"].json[\"po_status\"];\nlet po_date =$node[\"Extracting PO details\"].json[\"po_date\"];\nlet po_type = $node[\"Extracting PO details\"].json[\"po_type\"];\nlet issuer_id= $node[\"Creating user\"].json[\"action\"]===\"user exists\"?Array.isArray($node[\"Get user_id\"].json.data)?$node[\"Get user_id\"].json.data[0][\"id\"]:$node[\"Get user_id\"].json.data[\"id\"]:Array.isArray($node[\"Post to the user_details\"].json.data)?$node[\"Post to the user_details\"].json.data[0][\"id\"]:$node[\"Post to the user_details\"].json.data[\"id\"];\nlet po_deliver_date = $node[\"Extracting PO details\"].json[\"max_date\"];\nlet client = $node[\"Globals\"].json[\"client\"];\nlet products = $node[\"Create new product\"].json.action == \"post the products\"?[...$node[\"post product details\"].json.data,...$node[\"get product details\"].json.data]:$node[\"get product details\"].json.data;\nlet vendors = $node[\"Creating new vendor\"].json.action == \"post the vendors\"?[...$node[\"post vendor details\"].json.data,...$node[\"Get vendor Details\"].json.data]:$node[\"Get vendor Details\"].json.data;\nlet prod_ven = $node[\"Extracting PO details\"].json[\"prodven\"]\n\nlet po_products = $node[\"Extracting PO details\"].json[\"products\"];\n\nlet shakedeal_poc_id = $node[\"Get shakedeal POC\"].json.data[0].id;\n\n\n\n\nlet product_vendor = [];\n\n\nprod_ven.forEach(function(obj,index){\n   product_vendor[index] ={};\n   product_vendor[index].id=po_num+\"-\"+(index+1);\n   product_vendor[index].product = obj.productCode;\n   product_vendor[index].vendor = obj.email;\n   product_vendor[index].requested_qty =  obj[\"quantity\"];\n   product_vendor[index].delivery_date = new Date(obj[\"product_deliverDate\"]).toISOString();\n   product_vendor[index].gross_price = obj[\"product_price\"];\n   product_vendor[index].net_price = obj[\"rate\"]*obj[\"quantity\"];\n   product_vendor[index].uom = obj[\"uom\"];\n   product_vendor[index].plant = obj[\"plant\"];\n   product_vendor[index].unit_price = parseFloat(obj[\"rate\"]);\n   product_vendor[index].tax_percentage = parseFloat(obj[\"tax\"]);\n   product_vendor[index].hsn = obj[\"hsn\"];\n})\n\n\n\nlet net_po_value = product_vendor.reduce((total,obj)=>(parseFloat(obj.rate)+ parseFloat(obj.requested_qty))+total, 0);\n\nlet po_details=[];\npo_details[0]={};\npo_details[0].po_file=po_file;\npo_details[0].id=po_num;\npo_details[0].po_value=po_value;\npo_details[0].po_status=po_status;\n//po_details[0].po_date=new Date(po_date).toISOString();\npo_details[0].po_type = client == \"vedanta\"?po_type:\"routing\";\npo_details[0].issuer_name=issuer_id;\npo_details[0].shakedeal_poc_details = shakedeal_poc_id; \n//po_details[0].product_ids=product_ids;\npo_details[0].po_deliver_date =new Date(po_deliver_date).toISOString(); \npo_details[0].po_items= product_vendor; \npo_details[0].net_po_value = net_po_value\n\n\nitems[0].json.po_products = po_products; \nitems[0].json.po_details = po_details;\nreturn items\n"
      },
      "name": "constructing po_details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2000,
        1560
      ]
    },
    {
      "parameters": {
        "functionCode": "let id =  Array.isArray($node[\"post buyer details\"].json.data)?$node[\"post buyer details\"].json.data[0][\"id\"]:$node[\"post buyer details\"].json.data[\"id\"]\nlet user_phone = $node[\"Extracting PO details\"].json[\"buyer_contact\"];\nlet user_details = []\nuser_details[0] = {};\nuser_details[0].user = id \nuser_details[0].phone_number = user_phone \nitems[0].json.user_details = user_details\nreturn items;"
      },
      "name": "construct for user_details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1480,
        920
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_user_details",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json[\"user_details\"]}}"
      },
      "name": "Post to the user_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1680,
        920
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_user_details?filter={\"user\":{\"_eq\":\"{{$node[\"Get Buyer Details\"].json.data[0][\"id\"]}}\"}}",
        "options": {}
      },
      "name": "Get user_id",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2180,
        920
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "create user"
            }
          ]
        }
      },
      "name": "Conditon for  checking whether user exists or create new user",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1060,
        1140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "post the products"
            }
          ]
        }
      },
      "name": "Checking condition whether to post the products ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        1660
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"action\"]}}",
              "value2": "post the vendors"
            }
          ]
        }
      },
      "name": "Checking condition whether to post the vendors ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1560,
        1560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Creating user\"].json[\"action\"]}}",
              "value2": "user exists"
            }
          ]
        }
      },
      "name": "Checking condition  whether user exists ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1900,
        1140
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet action=\"\"\nlet email = $node[\"Extracting PO details\"].json[\"buyer_email\"]\n\nlet shakedeal_poc_id = $node[\"Get shakedeal POC\"].json.data[0].id\nlet po_role = $node[\"Globals\"].json[\"po_issuer_role\"]\n\nitems[0].json.buyerEmail=email\n\nlet data = $node[\"Get Buyer Details\"].json.data\n\n\nitems[0].json.length = data.length\nif(data.length>0){\n   action=\"user exists\"\n}else action = \"create user\"\n\nlet user_name = $node[\"Extracting PO details\"].json[\"buyer_name\"]\nlet user_email = $node[\"Extracting PO details\"].json[\"buyer_email\"]\nlet user_phone = $node[\"Extracting PO details\"].json[\"buyer_contact\"]\nlet password= user_name+\"@2021\"\n\nlet user_details = []\nuser_details[0]={}\nlet user = [];\nuser[0]={};\nuser[0].first_name = user_name;\nuser[0].email = user_email;\nuser_details[0].phone = user_phone \nuser[0].password = password\nuser[0].role = po_role \nuser_details[0].user = user \n\nitems[0].json.user = user\nitems[0].json.user_details = user_details \n\nitems[0].json.action =action\nreturn items;"
      },
      "name": "Creating user",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        860,
        1140
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet action = \"\"\nlet product_name = $node[\"Extracting PO details\"].json[\"product_name\"]\nlet product_code = $node[\"Extracting PO details\"].json[\"product_code\"]\nlet products = $node[\"Extracting PO details\"].json[\"products\"]\n\nlet data = items[0].json.data\n\n\n\n\n\nlet resultFilter = \n   products.filter(product=>\n     !data.some(\n      data=> data.id === product.id \n    )\n  );\n\nlet uniqueResultArray = [\n    ...new Map(resultFilter.map((item) => [item[\"id\"], item])).values(),\n];\n\nitems[0].json.length= uniqueResultArray .length\nif(uniqueResultArray .length>0){\n   action=\"post the products\"\n\n}else action = \"no products to post\"\n\nitems[0].json.postProducts=uniqueResultArray \nitems[0].json.products=products\n\n\n\nitems[0].json.action = action\n\n\n\nreturn items;"
      },
      "name": "Create new product",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        460,
        1640
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet email = $node[\"Extracting PO details\"].json[\"vendor_email\"]\n\nlet vendors = $node[\"Extracting PO details\"].json[\"vendors\"]\n\nitems[0].json.vendorEmail=email\n\nlet data = items[0].json.data\n\nlet resultFilter = \n   vendors.filter(vendors=>\n     !data.some(\n      data=> data.id=== vendors.id\n    )\n  );\n\n\nlet uniqueResultFilterArray = [\n    ...new Map(resultFilter.map((item) => [item[\"id\"], item])).values(),\n];\nitems[0].json.length= uniqueResultFilterArray .length\nif(uniqueResultFilterArray .length>0){\n   action=\"post the vendors\"\n\n}else action = \"no vendors to post\"\n\nitems[0].json.postVendors=uniqueResultFilterArray \nitems[0].json.vendors =vendors \n\n\n\nitems[0].json.action = action\n\n\n\nreturn items;\n"
      },
      "name": "Creating new vendor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1360,
        1560
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{$node[\"Globals\"].json[\"workflow_from_email\"]}}",
        "toEmail": "={{$node[\"Globals\"].json[\"sales_agent_email\"]}}",
        "subject": "=Balco: A new PO is received with PO number: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}",
        "html": "=<!DoCtYPe html><html lang=\"en\"><head><style id=\"stndz-\nstyle\"></style>\n<meta http-equiv=\"Content-Type\" content=\"text\n/html; charset=UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,\ninitial-scale=1, shrink-to-fit=no\">\n<meta name=\"description\" content=\"\">\n<meta name=\"author\" content=\"Mark Otto, Jacob\nThornton, and Bootstrap contributors\">\n<meta name=\"generator\" content=\"\nAcelleSystemLayouts\">\n<!-- Bootstrap core CSS -->\n<link href=\"https://marketing.shakedeal.com/assets\n/templates/60584da7bdf65/css/bootstrap.min.css\" rel=\"\nstylesheet\">\n<script id=\"spHTMLFormElementPrototypeScript\">\n(function()\n{\ntry\n{\nvar sp_old_HTMLFormElementPrototype_submit =\nHTMLFormElement.prototype.submit;\nHTMLFormElement.prototype.submit = function\n(AEvent)\n{\ntry\n{\nvar spEvent = document.createEvent('Event');\nspEvent.initEvent('sp_submit', true, true);\nthis.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from HTMLFormElement.\nprototype.submit: ' + ErrorMessage);\n}\nsp_old_HTMLFormElementPrototype_submit.apply\n(this);\n};\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to HTMLFormElement.prototype.submit: ' +\nErrorMessage);\n}\ntry\n{\nif (typeof __doPostBack == 'function')\n{\nvar sp_old__doPostBack = __doPostBack;\n__doPostBack = function(eventTarget,\neventArgument)\n{\ntry\n{\nvar spEvent = document.createEvent\n('Event');\nspEvent.initEvent('sp_submit', true, true);\nwindow.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from __doPostBack(): '\n+ ErrorMessage);\n}\nsp_old__doPostBack(eventTarget,\neventArgument);\n};\n}\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to __doPostBack(): ' + ErrorMessage);\n}\n})();</script><link href=\"https://fonts.googleapis.\ncom/icon?family=Material+Icons\" rel=\"stylesheet\"><link\nhref=\"https://fonts.googleapis.com/icon?\nfamily=Material+Icons+Outlined\" rel=\"stylesheet\"></head>\n\n<body data-new-gr-c-s-check-loaded=\"14.990.0\" data-\ngr-ext-installed=\"\">\n<main role=\"main\">\n<div class=\"py-5 bg-light\">\n<div class=\"container\">\n<h1 class=\"my-4 display-4 text-center\">A new PO is received with PO number:{{$node[\"Extracting balco PO details\"].json[\"po_number\"]}} and po_type : Routing</h1>\n<p class=\"lead text-center\">Please create a SDStore order against this PO: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}.</p>\n<div><img class=\"my-2\" src=\"\" width=\"100%\" /></div>\n</div>\n</div>\n</main><footer class=\"text-muted py-5\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p class=\"mb-1\">Copyright &copy; OpCommerce Online PVT\nLTD, All rights reserved.</p>\n<p class=\"mb-0\">Please email us on <a href=\"\nsupport@shakedeal.com\">support@shakedeal.com</a> in\ncase of any queries.\n</div>\n<div class=\"col-md-4\">\n<p class=\"float-right\"><a href=\"#\">Back to top</a></p>\n</div>\n</div>\n</div>\n</footer>\n</body></html>",
        "options": {}
      },
      "name": "SA is informed that PO is generated",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        3580,
        1600
      ],
      "executeOnce": true,
      "credentials": {
        "smtp": {
          "id": "17",
          "name": "smtp(sai)creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Extracting PO details\"].json[\"order_type\"]}}",
              "value2": "routing"
            }
          ]
        }
      },
      "name": "Checking the order_type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        960,
        1640
      ]
    },
    {
      "parameters": {
        "functionCode": "let productAction = $node[\"Create new product\"].json[\"action\"];\nlet existingProductData = $node[\"get product details\"].json.data;\n\n\nif(productAction === \"post the products\"){\n   let postedProductData = $node[\"post product details\"].json.data;\n   items[0].json.postedProductData = postedProductData; \n\n}\n\nif(productAction === \"post the products\"){\n   if(existingProductData.length>0){\n      let concatedProducts = existingProductData.concat(items[0].json.postedProductData);\n      items[0].json.concatedProducts = concatedProducts;\n   }else items[0].json.concatedProducts = items[0].json.postedProductData;\n}else items[0].json.concatedProducts = existingProductData; \n\n\nlet products = items[0].json.concatedProducts;\n\nlet product_ids = [];\nlet vendor_ids = [];\nlet product_code=[];\n\nif(products.length>0){\n     items[0].json.concatedProducts.forEach(function(obj,index){\n         if(!product_code.includes(obj[\"product_code\"])){\n            product_code.push(obj[\"product_code\"]);\n            product_ids.push(obj[\"id\"]);\n            vendor_ids.push(null);\n         }\n    })\n}else product_ids.push(products[\"id\"]);\n\n\nitems[0].json.product_ids = product_ids; \nitems[0].json.vendor_ids = vendor_ids; \nitems[0].json.existingProductData = existingProductData; \n\n\nreturn items\n"
      },
      "name": "Get product_ids",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        920,
        2160
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_mozart_vendor_product_mapping?filter={\"_and\": [{\"product\": {\"_in\":\"{{$node[\"Get product_ids\"].json[\"product_ids\"]}}\"}},{\"vendor\": {\"_null\":null}}]}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Get the product_vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1120,
        2160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let products = $node[\"Get product_ids\"].json[\"concatedProducts\"];\nlet product_ids = $node[\"Get product_ids\"].json[\"product_ids\"]\nlet existing_product_vendor = $node[\"Get the product_vendor\"].json.data\n\nlet resultFilter  = product_ids.filter(products=>!existing_product_vendor.some(existing_product_vendor=>existing_product_vendor.product === products))\n\nitems[0].json.resultFilter  = resultFilter  \npost_product_vendor=[];\nresultFilter.forEach(function(value,index){\n       post_product_vendor[index] = {}\n       post_product_vendor[index].product = value\n\n})\n\n\nitems[0].json.post_product_vendor = post_product_vendor;\nif(resultFilter.length>0){\n   items[0].json.action = \"post the product_vendor\";\n   \n}else items[0].json.action = \"dont post the product_vendor\"\n\nitems[0].json.existing_product_vendor = existing_product_vendor \n\nitems[0].json.products = products \n\n\nreturn items;\n"
      },
      "name": "Create new product_vendor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1320,
        2160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Create new product_vendor\"].json[\"action\"]}}",
              "value2": "post the product_vendor"
            }
          ]
        }
      },
      "name": "Checking condition whether to post product_vendor ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1520,
        2160
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_mozart_vendor_product_mapping",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Create new product_vendor\"].json[\"post_product_vendor\"]}}"
      },
      "name": "Post the product_vendor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1720,
        2060
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let po_file = $node[\"Merging the globals and file Id\"].json[\"data\"][\"id\"];\nlet po_num = $node[\"Merging the globals and file Id\"].json[\"po_num\"];\nlet po_value= $node[\"Merging the globals and file Id\"].json[\"po_value\"];\nlet po_status =$node[\"Merging the globals and file Id\"].json[\"po_status\"];\nlet po_date =$node[\"Merging the globals and file Id\"].json[\"po_date\"];\n//let po_type= $node[\"Merging the globals and file Id\"].json[\"po_type\"];\nlet issuer_id= $node[\"Creating user\"].json[\"action\"]===\"user exists\"?$node[\"Get user_id\"].json.data[0][\"id\"]:$node[\"Post to the user_details\"].json.data[\"id\"];\nlet po_deliver_date = $node[\"Extracting PO details\"].json[\"max_date\"];\nlet req_quantity = $node[\"Extracting PO details\"].json[\"product_quantity\"];\nlet product_deliverDate = $node[\"Extracting PO details\"].json[\"po_deliverDate\"];\nlet product_price = $node[\"Extracting PO details\"].json[\"productvalueWithTax\"];\nlet productAction =  $node[\"Create new product\"].json[\"action\"];\nlet po_products = $node[\"Extracting PO details\"].json[\"products\"];\nlet existingProductData = $node[\"get product details\"].json.data;\nlet shakedeal_poc_id = $node[\"Get shakedeal POC\"].json.data[0].id;\n\nlet existing_product_vendor = $node[\"Get the product_vendor\"].json.data;\nlet product_vendor_action = $node[\"Create new product_vendor\"].json.action;\n\nif(productAction===\"post the products\"){\n   if(existingProductData.length>0){\n      let concatedProducts = existingProductData .concat(items[0].json.postedProductData);\n      items[0].json.concatedProducts=concatedProducts;\n   }else items[0].json.concatedProducts = items[0].json.postedProductData;\n}else items[0].json.concatedProducts = existingProductData;\n\nlet concated_products = items[0].json.concatedProducts\n\nif(product_vendor_action === \"post the product_vendor\"){\n     let posted_product_vendor = $node[\"Post the product_vendor\"].json.data;\n     items[0].json.posted_product_vendor = posted_product_vendor;\n\n}\n\nif(product_vendor_action === \"post the product_vendor\"){\n   if(existing_product_vendor.length>0){\n      let concated_product_vendor = existing_product_vendor.concat(items[0].json.posted_product_vendor);\n      items[0].json.concated_product_vendor = concated_product_vendor;\n   \n   }else items[0].json.concated_product_vendor = items[0].json.posted_product_vendor;\n\n}else items[0].json.concated_product_vendor = existing_product_vendor; \n\nlet concat_product_vendor  = items[0].json.concated_product_vendor;\n\nlet product_vendor = [];\n\nif(concat_product_vendor.length>1){\n      for(i=0;i<concat_product_vendor.length;i++){                 \n        product_vendor[i] ={};\n        product_vendor[i].sd_mozart_vendor_product_mapping_id=concat_product_vendor[i][\"id\"];\n        product_vendor[i].req_qty= req_quantity[i];\n        product_vendor[i].delivery_date = new Date(product_deliverDate[i]).toISOString();\n        product_vendor[i].product_total = product_price[i];\n       \n}\n\n\n}else {\n    product_vendor[0] = {};\n    product_vendor[0].sd_mozart_vendor_product_mapping_id =product_vendor_action === \"post the product_vendor\"?concat_product_vendor[\"id\"]:concat_product_vendor[0][\"id\"];  \n    product_vendor[0].req_qty = req_quantity[0];\n    product_vendor[0].delivery_date = new Date(product_deliverDate[0]).toISOString();\n    product_vendor[0].product_total = product_price[0];\n\n\n}\n\nlet po_details=[];\npo_details[0]={};\npo_details[0].po_file=po_file;\npo_details[0].po_num=po_num;\npo_details[0].po_value=po_value;\npo_details[0].po_status=po_status;\npo_details[0].po_date=new Date(po_date).toISOString();\npo_details[0].po_type=\"rfq\";\npo_details[0].issuer_name=issuer_id;\npo_details[0].shakedeal_poc_details = shakedeal_poc_id;\npo_details[0].po_deliver_date =new Date(po_deliver_date).toISOString();\npo_details[0].products= product_vendor; \nitems[0].json.po_details = po_details;\n\n\nreturn items;\n"
      },
      "name": "constructing for PO",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1940,
        2160
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_mozart_po_details",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"constructing for PO\"].json[\"po_details\"]}}"
      },
      "name": "Post the PO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2200,
        2160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "={{$node[\"Globals\"].json[\"workflow_from_email\"]}}",
        "toEmail": "={{$node[\"Globals\"].json[\"sales_agent_email\"]}}",
        "subject": "=Balco: A new PO is received with PO number: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}",
        "html": "=<!DoCtYPe html><html lang=\"en\"><head><style id=\"stndz-\nstyle\"></style>\n<meta http-equiv=\"Content-Type\" content=\"text\n/html; charset=UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,\ninitial-scale=1, shrink-to-fit=no\">\n<meta name=\"description\" content=\"\">\n<meta name=\"author\" content=\"Mark Otto, Jacob\nThornton, and Bootstrap contributors\">\n<meta name=\"generator\" content=\"\nAcelleSystemLayouts\">\n<!-- Bootstrap core CSS -->\n<link href=\"https://marketing.shakedeal.com/assets\n/templates/60584da7bdf65/css/bootstrap.min.css\" rel=\"\nstylesheet\">\n<script id=\"spHTMLFormElementPrototypeScript\">\n(function()\n{\ntry\n{\nvar sp_old_HTMLFormElementPrototype_submit =\nHTMLFormElement.prototype.submit;\nHTMLFormElement.prototype.submit = function\n(AEvent)\n{\ntry\n{\nvar spEvent = document.createEvent('Event');\nspEvent.initEvent('sp_submit', true, true);\nthis.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from HTMLFormElement.\nprototype.submit: ' + ErrorMessage);\n}\nsp_old_HTMLFormElementPrototype_submit.apply\n(this);\n};\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to HTMLFormElement.prototype.submit: ' +\nErrorMessage);\n}\ntry\n{\nif (typeof __doPostBack == 'function')\n{\nvar sp_old__doPostBack = __doPostBack;\n__doPostBack = function(eventTarget,\neventArgument)\n{\ntry\n{\nvar spEvent = document.createEvent\n('Event');\nspEvent.initEvent('sp_submit', true, true);\nwindow.dispatchEvent(spEvent);\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype()\nError sending \"sp_submit\" event from __doPostBack(): '\n+ ErrorMessage);\n}\nsp_old__doPostBack(eventTarget,\neventArgument);\n};\n}\n}\ncatch(ErrorMessage)\n{\nconsole.error('spFormElementPrototype() Error\nattaching to __doPostBack(): ' + ErrorMessage);\n}\n})();</script><link href=\"https://fonts.googleapis.\ncom/icon?family=Material+Icons\" rel=\"stylesheet\"><link\nhref=\"https://fonts.googleapis.com/icon?\nfamily=Material+Icons+Outlined\" rel=\"stylesheet\"></head>\n\n<body data-new-gr-c-s-check-loaded=\"14.990.0\" data-\ngr-ext-installed=\"\">\n<main role=\"main\">\n<div class=\"py-5 bg-light\">\n<div class=\"container\">\n<h1 class=\"my-4 display-4 text-center\">A new PO is received with PO number:{{$node[\"Extracting balco PO details\"].json[\"po_number\"]}} and po_type : RFQ</h1>\n<p class=\"lead text-center\">Please create a SDStore order against this PO: {{$node[\"Extracting balco PO details\"].json[\"po_number\"]}}.</p>\n<div><img class=\"my-2\" src=\"\" width=\"100%\" /></div>\n</div>\n</div>\n</main><footer class=\"text-muted py-5\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p class=\"mb-1\">Copyright &copy; OpCommerce Online PVT\nLTD, All rights reserved.</p>\n<p class=\"mb-0\">Please email us on <a href=\"\nsupport@shakedeal.com\">support@shakedeal.com</a> in\ncase of any queries.\n</div>\n<div class=\"col-md-4\">\n<p class=\"float-right\"><a href=\"#\">Back to top</a></p>\n</div>\n</div>\n</div>\n</footer>\n</body></html>",
        "options": {}
      },
      "name": "SA is informed that PO is generated1",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2500,
        2160
      ],
      "credentials": {
        "smtp": {
          "id": "17",
          "name": "smtp(sai)creds"
        }
      }
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$node[\"Globals\"].json[\"client\"]}}",
        "rules": {
          "rules": [
            {
              "value2": "=balco"
            }
          ]
        },
        "fallbackOutput": 1
      },
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        1100,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "\n\nlet product_name = [];\nlet product_code=[];\nlet product_quantity=[];\nlet material_description=[];\nlet vendor_name=[];\nlet vendor_phone=[];\nlet vendor_companyName=[];\nlet vendor_email=[];\nlet vendor_adress=[];\nlet po_deliverDate=[];\nlet productvalueWithTax=[];\nlet hsn_code = [];\nlet uom = [];\n\n\n\nconst pdf = require('pdf-parse');\n\nfunction render_page(pageData) {\n  //check documents https://mozilla.github.io/pdf.js/\n  let render_options = {\n    //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.\n    normalizeWhitespace: false,\n    //do not attempt to combine same line TextItem's. The default value is `false`.\n    disableCombineTextItems: false,\n  };\n\n  return pageData.getTextContent(render_options).then(function (textContent) {\n    let lastY,\n      text = \"\";\n    for (let item of textContent.items) {\n      text += `\\n${item.str}`;\n    }\n    return text;\n  });\n}\n\nlet options = {\n  pagerender: render_page,\n  max: 15,\n};\n\nconst binaryData = Buffer.from(items[0].binary[\"attachment_\" + $node[\"Get the index of attachment\"].json[\"attachmentIndex\"]].data, \"base64\");\nlet content = await pdf(binaryData, options);\nlet lines=  content.text.split(\"\\n\");\nlet all_lines = lines;\nlet lenLines = all_lines.length;\n\nfor(i=0;i<lenLines;i++){\n   if(lines[i].includes(\"PO Number :\")){\n      let po_line = lines[i].split(\":\");\n      items[0].json.po_number = po_line[1].trim();\n   \n   }else if(lines[i].startsWith(\"Date :\")){\n      items[0].json.po_date = lines[i-4].includes(\"Purchase Order Details\")?lines[i-1]:lines[i+1];\n   \n   \n   }else if(lines[i].includes(\"Buyer :\")){\n      items[0].json.buyer_name =lines[i-2].includes(\"Buyer Details\")?lines[i-1]:lines[i+1];\n   \n   }else if(lines[i].includes(\"Contact :\")){\n      items[0].json.buyer_contact =lines[i-4].includes(\"Buyer Details\")?parseInt(lines[i-1]):parseInt(lines[i+1]);\n   \n   }else if(lines[i].startsWith(\"Mail ID :\")){\n      items[0].json.buyer_email = lines[i-6].includes(\"Buyer Details\")?lines[i-1]:lines[i+1];\n   \n   }else if(lines[i].includes(\"Contact Details -\")||lines[i].includes(\"Details of Original Vendor\")){\n      vendor_name.push(lines[i+2].trim());\n      //vendor_adress.push(lines[i+3]);\n      //let line_phone = lines[i+6].split(\"/\");\n      //vendor_phone.push(line_phone[1]);\n    //  let email_line = lines[i+7].split(\":\");\n     // vendor_email.push(email_line[1]);\n    \n   }else if(lines[i].includes(\"Item No\")){\n      if(lines[i+12].includes(\"THIS IS SYSTEM GENERATED DOCUMENT AND HENCE DOES NOT REQUIRE ANY SIGNATURE. PLEASE TREAT THIS AS ORIGINAL AND SUBMIT YOUR ORDER ACKNOWLEDGEMENT.\")){\n         if(lines[i+21].match(/^[0-9]+$/)!==null){\n            product_code.push(lines[i+20]);\n            product_name.push(lines[i+22]);\n            product_quantity.push(lines[i+23]);\n            po_deliverDate.push(lines[i+25]);\n            hsn_code.push(lines[i+21]);\n            uom.push(lines[i+24]);\n         }else{\n            product_code.push(lines[i+20]);\n            product_name.push(lines[i+21]);\n            product_quantity.push(lines[i+22]);\n            po_deliverDate.push(lines[i+24]);\n            uom.push(lines[i+23]);\n        \n         }\n      \n      }else{\n         if(lines[i+11].match(/^[0-9]+$/)!==null){\n            product_code.push(lines[i+10]);\n            product_name.push(lines[i+12]);\n            product_quantity.push(lines[i+13]);\n            po_deliverDate.push(lines[i+15]);\n            hsn_code.push(lines[i+11]);\n            uom.push(lines[i+14]);\n         }else{\n             product_code.push(lines[i+10]);\n             product_name.push(lines[i+11]);\n             product_quantity.push(lines[i+12]);\n             po_deliverDate.push(lines[i+14]);\n             uom.push(lines[i+13]);\n            \n         \n         }\n      \n      }\n      \n   }else if(lines[i].includes(\"Material Long Text:\")){\n       \n         material_description.push(lines[i+1]);\n    \n   \n   }else if(lines[i].includes(\"Total With Tax :\")){\n         let product_price = lines[i+1].match(/\\d+/g) != null?lines[i+1].split(\",\").join(''):lines[i-1].split(\",\").join('');\n         productvalueWithTax.push(parseFloat(product_price));\n   \n   \n   }else if(lines[i].includes(\"Grand Total :\")){\n         let po_value_line = lines[i+1].match(/\\d+/g) != null?lines[i+1].split(\",\").join(''):lines[i-1].split(\",\").join('');\n         items[0].json.po_value = parseFloat(po_value_line);\n   \n   \n   }else if(lines[i].startsWith(\"ACTUAL VENDOR:\")){\n        \n           \n              let vendor_name_line = lines[i].split(\":\")\n              vendor_name.push(vendor_name_line[1].trim());\n              let vendor_mobile_line = lines[i+4].match(/\\d+/g);\n             \n              //let vendor_email_line = lines[i+1].includes(\"Email :\")?lines[i+1].split(\":\"):lines[i+5].split(\":\");\n             // vendor_email.push(vendor_email_line[1].trim());\n              \n            \n        \n   \n   }else if(lines[i].includes(\"Original Supplier\")||lines[i].includes(\"ORGINAL SUPPLIER\")||lines[i].includes(\"ORIGINAL SUPPLIER\")||lines[i].includes(\"CONTACT DETAILS:-\")||lines[i].includes(\"VENDOR NAME & DETAILS :\")||lines[i].includes(\"ORIGINAL VENDOR CONTACT DETAILS:\")||lines[i].includes(\"Vendor Details -\")||lines[i].includes(\"VENDOR CONTRACT DETAIL\")||lines[i].includes(\"Original supplier details are as follows\")||lines[i].includes(\"THE PO ITEM IS PROCURED FROM BELOW VENDOR\")||lines[i].includes(\"Actual Vendor\")||lines[i].includes(\"Principle vendor\")){\n          vendor_name.push(lines[i+1].trim());\n          //let vendor_email_line = lines[i+2].split(\":\");\n         // let email = vendor_email_line[1].replace(\"Web\",\"\")\n         // vendor_email.push(email.trim())\n   \n   }else if(lines[i].includes(\" Vendor Name & Details for Material Code\")){\n          vendor_companyName.push(lines[i+1].trim());\n          vendor_name.push(lines[i+2].trim());\n          let contact = lines[i+3].includes(\"Mob no -\")?lines[i+3].replace(\"Mob no -\",\" \"):lines[i+3].replace(\"Mob no\",\" \");\n          vendor_phone.push(contact.trim());\n          let email=lines[i+4].includes(\"Address\")?lines[i+5].split(\"-\"):lines[i+4].split(\"-\");\n          vendor_email.push(email[1].trim());\n    \n   \n   }else if(lines[i].includes(\"OEM Vendor\")||lines[i].includes(\"OEM VENDOR\")){\n          let vendor_name_line = lines[i].split(\"-\");\n          vendor_name.push(vendor_name_line[1].trim());\n         // let vendor_addresss_line = lines[i+1].split(\"-\");\n         // vendor_adress.push(vendor_addresss_line[1].trim());\n          //let vendor_email_line = lines[i+2].split(\"-\");\n        //  vendor_email.push(vendor_email_line[1].trim());\n        //  let vendor_phone_line = lines[i+3].split(\"-\");\n        //  vendor_phone.push(vendor_phone_line[1].trim());\n   \n   }else if(lines[i].startsWith(\"ORIGINAL VENDOR\")||lines[i].startsWith(\"Original Vendor\")||lines[i].startsWith(\"VENDOR:\")){\n          let vendor_name_line = lines[i].split(\":\");\n          vendor_name.push(vendor_name_line[1].trim());\n   \n   }else if(lines[i].startsWith(\"SUPPLIER DETAILS\")){\n          vendor_name.push(lines[i+2].trim());\n   \n   }\n\n}\n\n\nlet length = vendor_name.length;\n\nlet p=[];\nproduct_name .forEach(function(item,index){\n      \n   p[index] = {};\n   p[index].product_index = index;\n   p[index].product_name =product_name[index] ;\n   p[index].product_quantity=product_quantity[index];\n   p[index].product_code=product_code[index];\n   p[index].productvalueWithTax=productvalueWithTax[index];\n   p[index].description=material_description[index];\n\n   p[index].po_deliver_date = po_deliverDate[index];\n   p[index].hsn_code = hsn_code[index]\n   p[index].uom = uom[index];\n   p[index].isMapped = false;      \n})\n    \nitems[0].json.products=p;\n\nlet v=[];\nvendor_name.forEach(function(item,index){\n      v[index] = {};\n      v[index].vendor_name=vendor_name[index];\n      v[index].vendor_phone=vendor_phone[index];\n      v[index].vendor_company=vendor_companyName[index];\n      v[index].vendor_email=vendor_email[index];\n      v[index].vendor_address=vendor_adress[index];\n\n\n})\nitems[0].json.vendors=v;\n\n//for mapping the vendor and products\n\nlet prodven=[];\nif(vendor_name.length>1){\n   for(i=0;i<lenLines;i++){\n       product_code.forEach(function(value,index){\n             if(lines[i].includes(value+\" \"+\"Qtys\")){\n                prodven[index]={};\n                prodven[index].productCode = value;\n                let replaceEmail =lines[i+4].includes(\"Email ID\") ?lines[i+4].split(\"-\"):lines[i+5].split(\"-\");\n                prodven[index].email = replaceEmail[1].trim();\n               \n                let result = p.find(obj=>obj[\"product_code\"]===value);\n                prodven[index].quantity= result[\"product_quantity\"];\n                prodven[index].product_deliverDate = result[\"po_deliver_date\"];\n                prodven[index].product_price = result[\"productvalueWithTax\"];\n                \n                \n       \n            }\n  \n      })\n   }\n}\n\n\nlet max =po_deliverDate[0];\n\npo_deliverDate.forEach(function(value,index){\n       max = new Date(value) > new Date(max)? value: max;\n      \n\n\n})\n//items[0].json.dates =dates \nif(vendor_name.length>0){\n   items[0].json.order_type = \"routing\";\n\n}else items[0].json.order_type = \"rfq\";\n\n\nitems[0].json.max_date = max; \n\n\n\nitems[0].json.prodven = prodven;\n\n\nitems[0].json.product_name=product_name;\nitems[0].json.product_code=product_code;\nitems[0].json.product_quantity=product_quantity;\nitems[0].json.material_description=material_description;\nitems[0].json.vendor_name=vendor_name;\nitems[0].json.vendor_phone=vendor_phone;\nitems[0].json.vendor_email=vendor_email;\nitems[0].json.vendor_companyName=vendor_companyName;\nitems[0].json.po_deliverDate = po_deliverDate;\nitems[0].json.productvalueWithTax = productvalueWithTax;\nitems[0].json.vendor_adress=vendor_adress;\n\n\n\nreturn items\n"
      },
      "name": "Extracting balco PO details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1380,
        -120
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "buyer_name",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"buyer_name\"]:$node[\"Extracting Vedanta PO details\"].json[\"buyer_name\"]?node[\"Extracting Vedanta PO details\"].json[\"buyer_name\"]:\"VEDANTA LIMITED\"}}"
            },
            {
              "name": "buyer_email",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"buyer_email\"]:$node[\"Extracting Vedanta PO details\"].json[\"buyer_email\"]?$node[\"Extracting Vedanta PO details1\"].json[\"buyer_email\"]:\"Invoice.sesa@vedanta.co.in\"}}"
            },
            {
              "name": "po_num",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_number\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_number\"]}}"
            },
            {
              "name": "from_mail",
              "value": "={{$node[\"Get the index of attachment\"].json[\"from\"][\"value\"][0][\"address\"]}}"
            },
            {
              "name": "to_mail",
              "value": "={{$node[\"Get the index of attachment\"].json[\"to\"][\"value\"][0][\"address\"]}}"
            },
            {
              "name": "items_list",
              "value": "={{$node[\"extracting the Shipping adress\"].json[\"items_list\"]}}"
            },
            {
              "name": "po_date",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_date\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_date\"]}}"
            },
            {
              "name": "po_deliverDate",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_deliverDate\"]:$node[\"Extracting Vedanta PO details\"].json[\"product_deliverDate\"]}}"
            },
            {
              "name": "order_type",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"order_type\"]:$node[\"Extracting Vedanta PO details\"].json[\"order_type\"]}}"
            },
            {
              "name": "po_status",
              "value": "open"
            },
            {
              "name": "shipment_address",
              "value": "=\"\""
            },
            {
              "name": "vendor_email",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"vendor_email\"]:$node[\"Extracting Vedanta PO details\"].json[\"vendor_email\"]}}"
            },
            {
              "name": "vendor_name",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"vendor_name\"]:$node[\"Extracting Vedanta PO details1\"].json[\"vendor_name\"]}}"
            },
            {
              "name": "products",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"products\"]:$node[\"Extracting Vedanta PO details\"].json[\"products\"]}}"
            },
            {
              "name": "vendors",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"vendors\"]:$node[\"Extracting Vedanta PO details\"].json[\"vendors\"]}}"
            },
            {
              "name": "product_quantity",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"product_quantity\"]:$node[\"Extracting Vedanta PO details\"].json[\"product_quantity\"]}}"
            },
            {
              "name": "productvalueWithTax",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"productvalueWithTax\"]:$node[\"Extracting Vedanta PO details\"].json[\"productvalueWithTax\"]}}"
            },
            {
              "name": "max_date",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"max_date\"]:$node[\"Extracting Vedanta PO details\"].json[\"max_date\"]}}"
            },
            {
              "name": "prodven",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"prodven\"]:$node[\"Extracting Vedanta PO details\"].json[\"prodven\"]}}"
            },
            {
              "name": "product_code",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"product_code\"]:$node[\"Extracting Vedanta PO details\"].json[\"product_code\"]}}"
            },
            {
              "name": "po_type",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_type\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_type\"]}}"
            }
          ],
          "number": [
            {
              "name": "buyer_contact",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"buyer_contact\"]:$node[\"Extracting Vedanta PO details\"].json[\"buyer_contact\"]}}"
            },
            {
              "name": "po_value",
              "value": "={{$node[\"Globals\"].json[\"client\"] == \"balco\"?$node[\"Extracting balco PO details\"].json[\"po_value\"]:$node[\"Extracting Vedanta PO details\"].json[\"po_value\"]}}"
            }
          ],
          "boolean": []
        },
        "options": {}
      },
      "name": "Extracting PO details",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1840,
        40
      ]
    },
    {
      "parameters": {
        "functionCode": "let prodven = $node[\"Extracting PO details\"].json[\"prodven\"];\nlet poDetails = $node[\"constructing po_details\"].json.po_details;\nlet poProducts = $node[\"constructing po_details\"].json.po_details[0].po_items;\nlet productsDetails = $node[\"constructing po_details\"].json.concated_products;\nlet po_date =$node[\"Merging the globals and file Id\"].json[\"po_date\"]; \nlet po_value= $node[\"Merging the globals and file Id\"].json[\"po_value\"];\nlet po_deliver_date = $node[\"Extracting PO details\"].json[\"max_date\"];\nlet po_type = $node[\"Extracting PO details\"].json[\"po_type\"];\nlet commision_percentage = $node[\"Globals\"].json[\"commision_percentage\"]; \nlet client = $node[\"Globals\"].json[\"client\"];\nlet vendorPoDetails = [];\nlet vendor_po_num_prefix = $node[\"Globals\"].json[\"vendor_po_num_prefix\"];\nlet po_number = $node[\"Merging the globals and file Id\"].json[\"po_num\"];\npoProducts = poProducts.map((obj, i) => ({ ...obj, req_qty: parseInt(obj.req_qty) }));\n\n//Reduce commision charges and if client is vedanta and po_type is routing\nif(client == \"vedanta\" && po_type == \"routing\" ){\n  poProducts = poProducts.map((obj, i) => ({ ...obj, product_total: obj.product_total-(obj.product_total*commision_percentage)/100 }));\n}\n\n\npo_items = [];\nuniqueArr = Object.create(null),\n    uniqueVendorPlantArr = prodven.filter(o => {\n        var key = ['plant', 'email'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\n\nuniqueVendorPlantArr.forEach(function(obj,index){\n  po_items[index]={};\n  let matchedProdVen = prodven.filter(pv => pv.email == obj.email && pv.plant == obj.plant);\n  let productVendorDetails = \n   poProducts.filter(product=>\n     matchedProdVen.some(\n      data=> data.productCode === product.product \n    )\n  );\n  \n  let vendor_po_number = `${vendor_po_num_prefix+po_number}/${index+1}`\n  po_items[index].po_items = productVendorDetails;\n   po_items[index].vendor_po_number = vendor_po_number \n  let po_total = productVendorDetails.reduce((total,obj)=>obj.gross_price+ total, 0);\n  let net_po_value = productVendorDetails.reduce((total,obj)=>(obj.rate+ obj.req_qty)+total, 0);\n  vendorPoDetails[index]={};\n  vendorPoDetails[index].id = vendor_po_number;\n  vendorPoDetails[index].vendor=obj.email\n  vendorPoDetails[index].po_num=$node[\"post the po_details\"].json.data[0].id;\n  vendorPoDetails[index].po_value= po_total;\n  vendorPoDetails[index].po_status=\"draft\";\n  //vendorPoDetails[index].po_date=new Date(po_date).toISOString();\n  vendorPoDetails[index].po_type=client == \"vedanta\"?po_type:\"routing\";\n  vendorPoDetails[index].po_deliver_date =new Date(po_deliver_date).toISOString(); \n  vendorPoDetails[index].net_po_value = net_po_value\n  //vendorPoDetails[index].delivery_address = 1;\n  \n})\n\n\nitems[0].json.uniqueVendorPlantArr = uniqueVendorPlantArr;\nitems[0].json.prodven= prodven;\nitems[0].json.poDetails =  poDetails;\nitems[0].json.poProducts = poProducts;\nitems[0].json.productsDetails = productsDetails;\nitems[0].json.vendorPoDetails =  vendorPoDetails;\nitems[0].json.po_items = po_items\nreturn items;"
      },
      "name": "Constructing Vendor PO Details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2600,
        1600
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sdm_vendor_pos",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json[\"vendorPoDetails\"]}}"
      },
      "name": "post the vendor po_details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2860,
        1600
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let product_name = [];\nlet product_code=[];\nlet product_quantity=[];\nlet material_description=[];\nlet vendor_name=[];\nlet vendor_phone=[];\nlet vendor_companyName=[];\nlet vendor_email=[];\nlet vendor_adress=[];\nlet product_deliverDate=[];\nlet productvalueWithTax=[];\nlet hsn_code = [];\nlet uom = [];\nlet plant = [];\nlet taxes = [];\nlet taxValues = [];\nlet rates = [];\nlet productSubTotal = [];\nlet productDetails=[];\nlet po_number = \"\";\nlet po_date = \"\";\nlet po_value = 0;\nlet findParameters = [\"PO Number\",\"PO Date\"];\nlet aribaVendorId = [];\nlet taxPercentages = [];\nlet vendor_gstin = [];\nlet searchParameters = {\n  \"po_number\":[\"PO Number\"],\n\n}\nlet po_type =  \"\";\n//let po_details = $node[\"Get po details\"].json.data.formulas;\n\nfor (const [index,item] of items.entries()){\n  po_number = item.json['PO_Number']?item.json['PO_Number'].toString():po_number;\n  po_date = item.json['PODate']?item.json['PODate'].split(\".\").reverse().join(\"-\"):po_date;\n  po_value = item.json['Total PO Value']?item.json['Total PO Value']:po_value;\n  po_type = item.json['PO Type (use_and_pay/routing)']?item.json['PO Type (use_and_pay/routing)']:po_type;\n  product_code.push(item.json['Item code'].toString());\n  plant.push(item.json['Plant']);\n  uom.push(item.json['UOM']);\n  product_quantity.push(item.json['Req.Qty'].toString());\n  rates.push(item.json['Rate']);\n  productSubTotal.push(parseFloat(item.json['Value']));\n  product_name.push(item.json['Product Name']);\n  vendor_name.push(item.json['Vendor name']);\n  vendor_email.push(item.json['Vendor Email']);\n  vendor_phone.push(item.json['Contact'].toString());\n  vendor_gstin.push(item.json['GSTIN']);\n  aribaVendorId.push(item.json['Vendor ID']);\n  hsn_code.push(item.json['HSN']);\n  item.json['Schedule Date']?product_deliverDate.push(item.json['Schedule Date'].split(\".\").reverse().join(\"-\")):product_deliverDate.push(\"\");\n  item.json['tax per']?taxPercentages.push(parseFloat(item.json['tax per'])):taxPercentages.push(0);\n  item.json['tax value']?taxValues.push(item.json['tax value']):taxValues.push(0);\n\n}\nproduct_code.forEach(function(item,index){\n  productDetails[index] = {};\n  productDetails[index].product_index = index;\n  productDetails[index].product_name =product_name[index].substring(0,198);\n  productDetails[index].id=product_code[index];\n  productDetails[index].uom = uom[index];  \n  productDetails[index].hsn = hsn_code[index];\n  productDetails[index].mc = product_code[index].slice(0,2);\n  productDetails[index].sg = product_code[index].slice(0,4);\n  productDetails[index].ssg = product_code[index].slice(0,6)\n  productDetails[index].product_quantity=product_quantity[index];\n  let productTotal = parseFloat(productSubTotal[index])+parseFloat(taxValues[index])\n  productvalueWithTax.push(productTotal)\n  productDetails[index].productvalueWithTax=productTotal;\n  productDetails[index].rate = rates[index];\n  productDetails[index].tax = parseFloat(taxPercentages[index]);\n  //productDetails[index].description=material_description[index];\n productDetails[index].po_deliver_date = product_deliverDate[index].split(\".\").reverse().join(\"-\");\n  productDetails[index].plant = plant[index];\n  productDetails[index].isMapped = false;         \n})\n\nlet vendorDetails=[];\nvendor_name.forEach(function(item,index){\n  vendorDetails[index] = {};\n  vendorDetails[index].vendor_name=vendor_name[index];\n  vendorDetails[index].vendor_phone=vendor_phone[index];\n  vendorDetails[index].vendor_company=vendor_companyName[index];\n  vendorDetails[index].id=vendor_email[index];\n  vendorDetails[index].vendor_address=vendor_adress[index];\n  vendorDetails[index].ariba_vendor_id = aribaVendorId[index];\n  vendorDetails[index].gstin = vendor_gstin[index];\n})\nlet prodven=[];\nif(vendor_name.length>0){\n      productDetails.forEach(function(product,index){\n        prodven[index]={};\n        prodven[index].product_index = product[\"product_index\"];\n        prodven[index].productCode = product[\"id\"];\n        prodven[index].email = vendor_email[index];\n        prodven[index].quantity= product[\"product_quantity\"];\n        prodven[index].product_deliverDate = product[\"po_deliver_date\"];\n        prodven[index].product_price = product[\"productvalueWithTax\"];\n        prodven[index].rate = product[\"rate\"]\n        prodven[index].plant = product[\"plant\"];\n        prodven[index].hsn = product[\"hsn\"];\n        prodven[index].uom = product[\"uom\"];\n        prodven[index].tax = product[\"tax\"];\n      })\n}\nif(vendor_name.length>0){\n   items[0].json.order_type = \"routing\";\n\n}else items[0].json.order_type = \"rfq\";\n\nlet max =product_deliverDate[0];\n\nproduct_deliverDate.forEach(function(value,index){\n       max = new Date(value) > new Date(max)? value: max;\n      \n\n\n})\n\nitems[0].json.po_type = po_type;\nitems[0].json.max_date = max.split(\".\").reverse().join(\"-\"); \n\nitems[0].json.product_deliverDate = product_deliverDate;\nitems[0].json.vendor_name = vendor_name;\nitems[0].json.vendor_email = vendor_email;\nitems[0].json.aribaVendorId = aribaVendorId;\nitems[0].json.products = productDetails;\nitems[0].json.vendors = vendorDetails;\nitems[0].json.prodven = prodven;\nitems[0].json.taxValues = taxValues;\nitems[0].json.productSubTotal = productSubTotal;\nitems[0].json.product_code = product_code;\nitems[0].json.product_name = product_name;\nitems[0].json.plant = plant;\nitems[0].json.uom = uom;\nitems[0].json.product_quantity = product_quantity;\nitems[0].json.rates = rates;\nitems[0].json.po_date = po_date; \nitems[0].json.po_number = po_number;\nitems[0].json.po_value = po_value;\nitems[0].json.productvalueWithTax = productvalueWithTax;\n//items[0].json.po_details = po_details;\nitems[0].json.taxPercentages = taxPercentages;\nreturn items;"
      },
      "name": "Extracting Vedanta PO details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1680,
        180
      ]
    },
    {
      "parameters": {
        "format": "resolved",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "Wait for PO Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        460,
        340
      ],
      "credentials": {
        "imap": {
          "id": "67",
          "name": "Vedanta Imap Creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nlet po_items=$node[\"Constructing Vendor PO Details\"].json[\"po_items\"];\nlet returnItems =[]\n\npo_items.forEach(function(obj,index){  \n   let ids = [];\n   let data ={};\n   data.vendor_po = obj.vendor_po_number;\n   obj[\"po_items\"].map((item,index)=>ids.push(item.id));\n   let update_items = {};\n   update_items.keys = ids;\n   update_items.data = data\n    returnItems.push({\n    json: [\n      {\n       update_items_obj :update_items,\n        url :  $node[\"Globals\"].json[\"dms_url\"],\n      \n    }\n    ]\n  });\n  \n})\n\nreturn returnItems;"
      },
      "name": "Function to create obj for updating the vendor po in po items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3100,
        1600
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to create obj for updating the vendor po in po items\"].json[\"0\"][\"url\"]}}/items/sdm_po_items",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create obj for updating the vendor po in po items\"].json[\"0\"][\"update_items_obj\"]}}"
      },
      "name": "Update the vendor po in po items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3340,
        1600
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "22",
          "name": "Balcoqa-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "binaryPropertyName": "attachment_0",
        "options": {
          "rawData": true
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        1220,
        180
      ]
    },
    {
      "parameters": {
        "functionCode": "const reader = require('xlsx')\n  \n// Reading our test file\nconst file = reader.readFile('./test.xlsx')\n  \nlet data = []\n  \nconst sheets = file.SheetNames\n  \nfor(let i = 0; i < sheets.length; i++)\n{\n   const temp = reader.utils.sheet_to_json(\n        file.Sheets[file.SheetNames[i]])\n   temp.forEach((res) => {\n      data.push(res)\n   })\n}\n\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2280,
        60
      ],
      "disabled": true
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1520,
        180
      ]
    }
  ],
  "settings": {},
  "staticData": {
    "node:Wait for PO Email": {
      "lastMessageUid": 3379
    }
  },
  "tags": [],
  "updatedAt": "2023-02-22T10:40:15.762Z"
}