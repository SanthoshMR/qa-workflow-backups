{
  "active": true,
  "connections": {
    "Get Cloud Files": {
      "main": [
        [
          {
            "node": "Combine Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get url and token": {
      "main": [
        [
          {
            "node": "Get Cloud Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nextcloud": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Items": {
      "main": [
        [
          {
            "node": "Nextcloud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet File": {
      "main": [
        [
          {
            "node": "Function to get grn data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Loop": {
      "main": [
        [
          {
            "node": "Function to get non-consignment items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment index": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "End Loop",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get grn data": {
      "main": [
        [
          {
            "node": "Move All Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get the splitted grn": {
      "main": [
        [
          {
            "node": "Get Shipment Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Shipment Items": {
      "main": [
        [
          {
            "node": "Update shipment Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update shipment Items": {
      "main": [
        [
          {
            "node": "Update Shipment item grn status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get product ids": {
      "main": [
        [
          {
            "node": "Get the inventory items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the inventory items": {
      "main": [
        [
          {
            "node": "Function to return updated inventory stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to return updated inventory stock": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Inventory Current stock": {
      "main": [
        [
          {
            "node": "Increment index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get vendor invoices": {
      "main": [
        [
          {
            "node": "Function to update grn in vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update shipment status": {
      "main": [
        [
          {
            "node": "Function to get product ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get url and token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move All Files": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to update grn in vpanel": {
      "main": [
        [
          {
            "node": "Get the shipmentItem from vpanel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the shipmentItem from vpanel": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Function to update grn in mozart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to update grn in mozart": {
      "main": [
        [
          {
            "node": "Update shipment status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Update Inventory Current stock",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Increment index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Shipment item grn status": {
      "main": [
        [
          {
            "node": "Update resolution status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get non-consignment items": {
      "main": [
        [
          {
            "node": "Get the invoice and po",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the invoice and po": {
      "main": [
        [
          {
            "node": "Function to get the splitted grn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update resolution status": {
      "main": [
        [
          {
            "node": "Function to get vendor invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-05-04T09:18:33.374Z",
  "id": "299",
  "name": "Vedanta : Update GRN",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        520,
        -280
      ]
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "path": "Grn-Report-qa/"
      },
      "name": "Get Cloud Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        660,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://qan8n.shakedeal.com/webhook/get-url",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "client",
              "value": "=vedanta"
            },
            {
              "name": "env",
              "value": "=qa"
            }
          ]
        }
      },
      "name": "Get url and token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        440,
        300
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "path": "=Grn-Report-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Nextcloud",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1100,
        300
      ],
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// return items;\nlet poFiles=[];\nlet excelFiles=[];\nitems.forEach((item) => {\n    const fullPath = item.json[\"path\"].split(\"/\");\n    const fileName = fullPath[fullPath.length - 1]\n    if(decodeURI(fileName).includes(\".csv\") || decodeURI(fileName).includes(\".xlsx\") || decodeURI(fileName).includes(\".xls\")){\n        excelFiles.push({\"file_name\":decodeURI(fileName)});\n    }\n});\n\nreturn [{\n     json: {\n         excelData:excelFiles\n    }\n}];"
      },
      "name": "Combine Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let binaries = {};\nconst { read: xlsxRead } = require('xlsx'); \nconst data = items[0].binary.data; \nworkbook = xlsxRead(data.data); \nbinaries[\"data\"] = workbook;\n\nitems[0].json.binaries= binaries\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        300
      ]
    },
    {
      "parameters": {
        "binaryPropertyName": "=data",
        "options": {
          "sheetName": "={{$node[\"Function\"].json[\"binaries\"][\"data\"][\"SheetNames\"][0]}}"
        }
      },
      "name": "Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        1540,
        300
      ]
    },
    {
      "parameters": {},
      "name": "Start Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2220,
        220
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "index",
              "value": "={{$node[\"Start Loop\"].json[\"index\"]+1}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Increment index",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        5700,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Increment index\"].json[\"index\"]}}",
              "operation": "equal",
              "value2": "={{$node[\"Function to get grn data\"].json[\"resultlength\"]}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        5920,
        200
      ]
    },
    {
      "parameters": {},
      "name": "End Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        6000,
        -200
      ]
    },
    {
      "parameters": {
        "functionCode": "let grnData = [];\n//let productIds = [];\nitems.forEach((item, index) => {\n  //productIds.push(item.json[\"Material\"])\n  let postingDate = item.json[\"Posting Date\"]?item.json[\"Posting Date\"]:\"\";\n  let grnDate = \"\";\n  if(typeof postingDate == \"string\"){\n    grnDate = item.json[\"Posting Date\"];\n  }else{\n    grnDate = getFormattedDate(item.json[\"Posting Date\"]);\n  }\n  grnData.push({\n    product : item.json[\"Material\"],\n    plant : item.json[\"Plant\"],\n    qty : item.json[\"Quantity\"],\n    vendor_invoice : item.json[\"Vendor Invoice\"]?item.json[\"Vendor Invoice\"]:\"\",\n    vendor_po : item.json[\"Vendor PO Number\"]?item.json[\"Vendor PO Number\"]:\"\",\n    plant : item.json[\"Plant\"],\n    grn_number : item.json[\"Material Document\"]?item.json[\"Material Document\"]:\"\",\n    grn_date : grnDate,\n    sd_invoice_nummber : item.json[\"Bill of Lading\"]?item.json[\"Bill of Lading\"]:\"\",\n    po_item_id : `${item.json[\"Purchase order\"]}-${item.json[\"Item\"]}`,\n    movement_type : item.json[\"Movement type\"] == \"103\" || item.json[\"Movement type\"] == \"503K\" || item.json[\"Movement type\"] == \"503\"?\"received\":item.json[\"Movement type\"] == \"105\" || item.json[\"Movement type\"] == \"321K\" ||  item.json[\"Movement type\"] == \"321\" || item.json[\"Movement type\"] == \"321k\"?\"accepted\":\"rejected\"\n  })\n})\n\nfunction getFormattedDate(secs){\n  const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day\n\n  const date = new Date((secs-1) * millisecondsPerDay + Date.parse(\"1900-01-01\"));\n\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Months are zero-based, so we add 1\n  const year = date.getFullYear();\n  const formattedDate = `${day < 10 ? '0' : ''}${day-1}-${month < 10 ? '0' : ''}${month}-${year}`;\n  return formattedDate\n}\n\nconst size = 10; // size of each subarray\n\nconst result = [];\nfor (let i = 0; i < grnData.length; i += size) {\n  result.push(grnData.slice(i, i + size));\n}\n\n//items[0].json.result= result;\n//items[0].json.resultlength = result.length;\n//return items;\nreturn [{\n    json: {\n        result: result,\n        resultlength : result.length\n    },\n}];\n"
      },
      "name": "Function to get grn data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1760,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let grnData = $node[\"Function to get grn data\"].json[\"result\"];\nlet currentIndex = $node[\"Start Loop\"].json[\"index\"];\nlet currentGrn = grnData[currentIndex];\nlet returnItems = [];\nlet orderInvoices = $node[\"Get the invoice and po\"].json[\"data\"];\nfunction findAllIndex(array, value) {\n  return array.map((element, index) => element.sd_invoice_nummber === value ? index : -1)\n              .filter(index => index !== -1);\n}\norderInvoices.forEach(function(invoice,index){\n    //let findInvoiceIndex = currentGrn.findAllIndex((grn) => grn.sd_invoice_nummber == invoice.id);\n    let findInvoiceIndex = findAllIndex(currentGrn,invoice.id)\n    findInvoiceIndex.forEach(function(findIndex,index){\n       currentGrn[findIndex].vendor_invoice = invoice[\"order\"][\"shipments\"][0][\"sdm_shipments_id\"][\"invoice_number\"];\n        currentGrn[findIndex].vendor_po = invoice[\"order\"][\"shipments\"][0][\"sdm_shipments_id\"][\"vendor_po_num\"];\n    })  \n})\n   \nuniqueArr = Object.create(null),\n    uniqueShipmentProductArr = currentGrn.filter(o => {\n        var key = ['product', 'vendor_invoice','vendor_po','po_item_id'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\nuniqueShipmentProductArr.forEach(function(obj,index){\n    let matchedShipmentProduct =   currentGrn.filter(grn=>grn.product == obj.product && grn.vendor_po == obj.vendor_po  && grn.vendor_invoice==obj.vendor_invoice && grn.po_item_id == obj.po_item_id);\n    let matchedRecievedProduct = matchedShipmentProduct.filter(msp=>msp.movement_type == \"received\");\n    let matchedAcceptedProduct = matchedShipmentProduct.filter(msp=>msp.movement_type == \"accepted\");\n    let matchedRejectedProduct = matchedShipmentProduct.filter(msp=>msp.movement_type == \"rejected\");\n    let receivedQty = matchedRecievedProduct.reduce((total,obj)=>obj.qty+ total, 0);\n    let acceptedQty = matchedAcceptedProduct.reduce((total,obj)=>obj.qty+ total, 0);\n    let rejectedQty = matchedRejectedProduct.reduce((total,obj)=>obj.qty+ total, 0);\n    let totalQty = matchedShipmentProduct.reduce((total,obj)=>obj.qty+ total, 0);\n    let [day, month, year] = obj[\"grn_date\"].split(\"-\");\n    returnItems.push({\n    json: {\n       product : obj.product,\n       vendor_invoice:obj.vendor_invoice,\n       vendor_po:obj.vendor_po,\n       plant : obj.plant,\n       accepted_qty : acceptedQty,\n       rejected_qty : rejectedQty,\n       received_qty : receivedQty,\n       qty : totalQty,\n       grn_number :obj[\"grn_number\"],\n       grn_date :new Date(year, month - 1, day).toISOString(),\n       po_item_id:obj.po_item_id,\n       dms_url : $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"],\n       movement_type :obj.movement_type\n       //movement_type : obj.movement_type\n    }\n  });\n  \n})\n\nreturn returnItems;\n"
      },
      "name": "Function to get the splitted grn",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2680,
        220
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Function to get the splitted grn\"].json[\"dms_url\"]}}/items/sdm_shipment_items?filter={\"_and\": [{\"sdm_shipments_id\":{\"invoice_number\":{\"_eq\":\"{{$node[\"Function to get the splitted grn\"].json[\"vendor_invoice\"]}}\"}}},{\"sdm_po_items_id\":{\"product\":{\"_eq\":\"{{$node[\"Function to get the splitted grn\"].json[\"product\"]}}\"}}},{\"sdm_shipments_id\":{\"vendor_po_num\":{\"_eq\":\"{{$node[\"Function to get the splitted grn\"].json[\"vendor_po\"]}}\"}}},{\"sdm_po_items_id\":{\"_eq\":\"{{$node[\"Function to get the splitted grn\"].json[\"po_item_id\"]}}\"}}]}",
        "options": {}
      },
      "name": "Get Shipment Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2840,
        220
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to get the splitted grn\"].json[\"dms_url\"]}}/items/sdm_shipment_items/{{$node[\"Get Shipment Items\"].json[\"data\"][0][\"id\"]}}?fields= *,sdm_shipments_id.*,sdm_shipments_id.shipment_items.*",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "received_qty",
              "value": "={{$node[\"Function to get the splitted grn\"].json[\"received_qty\"] != 0?$node[\"Get Shipment Items\"].json[\"data\"][0][\"received_qty\"]+parseFloat($node[\"Function to get the splitted grn\"].json[\"received_qty\"]):$node[\"Get Shipment Items\"].json[\"data\"][0][\"received_qty\"]}}"
            },
            {
              "name": "accepted_qty",
              "value": "={{$node[\"Function to get the splitted grn\"].json[\"accepted_qty\"] != 0?$node[\"Get Shipment Items\"].json[\"data\"][0][\"accepted_qty\"]+parseFloat($node[\"Function to get the splitted grn\"].json[\"accepted_qty\"]):$node[\"Get Shipment Items\"].json[\"data\"][0][\"accepted_qty\"]}}"
            },
            {
              "name": "rejected_qty",
              "value": "={{$node[\"Function to get the splitted grn\"].json[\"rejected_qty\"] != 0?$node[\"Get Shipment Items\"].json[\"data\"][0][\"rejected_qty\"]+parseFloat($node[\"Function to get the splitted grn\"].json[\"rejected_qty\"]):$node[\"Get Shipment Items\"].json[\"data\"][0][\"rejected_qty\"]}}"
            },
            {
              "name": "remaining_qty",
              "value": "={{$node[\"Function to get the splitted grn\"].json[\"accepted_qty\"] != 0?$node[\"Get Shipment Items\"].json[\"data\"][0][\"remaining_qty\"]+parseFloat($node[\"Function to get the splitted grn\"].json[\"accepted_qty\"]):$node[\"Get Shipment Items\"].json[\"data\"][0][\"remaining_qty\"]}}"
            },
            {
              "name": "grn_number",
              "value": "={{$node[\"Get Shipment Items\"].json[\"data\"][0][\"grn_number\"]?$node[\"Get Shipment Items\"].json[\"data\"][0][\"grn_number\"].includes($node[\"Function to get the splitted grn\"].json[\"grn_number\"])?$node[\"Get Shipment Items\"].json[\"data\"][0][\"grn_number\"]:$node[\"Get Shipment Items\"].json[\"data\"][0][\"grn_number\"]+\",\"+$node[\"Function to get the splitted grn\"].json[\"grn_number\"]:$node[\"Function to get the splitted grn\"].json[\"grn_number\"]}}"
            },
            {
              "name": "grn_date",
              "value": "={{$node[\"Function to get the splitted grn\"].json[\"grn_date\"]}}"
            }
          ]
        }
      },
      "name": "Update shipment Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3020,
        220
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let grnData = $node[\"Function to get grn data\"].json[\"result\"];\nlet currentIndex = $node[\"Start Loop\"].json[\"index\"];\nlet currentGrn = grnData[currentIndex];\nlet productIds = [];\ncurrentGrn.forEach(function(grn,index){\n  productIds.push(grn.product)\n})\n\n\nreturn [{\n    json: {\n        productIds: productIds,\n        currentGrn : currentGrn\n    },\n}];"
      },
      "name": "Function to get product ids",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4560,
        180
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Function to get the splitted grn\"].json[\"dms_url\"]}}/items/sdm_inventory?filter={\"product\":{\"_in\":\"{{$node[\"Function to get product ids\"].json[\"productIds\"]}}\"}}",
        "options": {}
      },
      "name": "Get the inventory items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4840,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let currentGrn = $node[\"Function to get product ids\"].json[\"currentGrn\"];\nlet productIds = $node[\"Function to get product ids\"].json[\"productIds\"];\nlet inventoryItems = $node[\"Get the inventory items\"].json[\"data\"];\nlet updateInventoryObj = [];\nlet returnItems = [];\ninventoryItems.forEach(function(inventoryItem,index){\n    let matchedProductPlant = currentGrn.filter(grn=>inventoryItem.product == grn.product && inventoryItem.plant == grn.plant && grn.movement_type == \"accepted\");\n    if(matchedProductPlant.length>0){\n        let totalQty = matchedProductPlant.reduce((total,obj)=>obj.qty+ total, 0) \n        updateInventoryObj.push({\n            id:inventoryItem.id,\n            current_stock:parseFloat(inventoryItem.current_stock) + totalQty,\n            sd_consignment_stock : parseFloat(inventoryItem.sd_consignment_stock) + totalQty,\n            item_status : \"po_not_generated\"\n        })\n    }\n    \n})\nupdateInventoryObj.forEach(function(obj,index){  \n    returnItems.push({\n    json: {\n       id:obj[\"id\"],\n       current_stock:obj[\"current_stock\"],\n       item_status:obj[\"item_status\"],\n       sd_consignment_stock:obj[\"sd_consignment_stock\"],\n       dms_url : $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]\n    }\n  });\n  \n})\n\nreturn returnItems;"
      },
      "name": "Function to return updated inventory stock",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        5080,
        180
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to return updated inventory stock\"].json[\"dms_url\"]}}/items/sdm_inventory/{{$node[\"Function to return updated inventory stock\"].json[\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "current_stock",
              "value": "={{$node[\"Function to return updated inventory stock\"].json[\"current_stock\"]}}"
            },
            {
              "name": "item_status",
              "value": "={{$node[\"Function to return updated inventory stock\"].json[\"item_status\"]}}"
            },
            {
              "name": "sd_consignment_stock",
              "value": "={{$node[\"Function to return updated inventory stock\"].json[\"sd_consignment_stock\"]}}"
            }
          ]
        }
      },
      "name": "Update Inventory Current stock",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5500,
        40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let invoiceData = [];\nlet returnItems = [];\nitems.forEach((item, index) => {\n  //productIds.push(item.json[\"Material\"])\n  invoiceData.push({\n    invoice_number_id  : item.json.data.sdm_shipments_id.id,\n    shipment_items :item.json[\"data\"][\"sdm_shipments_id\"][\"shipment_items\"] ,\n    vendor_po : item.json[\"data\"][\"sdm_shipments_id\"][\"vendor_po_num\"],\n    invoice_number : item.json.data.sdm_shipments_id.invoice_number,\n    sdm_po_items_id : item.json.data.sdm_po_items_id,\n    accepted_qty : item.json.data.accepted_qty,\n    rejected_qty : item.json.data.rejected_qty,\n    received_qty : item.json.data.received_qty,\n  })\n})\nuniqueArr = Object.create(null),\n    uniqueShipmentArr = invoiceData.filter(o => {\n        var key = ['invoice_number_id'].map(k => o[k]).join('|');\n        if (!uniqueArr[key]) {\n            uniqueArr[key] = true;\n            return true;\n        }\n    });\n\n\nuniqueShipmentArr.forEach(function(obj,index){\n    let shipmentStatus = '';\n    let matchedShipmentItems = invoiceData.filter(invoice=>invoice.invoice_number_id == obj.invoice_number_id);\n    let lastValue = matchedShipmentItems[matchedShipmentItems.length - 1];\n\n    let shipmentItems = lastValue.shipment_items\n    let shipmentItemLength = shipmentItems.length;\n    let grnAcceptedItems = shipmentItems.filter(item=>item.grn_status == \"grn_accepted\" || item.resolution==\"close_transaction\");\n    if(shipmentItemLength == grnAcceptedItems.length ){\n      let grnRejectedItems = shipmentItems.filter(item=>item.grn_status == \"grn_rejected\");\n      let grnPartiallyAcceptedItems = shipmentItems.filter(item=>item.grn_status == \"grn_partially_accepted\");\n      let grnCompletedItems = shipmentItems.filter(item=>item.grn_status == \"grn_accepted\");\n      if(shipmentItemLength == grnCompletedItems.length){\n        shipmentStatus = \"grn_completed\"\n      }else if(shipmentItemLength == grnRejectedItems.length){\n        shipmentStatus = \"grn_cancelled\"\n      }else if(grnPartiallyAcceptedItems>0 || grnCompletedItems.length>0){\n        shipmentStatus = \"grn_partially_accepted\"\n      }\n      \n    }else {\n      shipmentStatus = \"grn_pending\"\n    }\n    returnItems.push({\n    json: {\n       id : obj.invoice_number_id,\n       shipment_status:shipmentStatus,\n       dms_url : $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]\n    }\n  });\n  \n})\n\n\nitems[0].json.invoiceData = invoiceData;\nitems[0].json.returnItems = returnItems;\nreturn items;"
      },
      "name": "Function to get vendor invoices",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3300,
        220
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to update grn in mozart\"].json[\"dms_url\"]}}/items/sdm_shipments/{{$node[\"Function to update grn in mozart\"].json[\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "shipment_status",
              "value": "={{$node[\"Function to update grn in mozart\"].json[\"shipment_status\"]}}"
            },
            {
              "name": "grn_received",
              "value": "={{true}}"
            }
          ]
        }
      },
      "name": "Update shipment status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4320,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-grn-data",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        300
      ],
      "webhookId": "b75f36db-42f3-4cce-acdc-dafa29787f5a"
    },
    {
      "parameters": {
        "operation": "move",
        "path": "=Grn-Report-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}",
        "toPath": "=Grn-report-old-qa/{{$node[\"Combine Items\"].json[\"excelData\"][0][\"file_name\"]}}"
      },
      "name": "Move All Files",
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        1920,
        100
      ],
      "executeOnce": true,
      "credentials": {
        "nextCloudApi": {
          "id": "43",
          "name": "SD Cloud"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let returnItems = [];\nlet shipmentItemData = $node[\"Function to get vendor invoices\"].json[\"invoiceData\"];\nshipmentItemData.forEach(function(obj,index){\n  returnItems.push({\n    json: {\n       invoice_number : obj.invoice_number,\n       sdm_po_items_id:obj.sdm_po_items_id,\n       accepted_qty : obj.accepted_qty,\n       rejected_qty : obj.rejected_qty,\n       received_qty : obj.received_qty,\n       vendor_url : $node[\"Get url and token\"].json[\"0\"][\"vendor_panel_url\"]\n    }\n  });\n})\n\nreturn returnItems;"
      },
      "name": "Function to update grn in vpanel",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3480,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Function to update grn in vpanel\"].json[\"vendor_url\"]}}/items/sdv_shipment_items?filter={\"_and\": [{\"sdv_shipments_id\":{\"invoice_number\":{\"_eq\":\"{{$node[\"Function to update grn in vpanel\"].json[\"invoice_number\"]}}\"}}},{\"sdv_vendor_pos_sdv_products_id\":{\"po_items_id\":{\"_eq\":\"{{$node[\"Function to update grn in vpanel\"].json[\"sdm_po_items_id\"]}}\"}}}]}",
        "options": {}
      },
      "name": "Get the shipmentItem from vpanel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3660,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to update grn in vpanel\"].json[\"vendor_url\"]}}/items/sdv_shipment_items/{{$node[\"Get the shipmentItem from vpanel\"].json[\"data\"][0][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "received_qty",
              "value": "={{$node[\"Function to update grn in vpanel\"].json[\"received_qty\"]}}"
            },
            {
              "name": "accepted_qty",
              "value": "={{$node[\"Function to update grn in vpanel\"].json[\"accepted_qty\"]}}"
            },
            {
              "name": "rejected_qty",
              "value": "={{$node[\"Function to update grn in vpanel\"].json[\"rejected_qty\"]}}"
            }
          ]
        }
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3840,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "51",
          "name": "VendorPanel DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let returnItems = $node[\"Function to get vendor invoices\"].json[\"returnItems\"];\r\n\r\nreturn returnItems"
      },
      "name": "Function to update grn in mozart",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4100,
        180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Function to return updated inventory stock\"].json?true:false}}"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        5260,
        180
      ]
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        5500,
        240
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to get the splitted grn\"].json[\"dms_url\"]}}/items/sdm_shipment_items/{{$node[\"Update shipment Items\"].json[\"data\"][\"id\"]}}?fields= *,sdm_shipments_id.*,sdm_shipments_id.shipment_items.*",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "grn_status",
              "value": "={{$node[\"Update shipment Items\"].json[\"data\"][\"accepted_qty\"] >= $node[\"Update shipment Items\"].json[\"data\"][\"shipment_qty\"]?\"grn_accepted\":$node[\"Update shipment Items\"].json[\"data\"][\"rejected_qty\"] >= $node[\"Update shipment Items\"].json[\"data\"][\"shipment_qty\"]?\"grn_rejected\":$node[\"Update shipment Items\"].json[\"data\"][\"accepted_qty\"]>0 && $node[\"Update shipment Items\"].json[\"data\"][\"accepted_qty\"]<$node[\"Update shipment Items\"].json[\"data\"][\"shipment_qty\"]?\"grn_partially_accepted\":$node[\"Update shipment Items\"].json[\"data\"][\"grn_status\"]}}"
            }
          ]
        }
      },
      "name": "Update Shipment item grn status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3180,
        -160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let grnData = $node[\"Function to get grn data\"].json[\"result\"];\nlet currentIndex = $node[\"Start Loop\"].json[\"index\"];\nlet currentGrn = grnData[currentIndex];\nlet orderInvoices = [];\nlet dms_url = $node[\"Get url and token\"].json[\"0\"][\"mozart_url\"]\ncurrentGrn.forEach(function(grn,index){\n  if(!grn.vendor_invoice || !grn.vendor_po){\n    orderInvoices.push(grn.sd_invoice_nummber);\n  }\n})\n\nitems[0].json.dms_url = dms_url;\nitems[0].json.orderInvoices = orderInvoices;\nreturn items;"
      },
      "name": "Function to get non-consignment items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2400,
        220
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Function to get non-consignment items\"].json[\"dms_url\"]}}/items/sdm_order_invoices?filter={\"id\":{\"_in\":\"{{$node[\"Function to get non-consignment items\"].json[\"orderInvoices\"]}}\"}}&fields=*,order.*,order.shipments.sdm_shipments_id.*",
        "options": {}
      },
      "name": "Get the invoice and po",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2560,
        -40
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "80",
          "name": "Mozart qa creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Function to get the splitted grn\"].json[\"dms_url\"]}}/items/sdm_shipment_items/{{$node[\"Update Shipment item grn status\"].json[\"data\"][\"id\"]}}?fields= *,sdm_shipments_id.*,sdm_shipments_id.shipment_items.*",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "resolution",
              "value": "={{$node[\"Update Shipment item grn status\"].json[\"data\"][\"grn_status\"] == \"grn_pending\" && $node[\"Update Shipment item grn status\"].json[\"data\"][\"received_qty\"] <  $node[\"Update Shipment item grn status\"].json[\"data\"][\"shipment_qty\"]?$node[\"Update Shipment item grn status\"].json[\"data\"][\"resolution\"]:$node[\"Update Shipment item grn status\"].json[\"data\"][\"grn_status\"] == \"grn_partially_accepted\" && $node[\"Update Shipment item grn status\"].json[\"data\"][\"accepted_qty\"] < $node[\"Update Shipment item grn status\"].json[\"data\"][\"received_qty\"]?\"resolution_pending\": $node[\"Update Shipment item grn status\"].json[\"data\"][\"grn_status\"] == \"grn_rejected\" ? $node[\"Update Shipment item grn status\"].json[\"data\"][\"resolution\"]:null}}"
            }
          ]
        }
      },
      "name": "Update resolution status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3400,
        -160
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "50",
          "name": "Mozart DMS Token"
        }
      }
    }
  ],
  "settings": {
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-08-04T12:37:12.713Z"
}