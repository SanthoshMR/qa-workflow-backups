{
  "active": true,
  "connections": {
    "Globals": {
      "main": [
        [
          {
            "node": "Check for order and sku",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for order": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current time": {
      "main": [
        [
          {
            "node": "Check for gift card",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for gift card": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Function to get keys",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check for gift card amount",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to get keys": {
      "main": [
        [
          {
            "node": "Update the order_id and status ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the order_id and status ": {
      "main": [
        [
          {
            "node": "Function for sending gift card to sds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for order and sku": {
      "main": [
        [
          {
            "node": "Check for order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for order": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get current time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for gift card amount": {
      "main": [
        [
          {
            "node": "Get Voucher from VPP API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF UNIQUE REF ID": {
      "main": [
        [
          {
            "node": "send gift card to sds",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Order Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Details": {
      "main": [
        [
          {
            "node": "send gift card to sds1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Voucher from VPP API": {
      "main": [
        [
          {
            "node": "IF SUCCESS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF SUCCESS": {
      "main": [
        [
          {
            "node": "IF UNIQUE REF ID",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Reference Number",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error": {
      "main": [
        [
          {
            "node": "Check Vendor Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Vendor Status": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Failed Orders": {
      "main": [
        [
          {
            "node": "IF UNIQUE REF ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "IF UNIQUE REF ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Failed Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Reference Number": {
      "main": [
        [
          {
            "node": "IF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF2": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-06-08T09:59:06.769Z",
  "id": "132",
  "name": "Send gift card to sds",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -360,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "dms_url",
              "value": "={{$node[\"Wait for order\"].json[\"headers\"][\"x-sd-env\"] === \"prod\" ?\"https://zeus.shakedeal.com\":\"https://zeusqa.shakedeal.com\"}}"
            },
            {
              "name": "n8n_url",
              "value": "={{$node[\"Wait for order\"].json[\"headers\"][\"x-sd-env\"] === \"prod\" ?\"https://athena.shakedeal.com\":\"https://qan8n.shakedeal.com\"}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        80,
        280
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "check_gift_card",
        "responseMode": "lastNode",
        "responseData": "allEntries",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "X-SD-gift-card",
                "value": "=8ff81wb0-5b1d-486k-9ca6-a4b7fhba49ba"
              }
            ]
          }
        }
      },
      "name": "Wait for order",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -120,
        280
      ],
      "webhookId": "7ef2430a-40e8-436d-9a36-2163079a599b",
      "credentials": {
        "httpBasicAuth": {
          "id": "2",
          "name": "SD Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_gift_card_inventory?filter={\"_and\": [{\"gift_card\": {\"_eq\":false}},{\"product_code\":{\"_eq\":\"{{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]}}\"}},{\"validity\":{\"_gt\":\"{{$node[\"Get current time\"].json[\"time\"]}}\"}},{\"link_reference_id\":{\"_null\":true}}]}&sort=date_created&limit={{$node[\"Wait for order\"].json[\"body\"][\"quantity\"]}}",
        "options": {}
      },
      "name": "Check for gift card",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        940,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let time = new Date()\nlet slack_text = \"\";\n\ntime.setHours(time.getHours() + 5);\ntime.setMinutes(time.getMinutes() + 30);\n\nitems[0].json.time = time\n\nreturn items;"
      },
      "name": "Get current time",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let gift_card = [];\nlet data = $node[\"Check for gift card\"].json.data\n\nif(data.length && data.length == $node[\"Wait for order\"].json[\"body\"][\"quantity\"] ){\n  data.forEach(function(obj,index){\n    gift_card[index]={};\n    gift_card[index].cardNumber = obj.code;\n    gift_card[index].validity = obj.validity;\n    gift_card[index].amount = obj.price\n    gift_card[index].cardPin = obj.pin;\n    gift_card[index].sku = obj.product_code;\n  })\n}\n\nitems[0].json.cards = gift_card;\nreturn items;"
      },
      "name": "Function for sending gift card to sds",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1760,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{parseInt($node[\"Wait for order\"].json[\"body\"][\"quantity\"])}}",
              "operation": "equal",
              "value2": "={{$node[\"Check for gift card\"].json[\"data\"].length}}"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1140,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "let data = $node[\"Check for gift card\"].json.data\nlet keys = [];\nlet req_body = {};\nlet gift_card_status = {\n    \"gift_card\": true,\n    \"order_id\" : $node[\"Wait for order\"].json[\"body\"][\"order_id\"],\n    \"client\" : $node[\"Wait for order\"].json[\"body\"][\"client\"]\n}\ndata.forEach(function(obj,index){\n    keys.push(obj.id)\n})\nreq_body.keys = keys;\nreq_body.data = gift_card_status;\n\nitems[0].json.keys = keys;\nitems[0].json.req_body = req_body;\nreturn items;"
      },
      "name": "Function to get keys",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_gift_card_inventory",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to get keys\"].json[\"req_body\"]}}"
      },
      "name": "Update the order_id and status ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1560,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_gift_card_inventory?filter={\"_and\": [{\"order_id\": {\"_eq\":\"{{$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}\"}},{\"product_code\":{\"_eq\":\"{{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]}}\"}}]}&sort=date_created",
        "options": {}
      },
      "name": "Check for order and sku",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        260,
        280
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for order and sku\"].json[\"data\"].length}}",
              "operation": "larger",
              "value2": "={{0}}"
            }
          ]
        }
      },
      "name": "Check for order",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        440,
        280
      ]
    },
    {
      "parameters": {
        "functionCode": "let gift_card = [];\nlet data = $node[\"Check for order and sku\"].json.data\n\ndata.forEach(function(obj,index){\n  gift_card[index]={};\n  gift_card[index].cardNumber = obj.code;\n  gift_card[index].validity = obj.validity;\n  gift_card[index].amount = obj.price\n  gift_card[index].cardPin = obj.pin;\n  gift_card[index].sku = obj.product_code;\n})\n\n\nitems[0].json.cards = gift_card;\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        700,
        120
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/vpp/get-vouchers",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={\n\t\"required_vouchers\": [\n         {\n           \"sku\": \"{{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]}}\",\n           \"qty\": {{$node[\"Wait for order\"].json[\"body\"][\"quantity\"]}},\n           \"amt\": {{$node[\"Check for gift card amount\"].json[\"data\"][0]?$node[\"Check for gift card amount\"].json[\"data\"][0][\"amount\"]*1:0}}\n          }\n     ],\n\t \"options\": {\n\t \t\"redeemed\": true,\n        \"retrieveIfRedeemed\": true,\n        \"reference_id\":\"{{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]+\"-\"+$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}\", \n\t \t\"order_id\": {{$node[\"Wait for order\"].json[\"body\"][\"order_id\"]?$node[\"Wait for order\"].json[\"body\"][\"order_id\"]+\"\":null}},\n\t    \"extra\": {\n               \"client\": \"{{$node[\"Wait for order\"].json[\"body\"][\"client\"]}}\",\n               \"voucher_order_type\" :  \"{{$node[\"Wait for order\"].json[\"body\"][\"voucher_delivery_type\"]}}\"\n\t\t}\t\t\t\n\t }\n}"
      },
      "name": "Get Voucher from VPP API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1640,
        500
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_brand_sku_mapping?filter={\"_and\": [{\"sku\":{\"_eq\":\"{{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]}}\"}}]}",
        "options": {}
      },
      "name": "Check for gift card amount",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1340,
        500
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let gift_card = [];\nconst isSuccess = $node[\"Get Voucher from VPP API\"].json[0][\"success\"];\nconst isException = $node[\"Get Voucher from VPP API\"].json[0][\"exception\"];\nconst statusCodeFromVendor = $node[\"Get Voucher from VPP API\"].json[0][\"statusCodeFromVendor\"];\nconst message = $node[\"Get Voucher from VPP API\"].json[0][\"message\"].toLowerCase();\nconst vendorCode = $node[\"Get Voucher from VPP API\"].json[0][\"vendorCode\"] \nconst try_qwikcilver = (isSuccess==false && !vendorCode && !isException && (!message.includes(\"unique reference id\") || !statusCodeFromVendor==5313))? true: false;\n\n// Below 3 variables required only for success case from work advantage\nconst vouchers = isSuccess? $node[\"Get Voucher from VPP API\"].json[0][\"response\"]: [];\nconst amount = isSuccess? $node[\"Check for gift card amount\"].json[\"data\"][0][\"amount\"]*1: null;\nconst productCode = isSuccess? $node[\"Wait for order\"].json[\"body\"][\"product_code\"]: null;\nconst order_type = $node[\"Wait for order\"].json[\"body\"][\"voucher_delivery_type\"];\n\nif(isSuccess){\n  vouchers.forEach((obj,index)=>{\n    gift_card[index]={};\n    gift_card[index].cardNumber = order_type == 'Link' ? \"\" : obj.code;\n    gift_card[index].validity = obj.expiry;\n    gift_card[index].cardPin = order_type == 'Link' ? \"\" : obj.pin;\n    gift_card[index].amount = amount;\n    gift_card[index].sku = productCode;\n    gift_card[index].reference_number = order_type == 'Link' ? obj.link_reference_id : \"\";\n    gift_card[index].secret_pin = order_type == 'Link' ? obj.reference_code_otp : \"\";\n  });\n}\n\nif(!items[0].json || !items[0].json[0]) { items[0].json = []; items[0].json[0] = {} }\n\nitems[0].json[0].cards = gift_card;\nitems[0].json[0].try_qwikcilver = try_qwikcilver;\nreturn items[0].json;\n\n// items[0].json.cards = gift_card;\n// return items;"
      },
      "name": "send gift card to sds",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3200,
        460
      ]
    },
    {
      "parameters": {
        "url": "https://httpstat.us/504",
        "options": {}
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1440,
        1000
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{!$node[\"Get Voucher from VPP API\"].json[0][\"message\"].toLowerCase().includes(\"unique reference id\")}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF UNIQUE REF ID",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2780,
        480
      ]
    },
    {
      "parameters": {
        "functionCode": "let gift_card = [];\nconst isSuccess = $node[\"Get Order Details\"].json[\"success\"];\nconst message = $node[\"Get Voucher from VPP API\"].json[0][\"message\"].toLowerCase();\nconst isUniqueRefId = !message.includes(\"unique reference id\");\nconst try_qwikcilver = false\n\n// Below 3 variables required only for success case from work advantage\nconst vouchers = isSuccess? $node[\"Get Order Details\"].json[\"response\"]: [];\nconst amount = isSuccess? $node[\"Check for gift card amount\"].json[\"data\"][0][\"amount\"]*1: null;\nconst productCode = isSuccess? $node[\"Wait for order\"].json[\"body\"][\"product_code\"]: null;\nconst order_type = $node[\"Wait for order\"].json[\"body\"][\"voucher_delivery_type\"];\n\n\nif(isSuccess){\n  vouchers.forEach((obj,index)=>{\n    gift_card[index]={};\n    gift_card[index].cardNumber = order_type == 'Link' ? \"\" : obj.code;\n    gift_card[index].validity = obj.expiry;\n    gift_card[index].cardPin = order_type == 'Link' ? \"\" : obj.pin;\n    gift_card[index].amount = amount\n    gift_card[index].sku = productCode;\n    gift_card[index].reference_number = order_type == 'Link' ? obj.link_reference_id : \"\";\n    gift_card[index].secret_pin = order_type == 'Link' ? obj.reference_code_otp : \"\";\n  });\n}\n\nif(!items[0].json || !items[0].json[0]) { items[0].json = []; items[0].json[0] = {} }\n\nitems[0].json[0].cards = gift_card;\nitems[0].json[0].try_qwikcilver = try_qwikcilver;\nreturn items[0].json;"
      },
      "name": "send gift card to sds1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3200,
        660
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{ $node[\"Globals\"].json[\"n8n_url\"] + \"/webhook/get-vendor-order-details\" }}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "vendor_api_int_id",
              "value": "={{$node[\"Get Voucher from VPP API\"].json[0][\"vendorCode\"]}}"
            },
            {
              "name": "reference_id",
              "value": "={{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]+\"-\"+$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}"
            },
            {
              "name": "order_id",
              "value": "={{$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}"
            },
            {
              "name": "product_code",
              "value": "={{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]}}"
            },
            {
              "name": "client",
              "value": "={{$node[\"Wait for order\"].json[\"body\"][\"client\"]}}"
            },
            {
              "name": "price",
              "value": "={{$node[\"Check for gift card amount\"].json[\"data\"][0][\"amount\"]*1}}"
            }
          ]
        }
      },
      "name": "Get Order Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2980,
        660
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$node[\"Get Voucher from VPP API\"].json[0][\"success\"]}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF SUCCESS",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1860,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_error_log",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={\n     \"collection_name\": \"NA\",\n     \"error\": \"Send Gift Card to SDS: OrderId: {{$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}, Msg: {{$node[\"Get Voucher from VPP API\"].json[0][\"message\"]}}, ExecId: {{$executionId}}\"\n}"
      },
      "name": "Log Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1740,
        840
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Get Voucher from VPP API\"].json[\"0\"][\"orderStatusFromVendor\"]}}",
              "value2": "=PROCESSING"
            }
          ]
        }
      },
      "name": "Check Vendor Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1960,
        840
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_failed_orders",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "reference_number",
              "value": "={{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]+\"-\"+$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}"
            },
            {
              "name": "message",
              "value": "={{$node[\"Get Voucher from VPP API\"].json[\"0\"][\"message\"]}}"
            },
            {
              "name": "vendor_code",
              "value": "={{$node[\"Get Voucher from VPP API\"].json[\"0\"][\"vendorCode\"]}}"
            }
          ]
        }
      },
      "name": "Save Failed Orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2280,
        860
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_failed_orders?filter={\"reference_number\": {\"_eq\": \"{{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]+\"-\"+$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}\"}}",
        "options": {}
      },
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2020,
        1080
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"HTTP Request1\"].json[\"data\"].length}}",
              "operation": "largerEqual",
              "value2": "={{1}}"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2240,
        1100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_failed_orders?filter={\"reference_number\": {\"_eq\": \"{{$node[\"Wait for order\"].json[\"body\"][\"product_code\"]+\"-\"+$node[\"Wait for order\"].json[\"body\"][\"order_id\"]}}\"}}",
        "options": {}
      },
      "name": "Check Reference Number",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2260,
        260
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check Reference Number\"].json[\"data\"].length}}",
              "operation": "largerEqual",
              "value2": "={{1}}"
            }
          ]
        }
      },
      "name": "IF2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2500,
        260
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_failed_orders/{{$node[\"Get Details From Serial\"].json[\"data\"][0][\"id\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "send_email",
              "value": "=true"
            }
          ]
        }
      },
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2760,
        240
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "75",
          "name": "Vendor Partner Program Zeus QA"
        }
      }
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [
    {
      "id": "6",
      "name": "Inventory",
      "createdAt": "2022-06-27T13:07:10.771Z",
      "updatedAt": "2022-06-27T13:07:10.771Z"
    }
  ],
  "updatedAt": "2024-03-06T11:39:20.185Z"
}