{
  "active": false,
  "connections": {
    "access token generated by refresh token": {
      "main": [
        [
          {
            "node": "Check for Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create item": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create contact": {
      "main": [
        [
          {
            "node": "Function for item objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create contact": {
      "main": [
        [
          {
            "node": "create contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create invoice ": {
      "main": [
        [
          {
            "node": "create invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create invoice": {
      "main": [
        [
          {
            "node": "Post E-Invoice ID and E-Invoice status to DMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create bills": {
      "main": [
        [
          {
            "node": "create bills",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Function to create bills",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wait for order data": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Function to create contact",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function for item objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Customer": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for item": {
      "main": [
        [
          {
            "node": "Condition for creating item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for creating item": {
      "main": [
        [
          {
            "node": "Function for create item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Existing Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for create item": {
      "main": [
        [
          {
            "node": "create item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for item objects": {
      "main": [
        [
          {
            "node": "Check for item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Function to create invoice ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "access token generated by refresh token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Existing Products": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Post E-Invoice ID and E-Invoice status to DMS": {
      "main": [
        [
          {
            "node": "Get product codes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get product codes": {
      "main": [
        [
          {
            "node": "Check for items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for items": {
      "main": [
        [
          {
            "node": "Function to create products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create products": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Create the products",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create the products": {
      "main": [
        [
          {
            "node": "Check for order in order_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Check for order in order_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for order in order_items": {
      "main": [
        [
          {
            "node": "Condition for order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for order": {
      "main": [
        [
          {
            "node": "Create the order in order_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create the order in order_items": {
      "main": [
        [
          {
            "node": "Function for creating order product mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for creating order product mapping": {
      "main": [
        [
          {
            "node": "Create the order product mapping in order_items_sd_order_products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2021-07-15T12:42:13.721Z",
  "id": "76",
  "name": "E-Invoice: Generate Invoice in Zoho Books",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -620,
        10
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://accounts.zoho.com/oauth/v2/token\n",
        "options": {},
        "headerParametersUi": {
          "parameter": []
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "client_id",
              "value": "1000.QYWLRL3RGVH2ZLK7C41R8UBPT4BQZJ"
            },
            {
              "name": "grant_type",
              "value": "refresh_token"
            },
            {
              "name": "redirect_uri",
              "value": "http://localhost:5678/webhook-test/sd_invoice"
            },
            {
              "name": "client_secret",
              "value": "be901703a49ba9941327f2c339bfc07b3f7ee1ac29"
            },
            {
              "name": "refresh_token",
              "value": "1000.ddf78a1b78700ae834aa72c9493cf300.728d6fc573f708e2819b7e4c58440c8b"
            }
          ]
        }
      },
      "name": "access token generated by refresh token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -140,
        350
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://invoice.zoho.com/api/v3/contacts?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "billing_address",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"billing_address\"]}}"
            },
            {
              "name": "shipping_address",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"shipping_address\"]}}"
            },
            {
              "name": "contact_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"company_name\"]}}"
            },
            {
              "name": "first_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"first_name\"]}}"
            },
            {
              "name": "last_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"last_name\"]}}"
            },
            {
              "name": "email",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"email\"]}}"
            },
            {
              "name": "mobile",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"mobile\"]}}"
            }
          ]
        }
      },
      "name": "create contact",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        620,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://invoice.zoho.com/api/v3/items?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "batchInterval": 3000,
          "batchSize": 1,
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function for create item\"].json[\"0\"]}}"
      },
      "name": "create item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1520,
        210
      ],
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 2000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://invoice.zoho.com/api/v3/invoices?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "customer_id",
              "value": "={{$node[\"Function to create invoice \"].json[\"customer_id\"]}}"
            },
            {
              "name": "line_items",
              "value": "={{$node[\"Function to create invoice \"].json[\"line_items\"]}}"
            },
            {
              "name": "invoice_number",
              "value": "={{$node[\"Function to create invoice \"].json[\"invoice_number\"]}}"
            },
            {
              "name": "reference_number",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"po_number\"]}}"
            },
            {
              "name": "custom_fields",
              "value": "={{$node[\"Function to create invoice \"].json[\"custom_fields\"]}}"
            },
            {
              "name": "date",
              "value": "={{$node[\"Function to create invoice \"].json[\"invoice_date\"]}}"
            }
          ]
        }
      },
      "name": "create invoice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2160,
        360
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let contact_name=$node[\"wait for order data\"].json[\"body\"][\"contact_name\"]\nlet JSONString={\n  \"contact_name\":contact_name\n }\n items[0].json.JSONString=JSONString;\nreturn items;"
      },
      "name": "Function to create contact",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        410,
        180
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet inv_num=$node[\"wait for order data\"].json[\"body\"][\"invoice_number\"]\nlet pro_items=$node[\"wait for order data\"].json[\"body\"][\"line_items\"]\nconst id= [];\nconst custom_fields=[];\nlet contact_id=\"\"\ncustom_fields.push({\n    label:$node[\"Globals\"].json[\"order_number_label\"],\n    value:$node[\"wait for order data\"].json[\"body\"][\"order_number\"]\n})\nfor (const [index,item] of items.entries()) {\n  if(item.json.hasOwnProperty(\"code\")){\n     let list = pro_items.find(data=>data.name === (item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"name\"]:item.json[\"items\"][0][\"item_name\"]))\n     id.push(\n     {\n         item_id: item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"item_id\"]:item.json[\"items\"][0][\"item_id\"],\n         quantity:list[\"quantity\"],\n         rate:list[\"rate\"]\n     }); \n  }   \n}\nif($node[\"Check for Customer\"].json[\"contacts\"].length!==0){\n    contact_id=$node[\"Check for Customer\"].json[\"contacts\"][0][\"contact_id\"]\n}else{\n    contact_id=$node[\"create contact\"].json[\"contact\"][\"contact_id\"]\n}\nlet invoice_obj={\n \"customer_id\":contact_id,\n  \"line_items\":id,\n \"invoice_number\":inv_num,\n \"invoice_date\":$node[\"wait for order data\"].json[\"body\"][\"invoice_date\"],\n \"custom_fields\":custom_fields\n}  \nlet returnItems = []\nreturnItems.push({\njson:invoice_obj\n})\nreturn returnItems ;\n"
      },
      "name": "Function to create invoice ",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1920,
        370
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://books.zoho.com/api/v3/bills?organization_id=750449985",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function for create item to create bills\"].json[\"JSONString\"]}}"
      },
      "name": "create bills",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2400,
        140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "let cust_id=$node[\"create contact\"].json[\"contact\"][\"contact_id\"]\nlet items_obj=$node[\"create item\"].json[\"item\"][\"item_id\"]\nlet vend_id=$node[\"Set\"].json[\"vendor_id\"]\nlet pro_bill=$node[\"wait for order data\"].json[\"body\"][\"bill_number\"]\nlet JSONString={\n\"vendor_id\":vend_id,\n\"bill_number\":pro_bill,\n\"line_items\": [{\n\"item_id\":items_obj,\n\"customer_id\":cust_id\n}] \n}\nitems[0].json.JSONString=JSONString\nreturn items;\n"
      },
      "name": "Function to create bills",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2220,
        120
      ],
      "disabled": true
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "vendor_id",
              "value": "=2568462000000164553"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2040,
        120
      ],
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "invoice_bill",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "sd_invoice",
                "value": "7654329012347189"
              }
            ]
          }
        }
      },
      "name": "wait for order data",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -510,
        350
      ],
      "webhookId": "b30792e0-2878-4a2d-947b-3a200313ce70",
      "credentials": {
        "httpBasicAuth": {
          "id": "28",
          "name": "SD_Invoice_Bill creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "=https://dmsqa.shakedeal.com/items/orders/{{$node[\"wait for order data\"].json[\"body\"][\"order_number\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "e_invoice_id",
              "value": "={{$node[\"create invoice\"].json[\"invoice\"][\"invoice_id\"]}}"
            },
            {
              "name": "e_invoice_status",
              "value": "={{$node[\"create invoice\"].json[\"invoice\"][\"status\"]}}"
            },
            {
              "name": "invoice_number",
              "value": "={{$node[\"create invoice\"].json[\"invoice\"][\"invoice_number\"]}}"
            }
          ]
        }
      },
      "name": "Post E-Invoice ID and E-Invoice status to DMS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2380,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [],
          "number": [
            {
              "value1": "={{$node[\"Check for Customer\"].json[\"contacts\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        220,
        350
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://invoice.zoho.com/api/v3/contacts/?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "contact_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"company_name\"]}}"
            }
          ]
        }
      },
      "name": "Check for Customer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        70,
        350
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://invoice.zoho.com/api/v3/items?organization_id=776318483",
        "allowUnauthorizedCerts": true,
        "options": {},
        "headerParametersUi": {
          "parameter": []
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "name",
              "value": "={{$node[\"Function for item objects\"].json[\"0\"][\"name\"]}}"
            }
          ]
        }
      },
      "name": "Check for item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        980,
        370
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for item\"].json[\"items\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Condition for creating item",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1180,
        370
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "functionCode": "let list_items = $node[\"wait for order data\"].json[\"body\"][\"line_items\"]\n\nlet returnItems = []\nlet resultFilter = \n   list_items.filter(list=>\n      items.some(\n      data=> data.json[\"page_context\"][\"search_criteria\"][0][\"search_text\"] === list.name\n    )\n  );\nresultFilter .forEach(function(obj,index){  \n    returnItems.push({\n    json: [{\n       name:obj[\"name\"],\n       item_type :obj[\"item_type\"],\n       sku:obj[\"sku\"],\n       //hsn_or_sac:obj[\"hsn_or_sac\"]\n    }]\n  }); \n})\n\nreturn returnItems ;\n\n"
      },
      "name": "Function for create item",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1310,
        210
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "\nlet pro_type=$node[\"wait for order data\"].json[\"body\"][\"item_type\"]\nlet pro_items=$node[\"wait for order data\"].json[\"body\"][\"line_items\"]\nlet returnItems =[]\n\npro_items.forEach(function(obj,index){  \n    returnItems.push({\n    json: [{\n       name:obj[\"name\"],\n       rate:obj[\"rate\"],\n       sku:obj[\"sku\"],\n       item_type :obj[\"item_type\"] \n    }]\n  });\n  \n})\n\nreturn returnItems;"
      },
      "name": "Function for item objects",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        780,
        370
      ]
    },
    {
      "parameters": {},
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1660,
        370
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "order_number_label",
              "value": "=Shakedeal Order No"
            },
            {
              "name": "dms_url",
              "value": "=https://dmsqa.shakedeal.com"
            }
          ],
          "number": [
            {
              "name": "organization_id",
              "value": "={{776318483}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -320,
        350
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Existing Products",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1420,
        440
      ]
    },
    {
      "parameters": {
        "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\n/*for (item of items) {\n  item.json.myNewField = 1;\n}\n\n You can write logs to the browser console\nconsole.log('Done!');*/\nlet products = $node[\"wait for order data\"].json[\"body\"][\"line_items\"];\nlet product_codes = [];\nproducts.forEach(function(product,index){\n    product_codes.push(product.sku);\n})\n\nitems[0].json.products=products;\nitems[0].json.product_codes = product_codes;\n\nreturn items;"
      },
      "name": "Get product codes",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2580,
        380
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://dmsqa.shakedeal.com/items/sd_order_products?filter={\"product_code\":{\"_in\":\"{{$node[\"Get product codes\"].json[\"product_codes\"]}}\"}}",
        "options": {}
      },
      "name": "Check for items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2820,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let data = $node[\"Check for items\"].json.data;\nlet products = $node[\"wait for order data\"].json[\"body\"][\"line_items\"];\nlet action = \"\";\nlet products_to_post =[];\nlet filter_products = products.filter(product=>!data.some(item=>item.product_code == product.sku));\n\nif(filter_products.length){\n  action = \"post_products\" \n}else action = \"no_products_to_post\"\n\nif(filter_products.length){\n    filter_products.forEach(function(product,index){\n      products_to_post[index]={};\n      products_to_post[index].product_name = product.name;\n      products_to_post[index].product_code = product.sku;\n    })\n}\n\nitems[0].json.data= data\nitems[0].json.filter_products= filter_products;\nitems[0].json.products_to_post= products_to_post;\nitems[0].json.action = action;\nreturn items;"
      },
      "name": "Function to create products",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3060,
        380
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Function to create products\"].json[\"action\"]}}",
              "value2": "=post_products"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3260,
        380
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://dmsqa.shakedeal.com/items/sd_order_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create products\"].json[\"products_to_post\"]}}"
      },
      "name": "Create the products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3620,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3560,
        440
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://dmsqa.shakedeal.com/items/order_items?filter={\"order_id\":{\"_eq\":\"{{$node[\"wait for order data\"].json[\"body\"][\"order_number\"]}}\"}}",
        "options": {}
      },
      "name": "Check for order in order_items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3980,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for order in order_items\"].json[\"data\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Condition for order",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4240,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/order_items",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "order_id",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"order_number\"]}}"
            }
          ]
        }
      },
      "name": "Create the order in order_items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4560,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let existing_Products = $node[\"Check for items\"].json[\"data\"];\nlet created_products = $node[\"Create the products\"].json[\"data\"];\nlet all_products = [...existing_Products,...created_products];\nlet products = $node[\"wait for order data\"].json[\"body\"][\"line_items\"];\nlet orderId = $node[\"Create the order in order_items\"].json[\"data\"][\"id\"];\nlet order_product_obj = []\nall_products.forEach(function(product,index){\n  order_product_obj[index].order_items_id = orderId;\n  order_product_obj[index].sd_order_products_id = product.id;\n  let filter_product_obj = products.filter(obj=>obj.sku == product.product_code);\n  order_product_obj[index].req_quantity = filter_product_obj[0].quantity;\n  order_product_obj[index].product_total = filter_product_obj[0].rate;\n})\n\nitems[0].json.order_product_obj= order_product_obj\nitems[0].json.existing_Products= existing_Products;\nitems[0].json.created_products= created_products;\nitems[0].json.all_products= all_products;\nreturn items;"
      },
      "name": "Function for creating order product mapping",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4780,
        80
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/order_items_sd_order_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "= {{$node[\"Function for creating order product mapping\"].json[\"order_product_obj\"]}}"
      },
      "name": "Create the order product mapping in order_items_sd_order_products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5020,
        80
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [
    {
      "id": "1",
      "name": "E-invoice",
      "createdAt": "2022-04-25T07:09:37.693Z",
      "updatedAt": "2022-04-25T07:09:37.693Z"
    }
  ],
  "updatedAt": "2022-04-28T07:42:55.748Z"
}