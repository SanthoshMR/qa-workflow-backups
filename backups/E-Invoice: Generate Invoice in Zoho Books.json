{
  "active": true,
  "connections": {
    "access token generated by refresh token": {
      "main": [
        [
          {
            "node": "IF4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create item": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create contact": {
      "main": [
        [
          {
            "node": "Get taxes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create contact": {
      "main": [
        [
          {
            "node": "create contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create invoice ": {
      "main": [
        [
          {
            "node": "Get the invoice id by invoice number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create invoice": {
      "main": [
        [
          {
            "node": "Update billing address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wait for order data": {
      "main": [
        [
          {
            "node": "Condition for checking order_type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Function to create contact",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get taxes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Customer": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for item": {
      "main": [
        [
          {
            "node": "Condition for creating item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for creating item": {
      "main": [
        [
          {
            "node": "Function for create item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Existing Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for create item": {
      "main": [
        [
          {
            "node": "create item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for item objects": {
      "main": [
        [
          {
            "node": "Check for item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Function to create invoice ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "access token generated by refresh token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Existing Products": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Post E-Invoice ID and E-Invoice status to DMS": {
      "main": [
        [
          {
            "node": "Get product codes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get product codes": {
      "main": [
        [
          {
            "node": "Check for items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for items": {
      "main": [
        [
          {
            "node": "Function to create products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function to create products": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Create the products",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create the products": {
      "main": [
        [
          {
            "node": "Check for order in orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Check for order in orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function for creating order product mapping": {
      "main": [
        [
          {
            "node": "Create the order product mapping in order_items_sd_order_products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for order in orders": {
      "main": [
        [
          {
            "node": "IF3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the invoice id by invoice number": {
      "main": [
        [
          {
            "node": "IF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF2": {
      "main": [
        [
          {
            "node": "create invoice",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update the invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the invoice": {
      "main": [
        [
          {
            "node": "Post E-Invoice ID and E-Invoice status to DMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF3": {
      "main": [
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp1": {
      "main": [
        [
          {
            "node": "Function for creating order product mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Function for creating order product mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF4": {
      "main": [
        [
          {
            "node": "Get the invoice_id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp2": {
      "main": [
        [
          {
            "node": "Check for Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the invoice_id": {
      "main": [
        [
          {
            "node": "Delete the invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get taxes": {
      "main": [
        [
          {
            "node": "Function for item objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condition for checking order_type": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update billing address": {
      "main": [
        [
          {
            "node": "Update shipping address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update shipping address": {
      "main": [
        [
          {
            "node": "Post E-Invoice ID and E-Invoice status to DMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the invoice": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check invoice exists": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create E-invoice in tally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Check invoice exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create the order product mapping in order_items_sd_order_products": {
      "main": [
        [
          {
            "node": "Get the invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2021-07-15T12:42:13.721Z",
  "id": "76",
  "name": "E-Invoice: Generate Invoice in Zoho Books",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -620,
        10
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://accounts.zoho.com/oauth/v2/token\n",
        "options": {},
        "headerParametersUi": {
          "parameter": []
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "client_id",
              "value": "=1000.UF5SWAYP2AFJZY340NXOPSQEQ7RC8A"
            },
            {
              "name": "grant_type",
              "value": "=refresh_token"
            },
            {
              "name": "redirect_uri",
              "value": "https://qan8n.shakedeal.com/webhook/get_invoice_zoho"
            },
            {
              "name": "client_secret",
              "value": "=f17bf24f1a69269ca8134cd4771c4803505100ef2d"
            },
            {
              "name": "refresh_token",
              "value": "=1000.77e0d632e4a1d8df6bb963794b7094fc.6ed78cf03d146b533f2c7d7524c6d752"
            }
          ]
        }
      },
      "name": "access token generated by refresh token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -420,
        340
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/contacts?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "billing_address",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"billing_address\"]}}"
            },
            {
              "name": "shipping_address",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"shipping_address\"]}}"
            },
            {
              "name": "contact_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"company_name\"] +\"-\"+$node[\"wait for order data\"].json[\"body\"][\"place_of_supply\"]}}"
            },
            {
              "name": "first_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"first_name\"]}}"
            },
            {
              "name": "last_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"last_name\"]}}"
            },
            {
              "name": "email",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"email\"]}}"
            },
            {
              "name": "mobile",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"mobile\"]}}"
            },
            {
              "name": "place_of_contact",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"place_of_contact\"]}}"
            },
            {
              "name": "contact_type",
              "value": "={{$node[\"Function to create contact\"].json.contact_type}}"
            },
            {
              "name": "gst_no",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"gst_no\"]}}"
            },
            {
              "name": "gst_treatment",
              "value": "={{$node[\"Function to create contact\"].json.gst_treatment}}"
            },
            {
              "name": "pan_no",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"pan_no\"]}}"
            },
            {
              "name": "company_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"company_name\"]}}"
            }
          ]
        }
      },
      "name": "create contact",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        600,
        120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/items?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {
          "batchInterval": 2500,
          "batchSize": 1,
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={{$node[\"Function for create item\"].json[\"0\"]}}"
      },
      "name": "create item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1580,
        80
      ],
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 1000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "=https://books.zoho.com/api/v3/invoices?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "customer_id",
              "value": "={{$node[\"Function to create invoice \"].json[\"customer_id\"]}}"
            },
            {
              "name": "line_items",
              "value": "={{$node[\"Function to create invoice \"].json[\"line_items\"]}}"
            },
            {
              "name": "invoice_number",
              "value": "={{$node[\"Function to create invoice \"].json[\"invoice_number\"]}}"
            },
            {
              "name": "reference_number",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"po_number\"]}}"
            },
            {
              "name": "custom_fields",
              "value": "={{$node[\"Function to create invoice \"].json[\"custom_fields\"]}}"
            },
            {
              "name": "date",
              "value": "={{$node[\"Function to create invoice \"].json[\"invoice_date\"]}}"
            },
            {
              "name": "payment_terms",
              "value": "={{$node[\"Function to create invoice \"].json[\"payment_terms\"]}}"
            },
            {
              "name": "discount",
              "value": "={{$node[\"Function to create invoice \"].json[\"discount\"].toFixed(2)}}"
            },
            {
              "name": "shipping_charge",
              "value": "={{$node[\"Function to create invoice \"].json[\"shipping_charge\"]}}"
            },
            {
              "name": "salesperson_name",
              "value": "={{$node[\"Function to create invoice \"].json[\"salesperson_name\"]}}"
            },
            {
              "name": "discount_type",
              "value": "=entity_level"
            },
            {
              "name": "place_of_supply",
              "value": "={{$node[\"Function to create invoice \"].json[\"place_of_supply\"]}}"
            },
            {
              "name": "is_discount_before_tax",
              "value": "={{$node[\"Function to create invoice \"].json[\"is_discount_before_tax\"]}}"
            },
            {
              "name": "tax_exemption_code",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"is_sez\"] == \"1\"?\"AMAZON IN- CUSTOMERTAXEXEMPTION\":\"\"}}"
            }
          ]
        }
      },
      "name": "create invoice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2260,
        140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let contact_name=$node[\"wait for order data\"].json[\"body\"][\"contact_name\"]\nlet tax_treatment = \"\";\nlet gst_treatment = \"\";\nlet contact_type = \"customer\"; \nlet JSONString={\n  \"contact_name\":contact_name\n }\n if($node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"is_sez\"] == \"1\"){\n   tax_treatment = \"business_sez\";\n   gst_treatment = \"business_sez\";\n }else if($node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"gst_no\"] && $node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"is_sez\"] == \"0\"){\n   tax_treatment = \"business_gst\";\n   gst_treatment = \"business_gst\";\n }else {\n   tax_treatment = \"consumer\";\n   gst_treatment = \"consumer\";\n }\n items[0].json.contact_type = contact_type;\n items[0].json.tax_treatment = tax_treatment;\n items[0].json.gst_treatment = gst_treatment;\n items[0].json.JSONString=JSONString;\nreturn items;"
      },
      "name": "Function to create contact",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        360,
        120
      ]
    },
    {
      "parameters": {
        "functionCode": "\nlet inv_num=$node[\"wait for order data\"].json[\"body\"][\"invoice_number\"]\nlet pro_items=$node[\"wait for order data\"].json[\"body\"][\"line_items\"];\nlet payment_terms = $node[\"wait for order data\"].json[\"body\"][\"payment_terms\"]?$node[\"wait for order data\"].json[\"body\"][\"payment_terms\"]:\"Advance\";\nconst id= [];\nconst custom_fields=[];\nlet contact_id=\"\"\ncustom_fields.push(\n    {\n        label:$node[\"Globals\"].json[\"order_number_label\"],\n        value:$node[\"wait for order data\"].json[\"body\"][\"order_number\"]\n    },\n    {\n        label:\"PO Date\",\n        value:$node[\"wait for order data\"].json[\"body\"][\"po_date\"]\n    }\n    \n)\nif($node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"is_sez\"] == \"1\"){\n    custom_fields.push(\n        {\n            label:\"LUT or Bond No\",\n            value:$node[\"Globals\"].json[\"LUT or Bond No\"]\n        },\n        {\n            label:\"From    To\",\n            value:$node[\"Globals\"].json[\"From To\"]\n        }\n    )\n}\nfor (const [index,item] of items.entries()) {\n  if(item.json.hasOwnProperty(\"code\")){\n     let list = pro_items.find(data=>data.sku === (item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"sku\"]:item.json[\"items\"][0][\"sku\"]))\n     id.push(\n     {\n         item_id: item.json.hasOwnProperty(\"item\")?item.json[\"item\"][\"item_id\"]:item.json[\"items\"][0][\"item_id\"],\n         quantity:list[\"quantity\"],\n         rate:list[\"rate\"],\n         //tax_id: \"1763031000000067158\",\n         //tax_name: \"IGST18\",\n         //tax_type: \"tax\",\n        // tax_percentage: 18,\n     }); \n  }   \n}\nif($node[\"Check for Customer\"].json[\"contacts\"].length!==0){\n    contact_id=$node[\"Check for Customer\"].json[\"contacts\"][0][\"contact_id\"]\n}else{\n    contact_id=$node[\"create contact\"].json[\"contact\"][\"contact_id\"]\n}\nlet invoice_obj={\n \"customer_id\":contact_id,\n  \"line_items\":id,\n \"invoice_number\":\"1test-\"+inv_num,\n \"invoice_date\":$node[\"wait for order data\"].json[\"body\"][\"invoice_date\"],\n \"salesperson_name\":$node[\"wait for order data\"].json[\"body\"][\"salesperson_name\"],\n \"custom_fields\":custom_fields,\n \"payment_terms\":$node[\"Globals\"].json[payment_terms],\n \"discount\": $node[\"wait for order data\"].json[\"body\"][\"discount\"],\n \"shipping_charge\":$node[\"wait for order data\"].json[\"body\"][\"shipping_charge\"],\n \"billing_address\":$node[\"wait for order data\"].json[\"body\"][\"billing_address\"],\n \"shipping_address\":$node[\"wait for order data\"].json[\"body\"][\"shipping_address\"],\n \"place_of_supply\":$node[\"wait for order data\"].json[\"body\"][\"place_of_supply\"],\n \"is_discount_before_tax\":false\n}  \nlet returnItems = []\nreturnItems.push({\njson:invoice_obj\n})\nreturn returnItems ;\n"
      },
      "name": "Function to create invoice ",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1880,
        380
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "invoice_bill",
        "responseMode": "lastNode",
        "responseData": "allEntries",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "sd_invoice",
                "value": "7654329012347189"
              }
            ]
          }
        }
      },
      "name": "wait for order data",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1140,
        360
      ],
      "webhookId": "b30792e0-2878-4a2d-947b-3a200313ce70",
      "credentials": {
        "httpBasicAuth": {
          "id": "28",
          "name": "SD_Invoice_Bill creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/orders/{{$node[\"wait for order data\"].json[\"body\"][\"order_number\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "e_invoice_id",
              "value": "={{$node[\"Get the invoice id by invoice number\"].json[\"data\"].length== 0?$node[\"create invoice\"].json[\"invoice\"][\"invoice_id\"]:$node[\"Update the invoice\"].json[\"invoice\"][\"invoice_id\"]}}"
            },
            {
              "name": "e_invoice_status",
              "value": "={{$node[\"Get the invoice id by invoice number\"].json[\"data\"].length== 0?$node[\"create invoice\"].json[\"invoice\"][\"status\"]:$node[\"Update the invoice\"].json[\"invoice\"][\"status\"]}}"
            },
            {
              "name": "invoice_number",
              "value": "={{$node[\"Get the invoice id by invoice number\"].json[\"data\"].length== 0?$node[\"create invoice\"].json[\"invoice\"][\"invoice_number\"]:$node[\"Update the invoice\"].json[\"invoice\"][\"invoice_number\"]}}"
            },
            {
              "name": "sd_invoice_status",
              "value": "=pending"
            }
          ]
        }
      },
      "name": "Post E-Invoice ID and E-Invoice status to DMS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2960,
        400
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [],
          "number": [
            {
              "value1": "={{$node[\"Check for Customer\"].json[\"contacts\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        300,
        360
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/contacts/?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "gst_no",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"gst_no\"]}}"
            },
            {
              "name": "contact_name",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"company_name\"]}}"
            },
            {
              "name": "contact_type",
              "value": "=customer"
            }
          ]
        }
      },
      "name": "Check for Customer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        140,
        360
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/items?organization_id=685685414",
        "allowUnauthorizedCerts": true,
        "options": {},
        "headerParametersUi": {
          "parameter": []
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "sku",
              "value": "={{$node[\"Function for item objects\"].json[\"0\"][\"sku\"]}}"
            }
          ]
        }
      },
      "name": "Check for item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1060,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for item\"].json[\"items\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Condition for creating item",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1220,
        380
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "functionCode": "let list_items = $node[\"wait for order data\"].json[\"body\"][\"line_items\"]\nlet zoho_taxes = $node[\"Get taxes\"].json[\"taxes\"];\n\nlet returnItems = []\nlet resultFilter = \n   list_items.filter(list=>\n      items.some(\n      data=> data.json[\"page_context\"][\"search_criteria\"][0][\"search_text\"] === list.sku\n    )\n  );\n\n\nresultFilter .forEach(function(obj,index){ \n    let taxes = obj.item_tax_preferences;\n    let igst_tax =  taxes.filter(tax=>tax.tax_name == \"IGST\");\n    let gst_tax = taxes.filter(tax=>tax.tax_name == \"GST\");\n    let igst_tax_name = igst_tax[0].tax_name+parseInt(igst_tax[0].tax_percentage);\n    let gst_tax_name = gst_tax[0].tax_name+parseInt(gst_tax[0].tax_percentage);\n    let igst_taxid_obj = zoho_taxes.filter(tax=>tax.tax_name == igst_tax_name);\n    let gst_taxid_obj = zoho_taxes.filter(tax=>tax.tax_name == gst_tax_name);\n    returnItems.push({\n    json: [{\n       name:obj[\"sku\"].includes(\"QOC\")||obj[\"sku\"].includes(\"CRMPRO\")?(obj[\"name\"]+\"/n\"+\"-\"+obj[\"sku\"]).substring(0,198):obj[\"name\"].substring(0,198)+\"/n\",\n       item_type :obj[\"item_type\"],\n       sku:obj[\"sku\"],\n       hsn_or_sac:obj[\"hsn_or_sac\"],\n       available_stock:obj.stock,\n       purchase_account_id:\"1763031000000293201\",\n       purchase_account_name: \"Purchase Domestic\",\n       item_type: \"inventory\",\n       unit : \"pcs\",\n       is_returnable:true,\n       \"item_tax_preferences\": [\n          {\n              \"tax_specification\": \"inter\",\n              \"tax_type\": 2,\n              \"tax_name\": igst_tax[0].tax_name+parseInt(igst_tax[0].tax_percentage),\n              \"tax_percentage\": parseInt(igst_tax[0].tax_percentage),\n              \"tax_id\": igst_taxid_obj[0].tax_id\n          },\n          {\n              \"tax_specification\": \"intra\",\n              \"tax_type\": 2,\n              \"tax_name\": gst_tax[0].tax_name+parseInt(gst_tax[0].tax_percentage),\n              \"tax_percentage\": parseInt(gst_tax[0].tax_percentage),\n              \"tax_id\": gst_taxid_obj[0].tax_id\n          }\n        ],\n    }]\n  }); \n})\n\nreturn returnItems ;\n\n"
      },
      "name": "Function for create item",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        80
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "\nlet pro_type=$node[\"wait for order data\"].json[\"body\"][\"item_type\"]\nlet pro_items=$node[\"wait for order data\"].json[\"body\"][\"line_items\"]\nlet returnItems =[]\n\npro_items.forEach(function(obj,index){  \n    returnItems.push({\n    json: [{\n       name:obj[\"name\"],\n       rate:obj[\"rate\"],\n       sku:obj[\"sku\"],\n       item_type :obj[\"item_type\"] \n    }]\n  });\n  \n})\n\nreturn returnItems;"
      },
      "name": "Function for item objects",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        380
      ]
    },
    {
      "parameters": {},
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1660,
        370
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "order_number_label",
              "value": "=Shakedeal Order No"
            },
            {
              "name": "dms_url",
              "value": "={{$node[\"wait for order data\"].json[\"headers\"][\"x-sd-env\"] === \"prod\"?\"https://zeus.shakedeal.com\":\"https://zeusqa.shakedeal.com\"}}"
            },
            {
              "name": "=bond_number",
              "value": "LUT or Bond No"
            },
            {
              "name": "LUT or Bond No",
              "value": "=AD290323041532C"
            },
            {
              "name": "From To",
              "value": "=1-4-2023 to 31-3-2023"
            }
          ],
          "number": [
            {
              "name": "organization_id",
              "value": "=685685414"
            },
            {
              "name": "Advance",
              "value": "={{0}}"
            },
            {
              "name": "On Delivery",
              "value": "={{2}}"
            },
            {
              "name": "15 days",
              "value": "={{15}}"
            },
            {
              "name": "15 Days Credit",
              "value": "={{15}}"
            },
            {
              "name": "30 Days Credit",
              "value": "={{30}}"
            },
            {
              "name": "0 days",
              "value": "={{0}}"
            },
            {
              "name": "30 days",
              "value": "={{30}}"
            },
            {
              "name": "45 days",
              "value": "={{45}}"
            },
            {
              "name": "7 Days Credit",
              "value": "={{7}}"
            },
            {
              "name": "100% Advance",
              "value": "={{0}}"
            },
            {
              "name": "90 Days Credit",
              "value": "={{90}}"
            },
            {
              "name": "45 Days Credit",
              "value": "={{45}}"
            },
            {
              "name": "3 Days Credit",
              "value": "={{3}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -620,
        340
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Existing Products",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1460,
        560
      ]
    },
    {
      "parameters": {
        "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\n/*for (item of items) {\n  item.json.myNewField = 1;\n}\n\n You can write logs to the browser console\nconsole.log('Done!');*/\nlet products = $node[\"wait for order data\"].json[\"body\"][\"line_items\"];\nlet product_codes = [];\nproducts.forEach(function(product,index){\n    product_codes.push(product.sku);\n})\n\nitems[0].json.line_items=products;\nitems[0].json.product_codes = product_codes;\n\nreturn items;"
      },
      "name": "Get product codes",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3320,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_order_products?filter={\"product_code\":{\"_in\":\"{{$node[\"Get product codes\"].json[\"product_codes\"]}}\"}}",
        "options": {}
      },
      "name": "Check for items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3660,
        400
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let data = $node[\"Check for items\"].json.data;\nlet products = $node[\"wait for order data\"].json[\"body\"][\"line_items\"];\nlet action = \"\";\nlet products_to_post =[];\nlet filter_products = products.filter(product=>!data.some(item=>item.product_code == product.sku));\n\nif(filter_products.length){\n  action = \"post_products\" \n}else action = \"no_products_to_post\"\n\nif(filter_products.length){\n    filter_products.forEach(function(product,index){\n      products_to_post[index]={};\n      products_to_post[index].product_name = product.name;\n      products_to_post[index].product_code = product.sku;\n    })\n}\n\nitems[0].json.data= data\nitems[0].json.filter_products= filter_products;\nitems[0].json.products_to_post= products_to_post;\nitems[0].json.action = action;\nreturn items;"
      },
      "name": "Function to create products",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3940,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Function to create products\"].json[\"action\"]}}",
              "value2": "=post_products"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4200,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/sd_order_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function to create products\"].json[\"products_to_post\"]}}"
      },
      "name": "Create the products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4500,
        180
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {},
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4500,
        560
      ]
    },
    {
      "parameters": {
        "functionCode": "let existing_Products = $node[\"Check for items\"].json[\"data\"];\nlet created_products = $node[\"Function to create products\"].json[\"action\"]==\"post_products\"?$node[\"Create the products\"].json[\"data\"]:[];\nlet all_products = [...existing_Products,...created_products];\nlet products = $node[\"wait for order data\"].json[\"body\"][\"line_items\"];\nlet orderId = $node[\"Check for order in orders\"].json[\"data\"][0][\"id\"];\nlet order_product_obj = []\nall_products.forEach(function(product,index){\n  order_product_obj[index]={};\n  order_product_obj[index].orders_id = orderId;\n  order_product_obj[index].sd_order_products_id = product.id;\n  let filter_product_obj = products.filter(obj=>obj.sku == product.product_code);\n  order_product_obj[index].req_quantity = parseInt(filter_product_obj[0].quantity);\n  order_product_obj[index].product_total =parseInt(filter_product_obj[0].rate);\n  order_product_obj[index].sd_invoice_status = \"pending\"\n})\n\nitems[0].json.order_product_obj= order_product_obj\nitems[0].json.existing_Products= existing_Products;\nitems[0].json.created_products= created_products;\nitems[0].json.all_products= all_products;\nreturn items;"
      },
      "name": "Function for creating order product mapping",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        5700,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/orders_sd_order_products",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"Function for creating order product mapping\"].json[\"order_product_obj\"]}}"
      },
      "name": "Create the order product mapping in order_items_sd_order_products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        5940,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/orders?filter={\"id\":{\"_eq\":\"{{$node[\"wait for order data\"].json[\"body\"][\"order_number\"]}}\"}}",
        "options": {}
      },
      "name": "Check for order in orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4800,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/orders?filter={\"invoice_number\":{\"_eq\":\"{{$node[\"wait for order data\"].json[\"body\"][\"invoice_number\"]}}\"}}",
        "options": {}
      },
      "name": "Get the invoice id by invoice number",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2080,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Get the invoice id by invoice number\"].json[\"data\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "IF2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2220,
        360
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PUT",
        "url": "=https://books.zoho.com/api/v3/invoices/{{$node[\"Get the invoice id by invoice number\"].json[\"data\"][0][\"e_invoice_id\"]}}?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "customer_id",
              "value": "={{$node[\"Function to create invoice \"].json[\"customer_id\"]}}"
            },
            {
              "name": "line_items",
              "value": "={{$node[\"Function to create invoice \"].json[\"line_items\"]}}"
            },
            {
              "name": "invoice_number",
              "value": "={{$node[\"Function to create invoice \"].json[\"invoice_number\"]}}"
            },
            {
              "name": "reference_number",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"po_number\"]}}"
            },
            {
              "name": "custom_fields",
              "value": "={{$node[\"Function to create invoice \"].json[\"custom_fields\"]}}"
            },
            {
              "name": "date",
              "value": "={{$node[\"Function to create invoice \"].json[\"invoice_date\"]}}"
            },
            {
              "name": "payment_terms",
              "value": "={{$node[\"Function to create invoice \"].json[\"payment_terms\"]}}"
            },
            {
              "name": "discount",
              "value": "={{$node[\"Function to create invoice \"].json[\"discount\"]}}"
            },
            {
              "name": "shipping_charge",
              "value": "={{$node[\"Function to create invoice \"].json[\"shipping_charge\"]}}"
            },
            {
              "name": "discount_type",
              "value": "=entity_level"
            },
            {
              "name": "salesperson_name",
              "value": "={{$node[\"Function to create invoice \"].json[\"salesperson_name\"]}}"
            },
            {
              "name": "is_discount_before_tax",
              "value": "={{$node[\"Function to create invoice \"].json[\"is_discount_before_tax\"]}}"
            }
          ]
        }
      },
      "name": "Update the invoice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2620,
        600
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Check for order in orders\"].json[\"data\"][0][\"products\"].length}}",
              "operation": "equal"
            }
          ]
        }
      },
      "name": "IF3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        5020,
        340
      ]
    },
    {
      "parameters": {},
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        5300,
        160
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=DELETE FROM orders_sd_order_products WHERE orders_id='{{$node[\"Check for order in orders\"].json[\"data\"][0][\"id\"]}}'",
        "additionalFields": {}
      },
      "name": "Postgres",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        5300,
        540
      ],
      "executeOnce": true,
      "alwaysOutputData": true,
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "13",
          "name": "Dms - QA"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"wait for order data\"].json[\"body\"][\"action\"]}}",
              "value2": "=delete"
            }
          ]
        }
      },
      "name": "IF4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -220,
        340
      ]
    },
    {
      "parameters": {},
      "name": "NoOp2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -20,
        580
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/orders?filter={\"invoice_number\":{\"_eq\":\"{{$node[\"wait for order data\"].json[\"body\"][\"invoice_number\"]}}\"}}",
        "options": {}
      },
      "name": "Get the invoice_id",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -140,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "31",
          "name": "header auth creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "DELETE",
        "url": "=https://books.zoho.com/api/v3/invoices/{{$node[\"Get the invoice_id\"].json[\"data\"][0][\"e_invoice_id\"]}}?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "allowUnauthorizedCerts": true,
        "options": {}
      },
      "name": "Delete the invoice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        80,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://books.zoho.com/api/v3/settings/taxes?organization_id=685685414",
        "options": {}
      },
      "name": "Get taxes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        700,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"wait for order data\"].json[\"body\"][\"contact_details\"][\"gst_no\"]}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Condition for checking order_type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -920,
        360
      ],
      "disabled": true
    },
    {
      "parameters": {},
      "name": "NoOp3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -660,
        540
      ],
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PUT",
        "url": "=https://books.zoho.com/api/v3/invoices/{{$node[\"Get the invoice id by invoice number\"].json[\"data\"].length== 0?$node[\"create invoice\"].json[\"invoice\"][\"invoice_id\"]:$node[\"Update the invoice\"].json[\"invoice\"][\"invoice_id\"]}}/address/billing?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"wait for order data\"].json[\"body\"][\"billing_address\"]}}"
      },
      "name": "Update billing address",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2600,
        140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PUT",
        "url": "=https://books.zoho.com/api/v3/invoices/{{$node[\"Get the invoice id by invoice number\"].json[\"data\"].length== 0?$node[\"create invoice\"].json[\"invoice\"][\"invoice_id\"]:$node[\"Update the invoice\"].json[\"invoice\"][\"invoice_id\"]}}/address/shipping?organization_id={{$node[\"Globals\"].json[\"organization_id\"]}}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$node[\"wait for order data\"].json[\"body\"][\"shipping_address\"]}}"
      },
      "name": "Update shipping address",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2940,
        140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "29",
          "name": "zoho books creds"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/tally_e_invoices?filter={\"id\":{\"_eq\":\"{{$node[\"wait for order data\"].json[\"body\"][\"invoice_number\"]}}\"}}",
        "options": {}
      },
      "name": "Get the invoice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        6160,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"Get the invoice\"].json[\"data\"].length?true:false}}"
            }
          ]
        }
      },
      "name": "Check invoice exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        6520,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/tally_e_invoices/{{$node[\"wait for order data\"].json[\"body\"][\"invoice_number\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "invoice_data",
              "value": "={{$node[\"Function\"].json[\"invoiceData\"]}}"
            }
          ]
        }
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        6880,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "={{$node[\"Globals\"].json[\"dms_url\"]}}/items/tally_e_invoices",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "id",
              "value": "={{$node[\"wait for order data\"].json[\"body\"][\"invoice_number\"]}}"
            },
            {
              "name": "invoice_data",
              "value": "={{$node[\"Function\"].json[\"invoiceData\"]}}"
            }
          ]
        }
      },
      "name": "Create E-invoice in tally",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        6880,
        540
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "10",
          "name": "SD-Dms-Token"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let invoiceLineItems = $node[\"wait for order data\"].json[\"line_items\"];\nlet invoiceData = $node[\"wait for order data\"].json[\"body\"];\nlet grossInvoiceValue = 0;\nlet netInvoiceValue = invoiceLineItems.reduce(\n              (total, item) =>\n                parseFloat(item.rate) *\n                  parseFloat(item.quantity) +\n                total,\n              0\n            );\ninvoiceLineItems.forEach(function(item,index){\n  let netValue = parseFloat(item.rate) * parseFloat(item.quantity)\n  grossInvoiceValue = grossInvoiceValue + netValue+(netValue*item.item_tax_preferences[0].tax_percentage)/100;\n})\ninvoiceData.total_cost = grossInvoiceValue;\n\nitems[0].json.invoiceData = invoiceData;\nreturn items;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        6340,
        300
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [
    {
      "id": "1",
      "name": "E-invoice",
      "createdAt": "2022-04-25T07:09:37.693Z",
      "updatedAt": "2022-04-25T07:09:37.693Z"
    }
  ],
  "updatedAt": "2023-05-03T10:19:37.530Z"
}